/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStructAnnotation implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStructAnnotation");
  private static final TField COUNT_FIELD_DESC = new TField("count", TType.I64, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField EXTRA_FIELD_DESC = new TField("extra", TType.STRING, (short)3);
  private static final TField NEST_FIELD_DESC = new TField("nest", TType.STRUCT, (short)4);

  public final Long count;
  public final String name;
  public final String extra;
  public final MyStructNestedAnnotation nest;
  public static final int COUNT = 1;
  public static final int NAME = 2;
  public static final int EXTRA = 3;
  public static final int NEST = 4;

  public MyStructAnnotation(
      Long count,
      String name,
      String extra,
      MyStructNestedAnnotation nest) {
    this.count = count;
    this.name = name;
    this.extra = extra;
    this.nest = nest;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStructAnnotation(MyStructAnnotation other) {
    if (other.isSetCount()) {
      this.count = TBaseHelper.deepCopy(other.count);
    } else {
      this.count = null;
    }
    if (other.isSetName()) {
      this.name = TBaseHelper.deepCopy(other.name);
    } else {
      this.name = null;
    }
    if (other.isSetExtra()) {
      this.extra = TBaseHelper.deepCopy(other.extra);
    } else {
      this.extra = null;
    }
    if (other.isSetNest()) {
      this.nest = TBaseHelper.deepCopy(other.nest);
    } else {
      this.nest = null;
    }
  }

  public MyStructAnnotation deepCopy() {
    return new MyStructAnnotation(this);
  }

  public Long getCount() {
    return this.count;
  }

  // Returns true if field count is set (has been assigned a value) and false otherwise
  public boolean isSetCount() {
    return this.count != null;
  }

  public String getName() {
    return this.name;
  }

  // Returns true if field name is set (has been assigned a value) and false otherwise
  public boolean isSetName() {
    return this.name != null;
  }

  public String getExtra() {
    return this.extra;
  }

  // Returns true if field extra is set (has been assigned a value) and false otherwise
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public MyStructNestedAnnotation getNest() {
    return this.nest;
  }

  // Returns true if field nest is set (has been assigned a value) and false otherwise
  public boolean isSetNest() {
    return this.nest != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStructAnnotation))
      return false;
    MyStructAnnotation that = (MyStructAnnotation)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetCount(), that.isSetCount(), this.count, that.count)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetName(), that.isSetName(), this.name, that.name)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetExtra(), that.isSetExtra(), this.extra, that.extra)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetNest(), that.isSetNest(), this.nest, that.nest)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {count, name, extra, nest});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStructAnnotation deserialize(TProtocol iprot) throws TException {
    Long tmp_count = null;
    String tmp_name = null;
    String tmp_extra = null;
    MyStructNestedAnnotation tmp_nest = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) { 
        break;
      }
      switch (__field.id)
      {
        case COUNT:
          if (__field.type == TType.I64) {
            tmp_count = iprot.readI64();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NAME:
          if (__field.type == TType.STRING) {
            tmp_name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case EXTRA:
          if (__field.type == TType.STRING) {
            tmp_extra = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case NEST:
          if (__field.type == TType.STRUCT) {
            tmp_nest = MyStructNestedAnnotation.deserialize(iprot);
          } else { 
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStructAnnotation _that;
    _that = new MyStructAnnotation(
      tmp_count
      ,tmp_name
      ,tmp_extra
      ,tmp_nest
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.count != null) {
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI64(this.count);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.extra != null) {
      if (isSetExtra()) {
        oprot.writeFieldBegin(EXTRA_FIELD_DESC);
        oprot.writeString(this.extra);
        oprot.writeFieldEnd();
      }
    }
    if (this.nest != null) {
      oprot.writeFieldBegin(NEST_FIELD_DESC);
      this.nest.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

