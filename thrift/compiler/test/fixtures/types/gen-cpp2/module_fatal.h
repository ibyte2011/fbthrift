/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/reflection/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_types.h"
namespace apache { namespace thrift { namespace fixtures { namespace types {

namespace thrift_fatal_impl_detail {

struct apache_thrift_fixtures_types_module__unique_strings_list {
  using AllocatorAware = ::fatal::sequence<char, 'A', 'l', 'l', 'o', 'c', 'a', 't', 'o', 'r', 'A', 'w', 'a', 'r', 'e'>;
  using AllocatorAware2 = ::fatal::sequence<char, 'A', 'l', 'l', 'o', 'c', 'a', 't', 'o', 'r', 'A', 'w', 'a', 'r', 'e', '2'>;
  using AnnotatedTypes = ::fatal::sequence<char, 'A', 'n', 'n', 'o', 't', 'a', 't', 'e', 'd', 'T', 'y', 'p', 'e', 's'>;
  using ComplexNestedWithDefault = ::fatal::sequence<char, 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'N', 'e', 's', 't', 'e', 'd', 'W', 'i', 't', 'h', 'D', 'e', 'f', 'a', 'u', 'l', 't'>;
  using ComplexString = ::fatal::sequence<char, 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'S', 't', 'r', 'i', 'n', 'g'>;
  using ContainerStruct = ::fatal::sequence<char, 'C', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r', 'S', 't', 'r', 'u', 'c', 't'>;
  using CppTypeStruct = ::fatal::sequence<char, 'C', 'p', 'p', 'T', 'y', 'p', 'e', 'S', 't', 'r', 'u', 'c', 't'>;
  using ForwardUsageByRef = ::fatal::sequence<char, 'F', 'o', 'r', 'w', 'a', 'r', 'd', 'U', 's', 'a', 'g', 'e', 'B', 'y', 'R', 'e', 'f'>;
  using ForwardUsageRoot = ::fatal::sequence<char, 'F', 'o', 'r', 'w', 'a', 'r', 'd', 'U', 's', 'a', 'g', 'e', 'R', 'o', 'o', 't'>;
  using ForwardUsageStruct = ::fatal::sequence<char, 'F', 'o', 'r', 'w', 'a', 'r', 'd', 'U', 's', 'a', 'g', 'e', 'S', 't', 'r', 'u', 'c', 't'>;
  using MinPadding = ::fatal::sequence<char, 'M', 'i', 'n', 'P', 'a', 'd', 'd', 'i', 'n', 'g'>;
  using MyBinaryField = ::fatal::sequence<char, 'M', 'y', 'B', 'i', 'n', 'a', 'r', 'y', 'F', 'i', 'e', 'l', 'd'>;
  using MyBinaryField2 = ::fatal::sequence<char, 'M', 'y', 'B', 'i', 'n', 'a', 'r', 'y', 'F', 'i', 'e', 'l', 'd', '2'>;
  using MyBinaryField3 = ::fatal::sequence<char, 'M', 'y', 'B', 'i', 'n', 'a', 'r', 'y', 'F', 'i', 'e', 'l', 'd', '3'>;
  using MyBinaryListField4 = ::fatal::sequence<char, 'M', 'y', 'B', 'i', 'n', 'a', 'r', 'y', 'L', 'i', 's', 't', 'F', 'i', 'e', 'l', 'd', '4'>;
  using MyBoolField = ::fatal::sequence<char, 'M', 'y', 'B', 'o', 'o', 'l', 'F', 'i', 'e', 'l', 'd'>;
  using MyDataItem = ::fatal::sequence<char, 'M', 'y', 'D', 'a', 't', 'a', 'I', 't', 'e', 'm'>;
  using MyEnumA = ::fatal::sequence<char, 'M', 'y', 'E', 'n', 'u', 'm', 'A'>;
  using MyForwardRefEnum = ::fatal::sequence<char, 'M', 'y', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 'R', 'e', 'f', 'E', 'n', 'u', 'm'>;
  using MyIntField = ::fatal::sequence<char, 'M', 'y', 'I', 'n', 't', 'F', 'i', 'e', 'l', 'd'>;
  using MyMapEnumAndInt = ::fatal::sequence<char, 'M', 'y', 'M', 'a', 'p', 'E', 'n', 'u', 'm', 'A', 'n', 'd', 'I', 'n', 't'>;
  using MyStringField = ::fatal::sequence<char, 'M', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'F', 'i', 'e', 'l', 'd'>;
  using MyStringField2 = ::fatal::sequence<char, 'M', 'y', 'S', 't', 'r', 'i', 'n', 'g', 'F', 'i', 'e', 'l', 'd', '2'>;
  using MyStruct = ::fatal::sequence<char, 'M', 'y', 'S', 't', 'r', 'u', 'c', 't'>;
  using MyStructWithForwardRefEnum = ::fatal::sequence<char, 'M', 'y', 'S', 't', 'r', 'u', 'c', 't', 'W', 'i', 't', 'h', 'F', 'o', 'r', 'w', 'a', 'r', 'd', 'R', 'e', 'f', 'E', 'n', 'u', 'm'>;
  using NONZERO = ::fatal::sequence<char, 'N', 'O', 'N', 'Z', 'E', 'R', 'O'>;
  using NoExceptMoveUnion = ::fatal::sequence<char, 'N', 'o', 'E', 'x', 'c', 'e', 'p', 't', 'M', 'o', 'v', 'e', 'U', 'n', 'i', 'o', 'n'>;
  using NoexceptMoveComplexStruct = ::fatal::sequence<char, 'N', 'o', 'e', 'x', 'c', 'e', 'p', 't', 'M', 'o', 'v', 'e', 'C', 'o', 'm', 'p', 'l', 'e', 'x', 'S', 't', 'r', 'u', 'c', 't'>;
  using NoexceptMoveEmpty = ::fatal::sequence<char, 'N', 'o', 'e', 'x', 'c', 'e', 'p', 't', 'M', 'o', 'v', 'e', 'E', 'm', 'p', 't', 'y'>;
  using NoexceptMoveSimpleStruct = ::fatal::sequence<char, 'N', 'o', 'e', 'x', 'c', 'e', 'p', 't', 'M', 'o', 'v', 'e', 'S', 'i', 'm', 'p', 'l', 'e', 'S', 't', 'r', 'u', 'c', 't'>;
  using Renaming = ::fatal::sequence<char, 'R', 'e', 'n', 'a', 'm', 'i', 'n', 'g'>;
  using SomeService = ::fatal::sequence<char, 'S', 'o', 'm', 'e', 'S', 'e', 'r', 'v', 'i', 'c', 'e'>;
  using TrivialNestedWithDefault = ::fatal::sequence<char, 'T', 'r', 'i', 'v', 'i', 'a', 'l', 'N', 'e', 's', 't', 'e', 'd', 'W', 'i', 't', 'h', 'D', 'e', 'f', 'a', 'u', 'l', 't'>;
  using TrivialNumeric = ::fatal::sequence<char, 'T', 'r', 'i', 'v', 'i', 'a', 'l', 'N', 'u', 'm', 'e', 'r', 'i', 'c'>;
  using Type = ::fatal::sequence<char, 'T', 'y', 'p', 'e'>;
  using VirtualStruct = ::fatal::sequence<char, 'V', 'i', 'r', 't', 'u', 'a', 'l', 'S', 't', 'r', 'u', 'c', 't'>;
  using ZERO = ::fatal::sequence<char, 'Z', 'E', 'R', 'O'>;
  using a = ::fatal::sequence<char, 'a'>;
  using aa_list = ::fatal::sequence<char, 'a', 'a', '_', 'l', 'i', 's', 't'>;
  using aa_map = ::fatal::sequence<char, 'a', 'a', '_', 'm', 'a', 'p'>;
  using aa_set = ::fatal::sequence<char, 'a', 'a', '_', 's', 'e', 't'>;
  using aa_string = ::fatal::sequence<char, 'a', 'a', '_', 's', 't', 'r', 'i', 'n', 'g'>;
  using apache__thrift__fixtures__types = ::fatal::sequence<char, 'a', 'p', 'a', 'c', 'h', 'e', ':', ':', 't', 'h', 'r', 'i', 'f', 't', ':', ':', 'f', 'i', 'x', 't', 'u', 'r', 'e', 's', ':', ':', 't', 'y', 'p', 'e', 's'>;
  using b = ::fatal::sequence<char, 'b'>;
  using bar = ::fatal::sequence<char, 'b', 'a', 'r'>;
  using big = ::fatal::sequence<char, 'b', 'i', 'g'>;
  using biggish = ::fatal::sequence<char, 'b', 'i', 'g', 'g', 'i', 's', 'h'>;
  using binary_field = ::fatal::sequence<char, 'b', 'i', 'n', 'a', 'r', 'y', '_', 'f', 'i', 'e', 'l', 'd'>;
  using binary_keyed_map = ::fatal::sequence<char, 'b', 'i', 'n', 'a', 'r', 'y', '_', 'k', 'e', 'y', 'e', 'd', '_', 'm', 'a', 'p'>;
  using boolField = ::fatal::sequence<char, 'b', 'o', 'o', 'l', 'F', 'i', 'e', 'l', 'd'>;
  using bounce_map = ::fatal::sequence<char, 'b', 'o', 'u', 'n', 'c', 'e', '_', 'm', 'a', 'p'>;
  using cpp = ::fatal::sequence<char, 'c', 'p', 'p'>;
  using cpp2 = ::fatal::sequence<char, 'c', 'p', 'p', '2'>;
  using cpp2_noncomparable = ::fatal::sequence<char, 'c', 'p', 'p', '2', '.', 'n', 'o', 'n', 'c', 'o', 'm', 'p', 'a', 'r', 'a', 'b', 'l', 'e'>;
  using cpp_allocator = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'a', 'l', 'l', 'o', 'c', 'a', 't', 'o', 'r'>;
  using cpp_declare_bitwise_ops = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'd', 'e', 'c', 'l', 'a', 'r', 'e', '_', 'b', 'i', 't', 'w', 'i', 's', 'e', '_', 'o', 'p', 's'>;
  using cpp_declare_equal_to = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'd', 'e', 'c', 'l', 'a', 'r', 'e', '_', 'e', 'q', 'u', 'a', 'l', '_', 't', 'o'>;
  using cpp_declare_hash = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'd', 'e', 'c', 'l', 'a', 'r', 'e', '_', 'h', 'a', 's', 'h'>;
  using cpp_deprecated_enum_unscoped = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'd', 'e', 'p', 'r', 'e', 'c', 'a', 't', 'e', 'd', '_', 'e', 'n', 'u', 'm', '_', 'u', 'n', 's', 'c', 'o', 'p', 'e', 'd'>;
  using cpp_minimize_padding = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'm', 'i', 'n', 'i', 'm', 'i', 'z', 'e', '_', 'p', 'a', 'd', 'd', 'i', 'n', 'g'>;
  using cpp_noexcept_move = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'n', 'o', 'e', 'x', 'c', 'e', 'p', 't', '_', 'm', 'o', 'v', 'e'>;
  using cpp_virtual = ::fatal::sequence<char, 'c', 'p', 'p', '.', 'v', 'i', 'r', 't', 'u', 'a', 'l'>;
  using data = ::fatal::sequence<char, 'd', 'a', 't', 'a'>;
  using decorated_struct = ::fatal::sequence<char, 'd', 'e', 'c', 'o', 'r', 'a', 't', 'e', 'd', '_', 's', 't', 'r', 'u', 'c', 't'>;
  using field = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd'>;
  using fieldA = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'A'>;
  using fieldB = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'B'>;
  using fieldC = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'C'>;
  using fieldD = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'D'>;
  using fieldE = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'E'>;
  using fieldF = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'F'>;
  using fieldG = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'G'>;
  using fieldH = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 'H'>;
  using foo = ::fatal::sequence<char, 'f', 'o', 'o'>;
  using has_bitwise_ops = ::fatal::sequence<char, 'h', 'a', 's', '_', 'b', 'i', 't', 'w', 'i', 's', 'e', '_', 'o', 'p', 's'>;
  using hello = ::fatal::sequence<char, 'h', 'e', 'l', 'l', 'o'>;
  using i32_field = ::fatal::sequence<char, 'i', '3', '2', '_', 'f', 'i', 'e', 'l', 'd'>;
  using is_unscoped = ::fatal::sequence<char, 'i', 's', '_', 'u', 'n', 's', 'c', 'o', 'p', 'e', 'd'>;
  using list_field = ::fatal::sequence<char, 'l', 'i', 's', 't', '_', 'f', 'i', 'e', 'l', 'd'>;
  using m = ::fatal::sequence<char, 'm'>;
  using majorVer = ::fatal::sequence<char, 'm', 'a', 'j', 'o', 'r', 'V', 'e', 'r'>;
  using medium = ::fatal::sequence<char, 'm', 'e', 'd', 'i', 'u', 'm'>;
  using module = ::fatal::sequence<char, 'm', 'o', 'd', 'u', 'l', 'e'>;
  using n = ::fatal::sequence<char, 'n'>;
  using none = ::fatal::sequence<char, 'n', 'o', 'n', 'e'>;
  using not_a_container = ::fatal::sequence<char, 'n', 'o', 't', '_', 'a', '_', 'c', 'o', 'n', 't', 'a', 'i', 'n', 'e', 'r'>;
  using one = ::fatal::sequence<char, 'o', 'n', 'e'>;
  using r = ::fatal::sequence<char, 'r'>;
  using small = ::fatal::sequence<char, 's', 'm', 'a', 'l', 'l'>;
  using string_field = ::fatal::sequence<char, 's', 't', 'r', 'i', 'n', 'g', '_', 'f', 'i', 'e', 'l', 'd'>;
  using three = ::fatal::sequence<char, 't', 'h', 'r', 'e', 'e'>;
  using tiny = ::fatal::sequence<char, 't', 'i', 'n', 'y'>;
  using two = ::fatal::sequence<char, 't', 'w', 'o'>;
  using world = ::fatal::sequence<char, 'w', 'o', 'r', 'l', 'd'>;
  using z = ::fatal::sequence<char, 'z'>;
  using zero = ::fatal::sequence<char, 'z', 'e', 'r', 'o'>;
};

} // thrift_fatal_impl_detail
class module_tags {
  struct apache_thrift_fixtures_types_module__unique_languages_list {
    using cpp = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::cpp;
    using cpp2 = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::cpp2;
  };

  struct apache_thrift_fixtures_types_module__unique_enums_list {
    using has_bitwise_ops = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::has_bitwise_ops;
    using is_unscoped = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::is_unscoped;
    using MyForwardRefEnum = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyForwardRefEnum;
    using MyEnumA = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyEnumA;
  };

  struct apache_thrift_fixtures_types_module__unique_unions_list {
    using NoExceptMoveUnion = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoExceptMoveUnion;
  };

  struct apache_thrift_fixtures_types_module__unique_structs_list {
    using decorated_struct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::decorated_struct;
    using ContainerStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ContainerStruct;
    using CppTypeStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::CppTypeStruct;
    using VirtualStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::VirtualStruct;
    using MyStructWithForwardRefEnum = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyStructWithForwardRefEnum;
    using TrivialNumeric = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::TrivialNumeric;
    using TrivialNestedWithDefault = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::TrivialNestedWithDefault;
    using ComplexString = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ComplexString;
    using ComplexNestedWithDefault = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ComplexNestedWithDefault;
    using MinPadding = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MinPadding;
    using MyStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyStruct;
    using MyDataItem = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyDataItem;
    using Renaming = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::Renaming;
    using AnnotatedTypes = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AnnotatedTypes;
    using ForwardUsageRoot = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageRoot;
    using ForwardUsageStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageStruct;
    using ForwardUsageByRef = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageByRef;
    using NoexceptMoveEmpty = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveEmpty;
    using NoexceptMoveSimpleStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveSimpleStruct;
    using NoexceptMoveComplexStruct = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveComplexStruct;
    using AllocatorAware = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AllocatorAware;
    using AllocatorAware2 = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AllocatorAware2;
  };

  struct apache_thrift_fixtures_types_module__unique_constants_list {
  };

  struct apache_thrift_fixtures_types_module__unique_services_list {
    using SomeService = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::SomeService;
  };

public:
  struct module {};

  using languages = apache_thrift_fixtures_types_module__unique_languages_list;
  using enums = apache_thrift_fixtures_types_module__unique_enums_list;
  using unions = apache_thrift_fixtures_types_module__unique_unions_list;
  using structs = apache_thrift_fixtures_types_module__unique_structs_list;
  using constants = apache_thrift_fixtures_types_module__unique_constants_list;
  using services = apache_thrift_fixtures_types_module__unique_services_list;

  using strings = thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  module_tags::module,
  thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::module,
  // languages
  ::fatal::list<
    ::fatal::pair<thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::cpp, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::apache__thrift__fixtures__types>,
    ::fatal::pair<thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::cpp2, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::apache__thrift__fixtures__types>
  >,
  // enums
  ::fatal::list<
    ::fatal::pair<has_bitwise_ops, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::has_bitwise_ops>,
    ::fatal::pair<is_unscoped, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::is_unscoped>,
    ::fatal::pair<MyForwardRefEnum, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyForwardRefEnum>,
    ::fatal::pair<MyEnumA, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyEnumA>
  >,
  // unions
  ::fatal::list<
    ::fatal::pair<NoExceptMoveUnion, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoExceptMoveUnion>
  >,
  // structs
  ::fatal::list<
    ::fatal::pair<decorated_struct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::decorated_struct>,
    ::fatal::pair<ContainerStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ContainerStruct>,
    ::fatal::pair<CppTypeStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::CppTypeStruct>,
    ::fatal::pair<VirtualStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::VirtualStruct>,
    ::fatal::pair<MyStructWithForwardRefEnum, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyStructWithForwardRefEnum>,
    ::fatal::pair<TrivialNumeric, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::TrivialNumeric>,
    ::fatal::pair<TrivialNestedWithDefault, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::TrivialNestedWithDefault>,
    ::fatal::pair<ComplexString, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ComplexString>,
    ::fatal::pair<ComplexNestedWithDefault, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ComplexNestedWithDefault>,
    ::fatal::pair<MinPadding, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MinPadding>,
    ::fatal::pair<MyStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyStruct>,
    ::fatal::pair<MyDataItem, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::MyDataItem>,
    ::fatal::pair<Renaming, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::Renaming>,
    ::fatal::pair<AnnotatedTypes, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AnnotatedTypes>,
    ::fatal::pair<ForwardUsageRoot, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageRoot>,
    ::fatal::pair<ForwardUsageStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageStruct>,
    ::fatal::pair<ForwardUsageByRef, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::ForwardUsageByRef>,
    ::fatal::pair<NoexceptMoveEmpty, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveEmpty>,
    ::fatal::pair<NoexceptMoveSimpleStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveSimpleStruct>,
    ::fatal::pair<NoexceptMoveComplexStruct, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::NoexceptMoveComplexStruct>,
    ::fatal::pair<AllocatorAware, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AllocatorAware>,
    ::fatal::pair<AllocatorAware2, thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::AllocatorAware2>
  >,
  // constants
  ::fatal::list<
  >,
  // services
  ::fatal::list<
    thrift_fatal_impl_detail::apache_thrift_fixtures_types_module__unique_strings_list::SomeService
  >
);

}}}} // apache::thrift::fixtures::types
#include "thrift/compiler/test/fixtures/types/gen-cpp2/module_fatal_types.h"
