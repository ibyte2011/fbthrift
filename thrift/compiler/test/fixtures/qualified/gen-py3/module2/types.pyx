#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport module0.types as _module0_types
import module0.types as _module0_types
cimport module1.types as _module1_types
import module1.types as _module1_types

cimport module2.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class Struct(thrift.py3.types.Struct):

    def __init__(
        Struct self, *,
        _module0_types.Struct first=None,
        _module1_types.Struct second=None
    ):
        self._cpp_obj = __fbthrift_move(Struct._make_instance(
          NULL,
          NULL,
          first,
          second,
        ))

    def __call__(
        Struct self,
        first=__NOTSET,
        second=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if first is ___NOTSET:
            __isNOTSET[0] = True
            first = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if second is ___NOTSET:
            __isNOTSET[1] = True
            second = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if first is not None:
            if not isinstance(first, _module0_types.Struct):
                raise TypeError(f'first is not a { _module0_types.Struct !r}.')

        if second is not None:
            if not isinstance(second, _module1_types.Struct):
                raise TypeError(f'second is not a { _module1_types.Struct !r}.')

        __fbthrift_inst = <Struct>Struct.__new__(Struct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Struct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          first,
          second,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStruct] _make_instance(
        cStruct* base_instance,
        bint* __isNOTSET,
        _module0_types.Struct first ,
        _module1_types.Struct second 
    ) except *:
        cdef unique_ptr[cStruct] c_inst
        if base_instance:
            c_inst = make_unique[cStruct](deref(base_instance))
        else:
            c_inst = make_unique[cStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and first is None:
                deref(c_inst).first_ref().assign(default_inst[cStruct]().first_ref().value())
                deref(c_inst).__isset.first = False
                pass

            if not __isNOTSET[1] and second is None:
                deref(c_inst).second_ref().assign(default_inst[cStruct]().second_ref().value())
                deref(c_inst).__isset.second = False
                pass

        if first is not None:
            deref(c_inst).first_ref().assign(deref((<_module0_types.Struct?> first)._cpp_obj))
            deref(c_inst).__isset.first = True
        if second is not None:
            deref(c_inst).second_ref().assign(deref((<_module1_types.Struct?> second)._cpp_obj))
            deref(c_inst).__isset.second = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Struct", {
          "first": cpp_obj.first_ref().has_value(),
          "second": cpp_obj.second_ref().has_value(),
        })

    def __iter__(self):
        yield 'first', self.first
        yield 'second', self.second

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cStruct] cpp_obj):
        __fbthrift_inst = <Struct>Struct.__new__(Struct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def first(self):

        if self.__field_first is None:
            self.__field_first = _module0_types.Struct.create(reference_shared_ptr_first(self._cpp_obj, deref(self._cpp_obj).first_ref().value()))
        return self.__field_first

    @property
    def second(self):

        if self.__field_second is None:
            self.__field_second = _module1_types.Struct.create(reference_shared_ptr_second(self._cpp_obj, deref(self._cpp_obj).second_ref().value()))
        return self.__field_second


    def __hash__(Struct self):
        if not self.__hash:
            self.__hash = hash((
            self.first,
            self.second,
            ))
        return self.__hash

    def __repr__(Struct self):
        return f'Struct(first={repr(self.first)}, second={repr(self.second)})'
    def __copy__(Struct self):
        cdef shared_ptr[cStruct] cpp_obj = make_shared[cStruct](
            deref(self._cpp_obj)
        )
        return Struct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Struct) and
                isinstance(other, Struct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStruct* cself = (<Struct>self)._cpp_obj.get()
        cdef cStruct* cother = (<Struct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Struct()

    cdef __iobuf.IOBuf _serialize(Struct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Struct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStruct]()
        needed = serializer.cdeserialize[cStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Struct, serialize(self)))


@__cython.auto_pickle(False)
cdef class BigStruct(thrift.py3.types.Struct):

    def __init__(
        BigStruct self, *,
        Struct s=None,
        id=None
    ):
        if id is not None:
            if not isinstance(id, int):
                raise TypeError(f'id is not a { int !r}.')
            id = <cint32_t> id

        self._cpp_obj = __fbthrift_move(BigStruct._make_instance(
          NULL,
          NULL,
          s,
          id,
        ))

    def __call__(
        BigStruct self,
        s=__NOTSET,
        id=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if s is ___NOTSET:
            __isNOTSET[0] = True
            s = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if id is ___NOTSET:
            __isNOTSET[1] = True
            id = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if s is not None:
            if not isinstance(s, Struct):
                raise TypeError(f's is not a { Struct !r}.')

        if id is not None:
            if not isinstance(id, int):
                raise TypeError(f'id is not a { int !r}.')
            id = <cint32_t> id

        __fbthrift_inst = <BigStruct>BigStruct.__new__(BigStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(BigStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          s,
          id,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cBigStruct] _make_instance(
        cBigStruct* base_instance,
        bint* __isNOTSET,
        Struct s ,
        object id 
    ) except *:
        cdef unique_ptr[cBigStruct] c_inst
        if base_instance:
            c_inst = make_unique[cBigStruct](deref(base_instance))
        else:
            c_inst = make_unique[cBigStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and s is None:
                deref(c_inst).s_ref().assign(default_inst[cBigStruct]().s_ref().value())
                deref(c_inst).__isset.s = False
                pass

            if not __isNOTSET[1] and id is None:
                deref(c_inst).id_ref().assign(default_inst[cBigStruct]().id_ref().value())
                deref(c_inst).__isset.id = False
                pass

        if s is not None:
            deref(c_inst).s_ref().assign(deref((<Struct?> s)._cpp_obj))
            deref(c_inst).__isset.s = True
        if id is not None:
            deref(c_inst).id_ref().assign(id)
            deref(c_inst).__isset.id = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("BigStruct", {
          "s": cpp_obj.s_ref().has_value(),
          "id": cpp_obj.id_ref().has_value(),
        })

    def __iter__(self):
        yield 's', self.s
        yield 'id', self.id

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cBigStruct] cpp_obj):
        __fbthrift_inst = <BigStruct>BigStruct.__new__(BigStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def s(self):

        if self.__field_s is None:
            self.__field_s = Struct.create(reference_shared_ptr_s(self._cpp_obj, deref(self._cpp_obj).s_ref().value()))
        return self.__field_s

    @property
    def id(self):

        return deref(self._cpp_obj).id_ref().value()


    def __hash__(BigStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.s,
            self.id,
            ))
        return self.__hash

    def __repr__(BigStruct self):
        return f'BigStruct(s={repr(self.s)}, id={repr(self.id)})'
    def __copy__(BigStruct self):
        cdef shared_ptr[cBigStruct] cpp_obj = make_shared[cBigStruct](
            deref(self._cpp_obj)
        )
        return BigStruct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, BigStruct) and
                isinstance(other, BigStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cBigStruct* cself = (<BigStruct>self)._cpp_obj.get()
        cdef cBigStruct* cother = (<BigStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__BigStruct()

    cdef __iobuf.IOBuf _serialize(BigStruct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cBigStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(BigStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cBigStruct]()
        needed = serializer.cdeserialize[cBigStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (BigStruct, serialize(self)))


c2 = Struct.create(constant_shared_ptr(cc2()))
c3 = Struct.create(constant_shared_ptr(cc3()))
c4 = Struct.create(constant_shared_ptr(cc4()))
