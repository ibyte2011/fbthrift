#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

cimport cython
from cpython.version cimport PY_VERSION_HEX
from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
)
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport (
    cTApplicationException,
    ApplicationError as __ApplicationError,
    cTApplicationExceptionType__UNKNOWN)
from thrift.py3.server cimport ServiceInterface, RequestContext, Cpp2RequestContext
from thrift.py3.server import RequestContext, pass_context
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit
)
from thrift.py3.types cimport move

if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
    from thrift.py3.server cimport THRIFT_REQUEST_CONTEXT as __THRIFT_REQUEST_CONTEXT

cimport folly.futures
from folly.executor cimport get_executor
cimport folly.iobuf as __iobuf
import folly.iobuf as __iobuf
from folly.iobuf cimport move as move_iobuf

cimport module.types as _module_types
import module.types as _module_types

cimport module.services_reflection as _services_reflection

import asyncio
import functools
import sys
import traceback
import types as _py_types

from module.services_wrapper cimport cSinkServiceInterface


cdef extern from "<utility>" namespace "std":
    cdef cFollyPromise[] move_promise_ "std::move"(
        cFollyPromise[])

@cython.auto_pickle(False)
cdef class Promise_:
    cdef cFollyPromise[] cPromise

    @staticmethod
    cdef create(cFollyPromise[] cPromise):
        inst = <Promise_>Promise_.__new__(Promise_)
        inst.cPromise = move_promise_(cPromise)
        return inst

cdef object _SinkService_annotations = _py_types.MappingProxyType({
})


@cython.auto_pickle(False)
cdef class SinkServiceInterface(
    ServiceInterface
):
    annotations = _SinkService_annotations

    def __cinit__(self):
        self._cpp_obj = cSinkServiceInterface(
            <PyObject *> self,
            get_executor()
        )

    @classmethod
    def __get_reflection__(cls):
        return _services_reflection.get_reflection__SinkService(for_clients=False)



cdef api void call_cy_SinkService_method(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_method_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_method_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.method, "pass_context", False):
            result = await self.method(ctx,)
        else:
            result = await self.method()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler method:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

cdef api void call_cy_SinkService_methodAndReponse(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_methodAndReponse_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_methodAndReponse_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.methodAndReponse, "pass_context", False):
            result = await self.methodAndReponse(ctx,)
        else:
            result = await self.methodAndReponse()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler methodAndReponse:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

cdef api void call_cy_SinkService_methodThrow(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_methodThrow_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_methodThrow_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.methodThrow, "pass_context", False):
            result = await self.methodThrow(ctx,)
        else:
            result = await self.methodThrow()
    except _module_types.InitialException as ex:
        promise.cPromise.setException(deref((<_module_types.InitialException> ex)._cpp_obj))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler methodThrow:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

cdef api void call_cy_SinkService_methodSinkThrow(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_methodSinkThrow_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_methodSinkThrow_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.methodSinkThrow, "pass_context", False):
            result = await self.methodSinkThrow(ctx,)
        else:
            result = await self.methodSinkThrow()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler methodSinkThrow:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

cdef api void call_cy_SinkService_methodFinalThrow(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_methodFinalThrow_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_methodFinalThrow_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.methodFinalThrow, "pass_context", False):
            result = await self.methodFinalThrow(ctx,)
        else:
            result = await self.methodFinalThrow()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler methodFinalThrow:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

cdef api void call_cy_SinkService_methodBothThrow(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[] cPromise
):
    __promise = Promise_.create(move_promise_(cPromise))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        SinkService_methodBothThrow_coro(
            self,
            __context,
            __promise
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def SinkService_methodBothThrow_coro(
    object self,
    object ctx,
    Promise_ promise
):
    try:
        if ctx and getattr(self.methodBothThrow, "pass_context", False):
            result = await self.methodBothThrow(ctx,)
        else:
            result = await self.methodBothThrow()
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler methodBothThrow:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue()

