#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport module.types as _module_types
import module.types as _module_types

cimport matching_struct_names.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):

    def __init__(
        MyStruct self, *,
        str field=None
    ):
        self._cpp_obj = __fbthrift_move(MyStruct._make_instance(
          NULL,
          NULL,
          field,
        ))

    def __call__(
        MyStruct self,
        field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if field is ___NOTSET:
            __isNOTSET[0] = True
            field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if field is not None:
            if not isinstance(field, str):
                raise TypeError(f'field is not a { str !r}.')

        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(MyStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        str field 
    ) except *:
        cdef unique_ptr[cMyStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and field is None:
                deref(c_inst).field_ref().assign(default_inst[cMyStruct]().field_ref().value())
                deref(c_inst).__isset.field = False
                pass

        if field is not None:
            deref(c_inst).field_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(field.encode('utf-8'))))
            deref(c_inst).__isset.field = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("MyStruct", {
          "field": cpp_obj.field_ref().has_value(),
        })

    def __iter__(self):
        yield 'field', self.field

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def field(self):

        return (<bytes>deref(self._cpp_obj).field_ref().value()).decode('UTF-8')


    def __hash__(MyStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.field,
            ))
        return self.__hash

    def __repr__(MyStruct self):
        return f'MyStruct(field={repr(self.field)})'
    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, MyStruct) and
                isinstance(other, MyStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cMyStruct* cself = (<MyStruct>self)._cpp_obj.get()
        cdef cMyStruct* cother = (<MyStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    cdef __iobuf.IOBuf _serialize(MyStruct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(MyStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (MyStruct, serialize(self)))


@__cython.auto_pickle(False)
cdef class Combo(thrift.py3.types.Struct):

    def __init__(
        Combo self, *,
        listOfOurMyStructLists=None,
        theirMyStructList=None,
        ourMyStructList=None,
        listOfTheirMyStructList=None
    ):
        self._cpp_obj = __fbthrift_move(Combo._make_instance(
          NULL,
          NULL,
          listOfOurMyStructLists,
          theirMyStructList,
          ourMyStructList,
          listOfTheirMyStructList,
        ))

    def __call__(
        Combo self,
        listOfOurMyStructLists=__NOTSET,
        theirMyStructList=__NOTSET,
        ourMyStructList=__NOTSET,
        listOfTheirMyStructList=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[4] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if listOfOurMyStructLists is ___NOTSET:
            __isNOTSET[0] = True
            listOfOurMyStructLists = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if theirMyStructList is ___NOTSET:
            __isNOTSET[1] = True
            theirMyStructList = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if ourMyStructList is ___NOTSET:
            __isNOTSET[2] = True
            ourMyStructList = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if listOfTheirMyStructList is ___NOTSET:
            __isNOTSET[3] = True
            listOfTheirMyStructList = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <Combo>Combo.__new__(Combo)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Combo._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          listOfOurMyStructLists,
          theirMyStructList,
          ourMyStructList,
          listOfTheirMyStructList,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cCombo] _make_instance(
        cCombo* base_instance,
        bint* __isNOTSET,
        object listOfOurMyStructLists ,
        object theirMyStructList ,
        object ourMyStructList ,
        object listOfTheirMyStructList 
    ) except *:
        cdef unique_ptr[cCombo] c_inst
        if base_instance:
            c_inst = make_unique[cCombo](deref(base_instance))
        else:
            c_inst = make_unique[cCombo]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and listOfOurMyStructLists is None:
                deref(c_inst).listOfOurMyStructLists_ref().assign(default_inst[cCombo]().listOfOurMyStructLists_ref().value())
                deref(c_inst).__isset.listOfOurMyStructLists = False
                pass

            if not __isNOTSET[1] and theirMyStructList is None:
                deref(c_inst).theirMyStructList_ref().assign(default_inst[cCombo]().theirMyStructList_ref().value())
                deref(c_inst).__isset.theirMyStructList = False
                pass

            if not __isNOTSET[2] and ourMyStructList is None:
                deref(c_inst).ourMyStructList_ref().assign(default_inst[cCombo]().ourMyStructList_ref().value())
                deref(c_inst).__isset.ourMyStructList = False
                pass

            if not __isNOTSET[3] and listOfTheirMyStructList is None:
                deref(c_inst).listOfTheirMyStructList_ref().assign(default_inst[cCombo]().listOfTheirMyStructList_ref().value())
                deref(c_inst).__isset.listOfTheirMyStructList = False
                pass

        if listOfOurMyStructLists is not None:
            deref(c_inst).listOfOurMyStructLists_ref().assign(deref(List__List__MyStruct(listOfOurMyStructLists)._cpp_obj))
            deref(c_inst).__isset.listOfOurMyStructLists = True
        if theirMyStructList is not None:
            deref(c_inst).theirMyStructList_ref().assign(deref(List__module_MyStruct(theirMyStructList)._cpp_obj))
            deref(c_inst).__isset.theirMyStructList = True
        if ourMyStructList is not None:
            deref(c_inst).ourMyStructList_ref().assign(deref(List__MyStruct(ourMyStructList)._cpp_obj))
            deref(c_inst).__isset.ourMyStructList = True
        if listOfTheirMyStructList is not None:
            deref(c_inst).listOfTheirMyStructList_ref().assign(deref(List__List__module_MyStruct(listOfTheirMyStructList)._cpp_obj))
            deref(c_inst).__isset.listOfTheirMyStructList = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Combo", {
          "listOfOurMyStructLists": cpp_obj.listOfOurMyStructLists_ref().has_value(),
          "theirMyStructList": cpp_obj.theirMyStructList_ref().has_value(),
          "ourMyStructList": cpp_obj.ourMyStructList_ref().has_value(),
          "listOfTheirMyStructList": cpp_obj.listOfTheirMyStructList_ref().has_value(),
        })

    def __iter__(self):
        yield 'listOfOurMyStructLists', self.listOfOurMyStructLists
        yield 'theirMyStructList', self.theirMyStructList
        yield 'ourMyStructList', self.ourMyStructList
        yield 'listOfTheirMyStructList', self.listOfTheirMyStructList

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cCombo] cpp_obj):
        __fbthrift_inst = <Combo>Combo.__new__(Combo)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def listOfOurMyStructLists(self):

        if self.__field_listOfOurMyStructLists is None:
            self.__field_listOfOurMyStructLists = List__List__MyStruct.create(reference_shared_ptr_listOfOurMyStructLists(self._cpp_obj, deref(self._cpp_obj).listOfOurMyStructLists_ref().value()))
        return self.__field_listOfOurMyStructLists

    @property
    def theirMyStructList(self):

        if self.__field_theirMyStructList is None:
            self.__field_theirMyStructList = List__module_MyStruct.create(reference_shared_ptr_theirMyStructList(self._cpp_obj, deref(self._cpp_obj).theirMyStructList_ref().value()))
        return self.__field_theirMyStructList

    @property
    def ourMyStructList(self):

        if self.__field_ourMyStructList is None:
            self.__field_ourMyStructList = List__MyStruct.create(reference_shared_ptr_ourMyStructList(self._cpp_obj, deref(self._cpp_obj).ourMyStructList_ref().value()))
        return self.__field_ourMyStructList

    @property
    def listOfTheirMyStructList(self):

        if self.__field_listOfTheirMyStructList is None:
            self.__field_listOfTheirMyStructList = List__List__module_MyStruct.create(reference_shared_ptr_listOfTheirMyStructList(self._cpp_obj, deref(self._cpp_obj).listOfTheirMyStructList_ref().value()))
        return self.__field_listOfTheirMyStructList


    def __hash__(Combo self):
        if not self.__hash:
            self.__hash = hash((
            self.listOfOurMyStructLists,
            self.theirMyStructList,
            self.ourMyStructList,
            self.listOfTheirMyStructList,
            ))
        return self.__hash

    def __repr__(Combo self):
        return f'Combo(listOfOurMyStructLists={repr(self.listOfOurMyStructLists)}, theirMyStructList={repr(self.theirMyStructList)}, ourMyStructList={repr(self.ourMyStructList)}, listOfTheirMyStructList={repr(self.listOfTheirMyStructList)})'
    def __copy__(Combo self):
        cdef shared_ptr[cCombo] cpp_obj = make_shared[cCombo](
            deref(self._cpp_obj)
        )
        return Combo.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Combo) and
                isinstance(other, Combo)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cCombo* cself = (<Combo>self)._cpp_obj.get()
        cdef cCombo* cother = (<Combo>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Combo()

    cdef __iobuf.IOBuf _serialize(Combo self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cCombo](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Combo self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cCombo]()
        needed = serializer.cdeserialize[cCombo](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Combo, serialize(self)))


@__cython.auto_pickle(False)
cdef class List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__MyStruct):
            self._cpp_obj = (<List__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cMyStruct]] c_items):
        __fbthrift_inst = <List__MyStruct>List__MyStruct.__new__(List__MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__MyStruct self):
        cdef shared_ptr[vector[cMyStruct]] cpp_obj = make_shared[vector[cMyStruct]](
            deref(self._cpp_obj)
        )
        return List__MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cMyStruct]] c_inst = make_shared[vector[cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, MyStruct):
                    raise TypeError(f"{item!r} is not of type 'MyStruct'")
                deref(c_inst).push_back(deref((<MyStruct>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cMyStruct]] c_inst
        cdef shared_ptr[cMyStruct] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cMyStruct]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__MyStruct.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__MyStruct(self._cpp_obj, deref(self._cpp_obj)[index])
            return MyStruct.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, MyStruct):
            return False
        return std_libcpp.find[vector[cMyStruct].iterator, cMyStruct](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<MyStruct>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cMyStruct] citem
        cdef vector[cMyStruct].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__MyStruct(self._cpp_obj, deref(loc))
            yield MyStruct.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cMyStruct] citem
        cdef vector[cMyStruct].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__MyStruct(self._cpp_obj, deref(loc))
            yield MyStruct.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, MyStruct):
            raise err
        cdef vector[cMyStruct].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cMyStruct].iterator loc = std_libcpp.find[vector[cMyStruct].iterator, cMyStruct](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<MyStruct>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, MyStruct):
            return 0
        return <cint64_t> std_libcpp.count[vector[cMyStruct].iterator, cMyStruct](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<MyStruct>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__MyStruct()


Sequence.register(List__MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__MyStruct):
            self._cpp_obj = (<List__List__MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[cMyStruct]]] c_items):
        __fbthrift_inst = <List__List__MyStruct>List__List__MyStruct.__new__(List__List__MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__List__MyStruct self):
        cdef shared_ptr[vector[vector[cMyStruct]]] cpp_obj = make_shared[vector[vector[cMyStruct]]](
            deref(self._cpp_obj)
        )
        return List__List__MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[cMyStruct]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[cMyStruct]]] c_inst = make_shared[vector[vector[cMyStruct]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence['MyStruct']")
                if not isinstance(item, List__MyStruct):
                    item = List__MyStruct(item)
                deref(c_inst).push_back(deref((<List__MyStruct>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[vector[cMyStruct]]] c_inst
        cdef shared_ptr[vector[cMyStruct]] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[vector[cMyStruct]]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__List__MyStruct.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__List__MyStruct(self._cpp_obj, deref(self._cpp_obj)[index])
            return List__MyStruct.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__MyStruct):
                item = List__MyStruct(item)
        except Exception:
            return False
        if not isinstance(item, List__MyStruct):
            return False
        return std_libcpp.find[vector[vector[cMyStruct]].iterator, vector[cMyStruct]](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__MyStruct>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[vector[cMyStruct]] citem
        cdef vector[vector[cMyStruct]].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__List__MyStruct(self._cpp_obj, deref(loc))
            yield List__MyStruct.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[vector[cMyStruct]] citem
        cdef vector[vector[cMyStruct]].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__List__MyStruct(self._cpp_obj, deref(loc))
            yield List__MyStruct.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        try:
            if not isinstance(item, List__MyStruct):
                item = List__MyStruct(item)
        except Exception:
            raise err from None
        if not isinstance(item, List__MyStruct):
            raise err
        cdef vector[vector[cMyStruct]].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[vector[cMyStruct]].iterator loc = std_libcpp.find[vector[vector[cMyStruct]].iterator, vector[cMyStruct]](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<List__MyStruct>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        try:
            if not isinstance(item, List__MyStruct):
                item = List__MyStruct(item)
        except Exception:
            return 0
        if not isinstance(item, List__MyStruct):
            return 0
        return <cint64_t> std_libcpp.count[vector[vector[cMyStruct]].iterator, vector[cMyStruct]](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__MyStruct>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__MyStruct()


Sequence.register(List__List__MyStruct)

@__cython.auto_pickle(False)
cdef class List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__module_MyStruct):
            self._cpp_obj = (<List__module_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__module_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[_module_types.cMyStruct]] c_items):
        __fbthrift_inst = <List__module_MyStruct>List__module_MyStruct.__new__(List__module_MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__module_MyStruct self):
        cdef shared_ptr[vector[_module_types.cMyStruct]] cpp_obj = make_shared[vector[_module_types.cMyStruct]](
            deref(self._cpp_obj)
        )
        return List__module_MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[_module_types.cMyStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[_module_types.cMyStruct]] c_inst = make_shared[vector[_module_types.cMyStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, _module_types.MyStruct):
                    raise TypeError(f"{item!r} is not of type _module_types.MyStruct")
                deref(c_inst).push_back(deref((<_module_types.MyStruct>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[_module_types.cMyStruct]] c_inst
        cdef shared_ptr[_module_types.cMyStruct] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[_module_types.cMyStruct]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__module_MyStruct.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__module_MyStruct(self._cpp_obj, deref(self._cpp_obj)[index])
            return _module_types.MyStruct.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, _module_types.MyStruct):
            return False
        return std_libcpp.find[vector[_module_types.cMyStruct].iterator, _module_types.cMyStruct](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<_module_types.MyStruct>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[_module_types.cMyStruct] citem
        cdef vector[_module_types.cMyStruct].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__module_MyStruct(self._cpp_obj, deref(loc))
            yield _module_types.MyStruct.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[_module_types.cMyStruct] citem
        cdef vector[_module_types.cMyStruct].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__module_MyStruct(self._cpp_obj, deref(loc))
            yield _module_types.MyStruct.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, _module_types.MyStruct):
            raise err
        cdef vector[_module_types.cMyStruct].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[_module_types.cMyStruct].iterator loc = std_libcpp.find[vector[_module_types.cMyStruct].iterator, _module_types.cMyStruct](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<_module_types.MyStruct>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, _module_types.MyStruct):
            return 0
        return <cint64_t> std_libcpp.count[vector[_module_types.cMyStruct].iterator, _module_types.cMyStruct](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<_module_types.MyStruct>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__module_MyStruct()


Sequence.register(List__module_MyStruct)

@__cython.auto_pickle(False)
cdef class List__List__module_MyStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__List__module_MyStruct):
            self._cpp_obj = (<List__List__module_MyStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__List__module_MyStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[vector[_module_types.cMyStruct]]] c_items):
        __fbthrift_inst = <List__List__module_MyStruct>List__List__module_MyStruct.__new__(List__List__module_MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__List__module_MyStruct self):
        cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] cpp_obj = make_shared[vector[vector[_module_types.cMyStruct]]](
            deref(self._cpp_obj)
        )
        return List__List__module_MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] c_inst = make_shared[vector[vector[_module_types.cMyStruct]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Sequence[_module_types.MyStruct]")
                if not isinstance(item, List__module_MyStruct):
                    item = List__module_MyStruct(item)
                deref(c_inst).push_back(deref((<List__module_MyStruct>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[vector[_module_types.cMyStruct]]] c_inst
        cdef shared_ptr[vector[_module_types.cMyStruct]] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[vector[_module_types.cMyStruct]]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__List__module_MyStruct.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__List__module_MyStruct(self._cpp_obj, deref(self._cpp_obj)[index])
            return List__module_MyStruct.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, List__module_MyStruct):
                item = List__module_MyStruct(item)
        except Exception:
            return False
        if not isinstance(item, List__module_MyStruct):
            return False
        return std_libcpp.find[vector[vector[_module_types.cMyStruct]].iterator, vector[_module_types.cMyStruct]](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__module_MyStruct>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[vector[_module_types.cMyStruct]] citem
        cdef vector[vector[_module_types.cMyStruct]].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__List__module_MyStruct(self._cpp_obj, deref(loc))
            yield List__module_MyStruct.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[vector[_module_types.cMyStruct]] citem
        cdef vector[vector[_module_types.cMyStruct]].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__List__module_MyStruct(self._cpp_obj, deref(loc))
            yield List__module_MyStruct.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        try:
            if not isinstance(item, List__module_MyStruct):
                item = List__module_MyStruct(item)
        except Exception:
            raise err from None
        if not isinstance(item, List__module_MyStruct):
            raise err
        cdef vector[vector[_module_types.cMyStruct]].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[vector[_module_types.cMyStruct]].iterator loc = std_libcpp.find[vector[vector[_module_types.cMyStruct]].iterator, vector[_module_types.cMyStruct]](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<List__module_MyStruct>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        try:
            if not isinstance(item, List__module_MyStruct):
                item = List__module_MyStruct(item)
        except Exception:
            return 0
        if not isinstance(item, List__module_MyStruct):
            return 0
        return <cint64_t> std_libcpp.count[vector[vector[_module_types.cMyStruct]].iterator, vector[_module_types.cMyStruct]](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<List__module_MyStruct>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__List__module_MyStruct()


Sequence.register(List__List__module_MyStruct)

