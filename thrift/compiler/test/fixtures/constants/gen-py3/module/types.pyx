#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins

cimport module.types_reflection as _types_reflection


cdef __EnumData __EmptyEnum_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cEmptyEnum](), EmptyEnum)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __EmptyEnumMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __EmptyEnum_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __EmptyEnum_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __EmptyEnum_enum_data.get_all_names()

    def __len__(cls):
        return __EmptyEnum_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class EmptyEnum(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __EmptyEnum_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> EmptyEnum, <PyTypeObject*> __EmptyEnumMeta)


cdef __EnumData __City_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cCity](), City)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __CityMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __City_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __City_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __City_enum_data.get_all_names()

    def __len__(cls):
        return __City_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class City(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __City_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> City, <PyTypeObject*> __CityMeta)


cdef __EnumData __Company_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cCompany](), Company)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __CompanyMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __Company_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __Company_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __Company_enum_data.get_all_names()

    def __len__(cls):
        return __Company_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class Company(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __Company_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> Company, <PyTypeObject*> __CompanyMeta)



cdef __UnionTypeEnumData __union1_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cunion1](),
    __union1Type,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __union1_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __union1_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __union1_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __union1_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __union1_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __union1Type(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __union1_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __union1Type, <PyTypeObject*> __union1_Union_TypeMeta)


cdef __UnionTypeEnumData __union2_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cunion2](),
    __union2Type,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __union2_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __union2_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __union2_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __union2_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __union2_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __union2Type(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __union2_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __union2Type, <PyTypeObject*> __union2_Union_TypeMeta)


@__cython.auto_pickle(False)
cdef class Internship(thrift.py3.types.Struct):

    def __init__(
        Internship self, *,
        weeks=None,
        str title=None,
        Company employer=None
    ):
        if weeks is not None:
            if not isinstance(weeks, int):
                raise TypeError(f'weeks is not a { int !r}.')
            weeks = <cint32_t> weeks

        self._cpp_obj = __fbthrift_move(Internship._make_instance(
          NULL,
          NULL,
          weeks,
          title,
          employer,
        ))

    def __call__(
        Internship self,
        weeks=__NOTSET,
        title=__NOTSET,
        employer=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if weeks is ___NOTSET:
            __isNOTSET[0] = True
            weeks = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if title is ___NOTSET:
            __isNOTSET[1] = True
            title = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if employer is ___NOTSET:
            __isNOTSET[2] = True
            employer = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if weeks is not None:
            if not isinstance(weeks, int):
                raise TypeError(f'weeks is not a { int !r}.')
            weeks = <cint32_t> weeks

        if title is not None:
            if not isinstance(title, str):
                raise TypeError(f'title is not a { str !r}.')

        if employer is not None:
            if not isinstance(employer, Company):
                raise TypeError(f'field employer value: { employer !r} is not of the enum type { Company }.')

        __fbthrift_inst = <Internship>Internship.__new__(Internship)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Internship._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          weeks,
          title,
          employer,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cInternship] _make_instance(
        cInternship* base_instance,
        bint* __isNOTSET,
        object weeks ,
        str title ,
        Company employer 
    ) except *:
        cdef unique_ptr[cInternship] c_inst
        if base_instance:
            c_inst = make_unique[cInternship](deref(base_instance))
        else:
            c_inst = make_unique[cInternship]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and weeks is None:
                deref(c_inst).weeks = default_inst[cInternship]().weeks
                pass

            if not __isNOTSET[1] and title is None:
                deref(c_inst).title_ref().assign(default_inst[cInternship]().title_ref().value())
                deref(c_inst).__isset.title = False
                pass

            if not __isNOTSET[2] and employer is None:
                deref(c_inst).__isset.employer = False
                pass

        if weeks is not None:
            deref(c_inst).weeks = weeks
        if title is not None:
            deref(c_inst).title_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(title.encode('utf-8'))))
            deref(c_inst).__isset.title = True
        if employer is not None:
            deref(c_inst).employer_ref().assign(<cCompany><int>employer)
            deref(c_inst).__isset.employer = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Internship", {
          "title": cpp_obj.title_ref().has_value(),
          "employer": cpp_obj.employer_ref().has_value(),
        })

    def __iter__(self):
        yield 'weeks', self.weeks
        yield 'title', self.title
        yield 'employer', self.employer

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cInternship] cpp_obj):
        __fbthrift_inst = <Internship>Internship.__new__(Internship)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def weeks(self):

        return deref(self._cpp_obj).weeks

    @property
    def title(self):

        return (<bytes>deref(self._cpp_obj).title_ref().value()).decode('UTF-8')

    @property
    def employer(self):
        if not deref(self._cpp_obj).__isset.employer:
            return None

        return translate_cpp_enum_to_python(Company, <int>(deref(self._cpp_obj).employer_ref().value_unchecked()))


    def __hash__(Internship self):
        if not self.__hash:
            self.__hash = hash((
            self.weeks,
            self.title,
            self.employer,
            ))
        return self.__hash

    def __repr__(Internship self):
        return f'Internship(weeks={repr(self.weeks)}, title={repr(self.title)}, employer={repr(self.employer)})'
    def __copy__(Internship self):
        cdef shared_ptr[cInternship] cpp_obj = make_shared[cInternship](
            deref(self._cpp_obj)
        )
        return Internship.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Internship) and
                isinstance(other, Internship)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cInternship* cself = (<Internship>self)._cpp_obj.get()
        cdef cInternship* cother = (<Internship>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Internship()

    cdef __iobuf.IOBuf _serialize(Internship self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cInternship](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Internship self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cInternship]()
        needed = serializer.cdeserialize[cInternship](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Internship, serialize(self)))


@__cython.auto_pickle(False)
cdef class Range(thrift.py3.types.Struct):

    def __init__(
        Range self, *,
        min=None,
        max=None
    ):
        if min is not None:
            if not isinstance(min, int):
                raise TypeError(f'min is not a { int !r}.')
            min = <cint32_t> min

        if max is not None:
            if not isinstance(max, int):
                raise TypeError(f'max is not a { int !r}.')
            max = <cint32_t> max

        self._cpp_obj = __fbthrift_move(Range._make_instance(
          NULL,
          NULL,
          min,
          max,
        ))

    def __call__(
        Range self,
        min=__NOTSET,
        max=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if min is ___NOTSET:
            __isNOTSET[0] = True
            min = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if max is ___NOTSET:
            __isNOTSET[1] = True
            max = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if min is not None:
            if not isinstance(min, int):
                raise TypeError(f'min is not a { int !r}.')
            min = <cint32_t> min

        if max is not None:
            if not isinstance(max, int):
                raise TypeError(f'max is not a { int !r}.')
            max = <cint32_t> max

        __fbthrift_inst = <Range>Range.__new__(Range)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Range._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          min,
          max,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cRange] _make_instance(
        cRange* base_instance,
        bint* __isNOTSET,
        object min ,
        object max 
    ) except *:
        cdef unique_ptr[cRange] c_inst
        if base_instance:
            c_inst = make_unique[cRange](deref(base_instance))
        else:
            c_inst = make_unique[cRange]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and min is None:
                deref(c_inst).min = default_inst[cRange]().min
                pass

            if not __isNOTSET[1] and max is None:
                deref(c_inst).max = default_inst[cRange]().max
                pass

        if min is not None:
            deref(c_inst).min = min
        if max is not None:
            deref(c_inst).max = max
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Range", {
        })

    def __iter__(self):
        yield 'min', self.min
        yield 'max', self.max

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cRange] cpp_obj):
        __fbthrift_inst = <Range>Range.__new__(Range)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def min(self):

        return deref(self._cpp_obj).min

    @property
    def max(self):

        return deref(self._cpp_obj).max


    def __hash__(Range self):
        if not self.__hash:
            self.__hash = hash((
            self.min,
            self.max,
            ))
        return self.__hash

    def __repr__(Range self):
        return f'Range(min={repr(self.min)}, max={repr(self.max)})'
    def __copy__(Range self):
        cdef shared_ptr[cRange] cpp_obj = make_shared[cRange](
            deref(self._cpp_obj)
        )
        return Range.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Range) and
                isinstance(other, Range)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cRange* cself = (<Range>self)._cpp_obj.get()
        cdef cRange* cother = (<Range>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Range()

    cdef __iobuf.IOBuf _serialize(Range self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cRange](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Range self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cRange]()
        needed = serializer.cdeserialize[cRange](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Range, serialize(self)))


@__cython.auto_pickle(False)
cdef class struct1(thrift.py3.types.Struct):

    def __init__(
        struct1 self, *,
        a=None,
        str b=None
    ):
        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        self._cpp_obj = __fbthrift_move(struct1._make_instance(
          NULL,
          NULL,
          a,
          b,
        ))

    def __call__(
        struct1 self,
        a=__NOTSET,
        b=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[2] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if a is ___NOTSET:
            __isNOTSET[0] = True
            a = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if b is ___NOTSET:
            __isNOTSET[1] = True
            b = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        if b is not None:
            if not isinstance(b, str):
                raise TypeError(f'b is not a { str !r}.')

        __fbthrift_inst = <struct1>struct1.__new__(struct1)
        __fbthrift_inst._cpp_obj = __fbthrift_move(struct1._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          a,
          b,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cstruct1] _make_instance(
        cstruct1* base_instance,
        bint* __isNOTSET,
        object a ,
        str b 
    ) except *:
        cdef unique_ptr[cstruct1] c_inst
        if base_instance:
            c_inst = make_unique[cstruct1](deref(base_instance))
        else:
            c_inst = make_unique[cstruct1]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and a is None:
                deref(c_inst).a_ref().assign(default_inst[cstruct1]().a_ref().value())
                deref(c_inst).__isset.a = False
                pass

            if not __isNOTSET[1] and b is None:
                deref(c_inst).b_ref().assign(default_inst[cstruct1]().b_ref().value())
                deref(c_inst).__isset.b = False
                pass

        if a is not None:
            deref(c_inst).a_ref().assign(a)
            deref(c_inst).__isset.a = True
        if b is not None:
            deref(c_inst).b_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(b.encode('utf-8'))))
            deref(c_inst).__isset.b = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("struct1", {
          "a": cpp_obj.a_ref().has_value(),
          "b": cpp_obj.b_ref().has_value(),
        })

    def __iter__(self):
        yield 'a', self.a
        yield 'b', self.b

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cstruct1] cpp_obj):
        __fbthrift_inst = <struct1>struct1.__new__(struct1)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def a(self):

        return deref(self._cpp_obj).a_ref().value()

    @property
    def b(self):

        return (<bytes>deref(self._cpp_obj).b_ref().value()).decode('UTF-8')


    def __hash__(struct1 self):
        if not self.__hash:
            self.__hash = hash((
            self.a,
            self.b,
            ))
        return self.__hash

    def __repr__(struct1 self):
        return f'struct1(a={repr(self.a)}, b={repr(self.b)})'
    def __copy__(struct1 self):
        cdef shared_ptr[cstruct1] cpp_obj = make_shared[cstruct1](
            deref(self._cpp_obj)
        )
        return struct1.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, struct1) and
                isinstance(other, struct1)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cstruct1* cself = (<struct1>self)._cpp_obj.get()
        cdef cstruct1* cother = (<struct1>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__struct1()

    cdef __iobuf.IOBuf _serialize(struct1 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cstruct1](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(struct1 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cstruct1]()
        needed = serializer.cdeserialize[cstruct1](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (struct1, serialize(self)))


@__cython.auto_pickle(False)
cdef class struct2(thrift.py3.types.Struct):

    def __init__(
        struct2 self, *,
        a=None,
        str b=None,
        struct1 c=None,
        d=None
    ):
        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        self._cpp_obj = __fbthrift_move(struct2._make_instance(
          NULL,
          NULL,
          a,
          b,
          c,
          d,
        ))

    def __call__(
        struct2 self,
        a=__NOTSET,
        b=__NOTSET,
        c=__NOTSET,
        d=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[4] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if a is ___NOTSET:
            __isNOTSET[0] = True
            a = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if b is ___NOTSET:
            __isNOTSET[1] = True
            b = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if c is ___NOTSET:
            __isNOTSET[2] = True
            c = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if d is ___NOTSET:
            __isNOTSET[3] = True
            d = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        if b is not None:
            if not isinstance(b, str):
                raise TypeError(f'b is not a { str !r}.')

        if c is not None:
            if not isinstance(c, struct1):
                raise TypeError(f'c is not a { struct1 !r}.')

        __fbthrift_inst = <struct2>struct2.__new__(struct2)
        __fbthrift_inst._cpp_obj = __fbthrift_move(struct2._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          a,
          b,
          c,
          d,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cstruct2] _make_instance(
        cstruct2* base_instance,
        bint* __isNOTSET,
        object a ,
        str b ,
        struct1 c ,
        object d 
    ) except *:
        cdef unique_ptr[cstruct2] c_inst
        if base_instance:
            c_inst = make_unique[cstruct2](deref(base_instance))
        else:
            c_inst = make_unique[cstruct2]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and a is None:
                deref(c_inst).a_ref().assign(default_inst[cstruct2]().a_ref().value())
                deref(c_inst).__isset.a = False
                pass

            if not __isNOTSET[1] and b is None:
                deref(c_inst).b_ref().assign(default_inst[cstruct2]().b_ref().value())
                deref(c_inst).__isset.b = False
                pass

            if not __isNOTSET[2] and c is None:
                deref(c_inst).c_ref().assign(default_inst[cstruct2]().c_ref().value())
                deref(c_inst).__isset.c = False
                pass

            if not __isNOTSET[3] and d is None:
                deref(c_inst).d_ref().assign(default_inst[cstruct2]().d_ref().value())
                deref(c_inst).__isset.d = False
                pass

        if a is not None:
            deref(c_inst).a_ref().assign(a)
            deref(c_inst).__isset.a = True
        if b is not None:
            deref(c_inst).b_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(b.encode('utf-8'))))
            deref(c_inst).__isset.b = True
        if c is not None:
            deref(c_inst).c_ref().assign(deref((<struct1?> c)._cpp_obj))
            deref(c_inst).__isset.c = True
        if d is not None:
            deref(c_inst).d_ref().assign(deref(List__i32(d)._cpp_obj))
            deref(c_inst).__isset.d = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("struct2", {
          "a": cpp_obj.a_ref().has_value(),
          "b": cpp_obj.b_ref().has_value(),
          "c": cpp_obj.c_ref().has_value(),
          "d": cpp_obj.d_ref().has_value(),
        })

    def __iter__(self):
        yield 'a', self.a
        yield 'b', self.b
        yield 'c', self.c
        yield 'd', self.d

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cstruct2] cpp_obj):
        __fbthrift_inst = <struct2>struct2.__new__(struct2)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def a(self):

        return deref(self._cpp_obj).a_ref().value()

    @property
    def b(self):

        return (<bytes>deref(self._cpp_obj).b_ref().value()).decode('UTF-8')

    @property
    def c(self):

        if self.__field_c is None:
            self.__field_c = struct1.create(reference_shared_ptr_c(self._cpp_obj, deref(self._cpp_obj).c_ref().value()))
        return self.__field_c

    @property
    def d(self):

        if self.__field_d is None:
            self.__field_d = List__i32.create(reference_shared_ptr_d(self._cpp_obj, deref(self._cpp_obj).d_ref().value()))
        return self.__field_d


    def __hash__(struct2 self):
        if not self.__hash:
            self.__hash = hash((
            self.a,
            self.b,
            self.c,
            self.d,
            ))
        return self.__hash

    def __repr__(struct2 self):
        return f'struct2(a={repr(self.a)}, b={repr(self.b)}, c={repr(self.c)}, d={repr(self.d)})'
    def __copy__(struct2 self):
        cdef shared_ptr[cstruct2] cpp_obj = make_shared[cstruct2](
            deref(self._cpp_obj)
        )
        return struct2.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, struct2) and
                isinstance(other, struct2)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cstruct2* cself = (<struct2>self)._cpp_obj.get()
        cdef cstruct2* cother = (<struct2>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__struct2()

    cdef __iobuf.IOBuf _serialize(struct2 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cstruct2](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(struct2 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cstruct2]()
        needed = serializer.cdeserialize[cstruct2](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (struct2, serialize(self)))


@__cython.auto_pickle(False)
cdef class struct3(thrift.py3.types.Struct):

    def __init__(
        struct3 self, *,
        str a=None,
        b=None,
        struct2 c=None
    ):
        if b is not None:
            if not isinstance(b, int):
                raise TypeError(f'b is not a { int !r}.')
            b = <cint32_t> b

        self._cpp_obj = __fbthrift_move(struct3._make_instance(
          NULL,
          NULL,
          a,
          b,
          c,
        ))

    def __call__(
        struct3 self,
        a=__NOTSET,
        b=__NOTSET,
        c=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if a is ___NOTSET:
            __isNOTSET[0] = True
            a = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if b is ___NOTSET:
            __isNOTSET[1] = True
            b = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if c is ___NOTSET:
            __isNOTSET[2] = True
            c = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if a is not None:
            if not isinstance(a, str):
                raise TypeError(f'a is not a { str !r}.')

        if b is not None:
            if not isinstance(b, int):
                raise TypeError(f'b is not a { int !r}.')
            b = <cint32_t> b

        if c is not None:
            if not isinstance(c, struct2):
                raise TypeError(f'c is not a { struct2 !r}.')

        __fbthrift_inst = <struct3>struct3.__new__(struct3)
        __fbthrift_inst._cpp_obj = __fbthrift_move(struct3._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          a,
          b,
          c,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cstruct3] _make_instance(
        cstruct3* base_instance,
        bint* __isNOTSET,
        str a ,
        object b ,
        struct2 c 
    ) except *:
        cdef unique_ptr[cstruct3] c_inst
        if base_instance:
            c_inst = make_unique[cstruct3](deref(base_instance))
        else:
            c_inst = make_unique[cstruct3]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and a is None:
                deref(c_inst).a_ref().assign(default_inst[cstruct3]().a_ref().value())
                deref(c_inst).__isset.a = False
                pass

            if not __isNOTSET[1] and b is None:
                deref(c_inst).b_ref().assign(default_inst[cstruct3]().b_ref().value())
                deref(c_inst).__isset.b = False
                pass

            if not __isNOTSET[2] and c is None:
                deref(c_inst).c_ref().assign(default_inst[cstruct3]().c_ref().value())
                deref(c_inst).__isset.c = False
                pass

        if a is not None:
            deref(c_inst).a_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(a.encode('utf-8'))))
            deref(c_inst).__isset.a = True
        if b is not None:
            deref(c_inst).b_ref().assign(b)
            deref(c_inst).__isset.b = True
        if c is not None:
            deref(c_inst).c_ref().assign(deref((<struct2?> c)._cpp_obj))
            deref(c_inst).__isset.c = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("struct3", {
          "a": cpp_obj.a_ref().has_value(),
          "b": cpp_obj.b_ref().has_value(),
          "c": cpp_obj.c_ref().has_value(),
        })

    def __iter__(self):
        yield 'a', self.a
        yield 'b', self.b
        yield 'c', self.c

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cstruct3] cpp_obj):
        __fbthrift_inst = <struct3>struct3.__new__(struct3)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def a(self):

        return (<bytes>deref(self._cpp_obj).a_ref().value()).decode('UTF-8')

    @property
    def b(self):

        return deref(self._cpp_obj).b_ref().value()

    @property
    def c(self):

        if self.__field_c is None:
            self.__field_c = struct2.create(reference_shared_ptr_c(self._cpp_obj, deref(self._cpp_obj).c_ref().value()))
        return self.__field_c


    def __hash__(struct3 self):
        if not self.__hash:
            self.__hash = hash((
            self.a,
            self.b,
            self.c,
            ))
        return self.__hash

    def __repr__(struct3 self):
        return f'struct3(a={repr(self.a)}, b={repr(self.b)}, c={repr(self.c)})'
    def __copy__(struct3 self):
        cdef shared_ptr[cstruct3] cpp_obj = make_shared[cstruct3](
            deref(self._cpp_obj)
        )
        return struct3.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, struct3) and
                isinstance(other, struct3)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cstruct3* cself = (<struct3>self)._cpp_obj.get()
        cdef cstruct3* cother = (<struct3>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__struct3()

    cdef __iobuf.IOBuf _serialize(struct3 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cstruct3](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(struct3 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cstruct3]()
        needed = serializer.cdeserialize[cstruct3](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (struct3, serialize(self)))


@__cython.auto_pickle(False)
cdef class struct4(thrift.py3.types.Struct):

    def __init__(
        struct4 self, *,
        a=None,
        b=None,
        c=None
    ):
        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        if b is not None:
            if not isinstance(b, (float, int)):
                raise TypeError(f'b is not a { float !r}.')

        if c is not None:
            if not isinstance(c, int):
                raise TypeError(f'c is not a { int !r}.')
            c = <cint8_t> c

        self._cpp_obj = __fbthrift_move(struct4._make_instance(
          NULL,
          NULL,
          a,
          b,
          c,
        ))

    def __call__(
        struct4 self,
        a=__NOTSET,
        b=__NOTSET,
        c=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if a is ___NOTSET:
            __isNOTSET[0] = True
            a = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if b is ___NOTSET:
            __isNOTSET[1] = True
            b = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if c is ___NOTSET:
            __isNOTSET[2] = True
            c = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if a is not None:
            if not isinstance(a, int):
                raise TypeError(f'a is not a { int !r}.')
            a = <cint32_t> a

        if b is not None:
            if not isinstance(b, (float, int)):
                raise TypeError(f'b is not a { float !r}.')

        if c is not None:
            if not isinstance(c, int):
                raise TypeError(f'c is not a { int !r}.')
            c = <cint8_t> c

        __fbthrift_inst = <struct4>struct4.__new__(struct4)
        __fbthrift_inst._cpp_obj = __fbthrift_move(struct4._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          a,
          b,
          c,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cstruct4] _make_instance(
        cstruct4* base_instance,
        bint* __isNOTSET,
        object a ,
        object b ,
        object c 
    ) except *:
        cdef unique_ptr[cstruct4] c_inst
        if base_instance:
            c_inst = make_unique[cstruct4](deref(base_instance))
        else:
            c_inst = make_unique[cstruct4]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and a is None:
                deref(c_inst).a_ref().assign(default_inst[cstruct4]().a_ref().value())
                deref(c_inst).__isset.a = False
                pass

            if not __isNOTSET[1] and b is None:
                deref(c_inst).__isset.b = False
                pass

            if not __isNOTSET[2] and c is None:
                deref(c_inst).__isset.c = False
                pass

        if a is not None:
            deref(c_inst).a_ref().assign(a)
            deref(c_inst).__isset.a = True
        if b is not None:
            deref(c_inst).b_ref().assign(b)
            deref(c_inst).__isset.b = True
        if c is not None:
            deref(c_inst).c_ref().assign(c)
            deref(c_inst).__isset.c = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("struct4", {
          "a": cpp_obj.a_ref().has_value(),
          "b": cpp_obj.b_ref().has_value(),
          "c": cpp_obj.c_ref().has_value(),
        })

    def __iter__(self):
        yield 'a', self.a
        yield 'b', self.b
        yield 'c', self.c

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cstruct4] cpp_obj):
        __fbthrift_inst = <struct4>struct4.__new__(struct4)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def a(self):

        return deref(self._cpp_obj).a_ref().value()

    @property
    def b(self):
        if not deref(self._cpp_obj).__isset.b:
            return None

        return deref(self._cpp_obj).b_ref().value_unchecked()

    @property
    def c(self):
        if not deref(self._cpp_obj).__isset.c:
            return None

        return deref(self._cpp_obj).c_ref().value_unchecked()


    def __hash__(struct4 self):
        if not self.__hash:
            self.__hash = hash((
            self.a,
            self.b,
            self.c,
            ))
        return self.__hash

    def __repr__(struct4 self):
        return f'struct4(a={repr(self.a)}, b={repr(self.b)}, c={repr(self.c)})'
    def __copy__(struct4 self):
        cdef shared_ptr[cstruct4] cpp_obj = make_shared[cstruct4](
            deref(self._cpp_obj)
        )
        return struct4.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, struct4) and
                isinstance(other, struct4)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cstruct4* cself = (<struct4>self)._cpp_obj.get()
        cdef cstruct4* cother = (<struct4>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__struct4()

    cdef __iobuf.IOBuf _serialize(struct4 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cstruct4](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(struct4 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cstruct4]()
        needed = serializer.cdeserialize[cstruct4](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (struct4, serialize(self)))




@__cython.auto_pickle(False)
cdef class union1(thrift.py3.types.Union):
    Type = __union1Type

    def __init__(
        self, *,
        i=None,
        d=None
    ):
        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')
            i = <cint32_t> i

        if d is not None:
            if not isinstance(d, (float, int)):
                raise TypeError(f'd is not a { float !r}.')

        self._cpp_obj = __fbthrift_move(union1._make_instance(
          NULL,
          i,
          d,
        ))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return union1()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return union1(i=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return union1(d=value)
                except OverflowError:
                    pass
        if isinstance(value, (float, int)):
            try:
                <double> value
                return union1(d=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cunion1] _make_instance(
        cunion1* base_instance,
        object i,
        object d
    ) except *:
        cdef unique_ptr[cunion1] c_inst = make_unique[cunion1]()
        cdef bint any_set = False
        if i is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i(i)
            any_set = True
        if d is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_d(d)
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    def __bool__(self):
        return self.type is not __union1Type.EMPTY

    @staticmethod
    cdef create(shared_ptr[cunion1] cpp_obj):
        __fbthrift_inst = <union1>union1.__new__(union1)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def i(self):
        if self.type.value != 1:
            raise TypeError(f'Union contains a value of type {self.type.name}, not i')
        return self.value

    @property
    def d(self):
        if self.type.value != 2:
            raise TypeError(f'Union contains a value of type {self.type.name}, not d')
        return self.value


    def __hash__(union1 self):
        if not self.__hash:
            self.__hash = hash((
                self.type,
                self.value,
            ))
        return self.__hash

    def __repr__(union1 self):
        return f'union1(type={self.type.name}, value={self.value!r})'

    cdef _load_cache(union1 self):
        self.type = union1.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = deref(self._cpp_obj).get_i()
        elif type == 2:
            self.value = deref(self._cpp_obj).get_d()

    def get_type(union1 self):
        return self.type

    def __copy__(union1 self):
        cdef shared_ptr[cunion1] cpp_obj = make_shared[cunion1](
            deref(self._cpp_obj)
        )
        return union1.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, union1) and
                isinstance(other, union1)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cunion1* cself = (<union1>self)._cpp_obj.get()
        cdef cunion1* cother = (<union1>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__union1()

    cdef __iobuf.IOBuf _serialize(union1 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cunion1](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(union1 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cunion1]()
        needed = serializer.cdeserialize[cunion1](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed

    def __reduce__(self):
        return (deserialize, (union1, serialize(self)))




@__cython.auto_pickle(False)
cdef class union2(thrift.py3.types.Union):
    Type = __union2Type

    def __init__(
        self, *,
        i=None,
        d=None,
        struct1 s=None,
        union1 u=None
    ):
        if i is not None:
            if not isinstance(i, int):
                raise TypeError(f'i is not a { int !r}.')
            i = <cint32_t> i

        if d is not None:
            if not isinstance(d, (float, int)):
                raise TypeError(f'd is not a { float !r}.')

        self._cpp_obj = __fbthrift_move(union2._make_instance(
          NULL,
          i,
          d,
          s,
          u,
        ))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return union2()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return union2(i=value)
                except OverflowError:
                    pass
        if isinstance(value, float):
            if not isinstance(value, pbool):
                try:
                    return union2(d=value)
                except OverflowError:
                    pass
        if isinstance(value, struct1):
            return union2(s=value)
        if isinstance(value, union1):
            return union2(u=value)
        if isinstance(value, (float, int)):
            try:
                <double> value
                return union2(d=value)
            except OverflowError:
                pass
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cunion2] _make_instance(
        cunion2* base_instance,
        object i,
        object d,
        struct1 s,
        union1 u
    ) except *:
        cdef unique_ptr[cunion2] c_inst = make_unique[cunion2]()
        cdef bint any_set = False
        if i is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_i(i)
            any_set = True
        if d is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_d(d)
            any_set = True
        if s is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_s(deref((<struct1?> s)._cpp_obj))
            any_set = True
        if u is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_u(deref((<union1?> u)._cpp_obj))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    def __bool__(self):
        return self.type is not __union2Type.EMPTY

    @staticmethod
    cdef create(shared_ptr[cunion2] cpp_obj):
        __fbthrift_inst = <union2>union2.__new__(union2)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def i(self):
        if self.type.value != 1:
            raise TypeError(f'Union contains a value of type {self.type.name}, not i')
        return self.value

    @property
    def d(self):
        if self.type.value != 2:
            raise TypeError(f'Union contains a value of type {self.type.name}, not d')
        return self.value

    @property
    def s(self):
        if self.type.value != 3:
            raise TypeError(f'Union contains a value of type {self.type.name}, not s')
        return self.value

    @property
    def u(self):
        if self.type.value != 4:
            raise TypeError(f'Union contains a value of type {self.type.name}, not u')
        return self.value


    def __hash__(union2 self):
        if not self.__hash:
            self.__hash = hash((
                self.type,
                self.value,
            ))
        return self.__hash

    def __repr__(union2 self):
        return f'union2(type={self.type.name}, value={self.value!r})'

    cdef _load_cache(union2 self):
        self.type = union2.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = deref(self._cpp_obj).get_i()
        elif type == 2:
            self.value = deref(self._cpp_obj).get_d()
        elif type == 3:
            self.value = struct1.create(make_shared[cstruct1](deref(self._cpp_obj).get_s()))
        elif type == 4:
            self.value = union1.create(make_shared[cunion1](deref(self._cpp_obj).get_u()))

    def get_type(union2 self):
        return self.type

    def __copy__(union2 self):
        cdef shared_ptr[cunion2] cpp_obj = make_shared[cunion2](
            deref(self._cpp_obj)
        )
        return union2.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, union2) and
                isinstance(other, union2)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cunion2* cself = (<union2>self)._cpp_obj.get()
        cdef cunion2* cother = (<union2>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__union2()

    cdef __iobuf.IOBuf _serialize(union2 self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cunion2](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(union2 self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cunion2]()
        needed = serializer.cdeserialize[cunion2](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed

    def __reduce__(self):
        return (deserialize, (union2, serialize(self)))


@__cython.auto_pickle(False)
cdef class List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__i32):
            self._cpp_obj = (<List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cint32_t]] c_items):
        __fbthrift_inst = <List__i32>List__i32.__new__(List__i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__i32 self):
        cdef shared_ptr[vector[cint32_t]] cpp_obj = make_shared[vector[cint32_t]](
            deref(self._cpp_obj)
        )
        return List__i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cint32_t]] c_inst = make_shared[vector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cint32_t]] c_inst
        cdef cint32_t citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cint32_t]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__i32.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = deref(self._cpp_obj)[index]
            return citem

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return std_libcpp.find[vector[cint32_t].iterator, cint32_t](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef vector[cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield citem
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef vector[cint32_t].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = deref(loc)
            yield citem
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, int):
            raise err
        cdef vector[cint32_t].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cint32_t].iterator loc = std_libcpp.find[vector[cint32_t].iterator, cint32_t](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            item        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, int):
            return 0
        return <cint64_t> std_libcpp.count[vector[cint32_t].iterator, cint32_t](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__i32()


Sequence.register(List__i32)

@__cython.auto_pickle(False)
cdef class Map__string_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_i32):
            self._cpp_obj = (<Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,cint32_t]] c_items):
        __fbthrift_inst = <Map__string_i32>Map__string_i32.__new__(Map__string_i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_i32 self):
        cdef shared_ptr[cmap[string,cint32_t]] cpp_obj = make_shared[cmap[string,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__string_i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,cint32_t]] c_inst = make_shared[cmap[string,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key.encode('UTF-8')] = item
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, str):
            raise err from None
        cdef cmap[string,cint32_t].iterator iter = deref(
            self._cpp_obj).find(key.encode('UTF-8'))
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef cint32_t citem = deref(iter).second
        return citem

    def __iter__(self):
        if not self:
            return
        cdef string citem
        cdef cmap[string,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, str):
            return False
        cdef string ckey = key.encode('UTF-8')
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, str):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[string,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield citem
            inc(loc)

    def items(self):
        if not self:
            return
        cdef string ckey
        cdef cint32_t citem
        cdef cmap[string,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (ckey.data().decode('UTF-8'), citem)
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_i32()


Mapping.register(Map__string_i32)

@__cython.auto_pickle(False)
cdef class List__Map__string_i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Map__string_i32):
            self._cpp_obj = (<List__Map__string_i32> items)._cpp_obj
        else:
            self._cpp_obj = List__Map__string_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cmap[string,cint32_t]]] c_items):
        __fbthrift_inst = <List__Map__string_i32>List__Map__string_i32.__new__(List__Map__string_i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__Map__string_i32 self):
        cdef shared_ptr[vector[cmap[string,cint32_t]]] cpp_obj = make_shared[vector[cmap[string,cint32_t]]](
            deref(self._cpp_obj)
        )
        return List__Map__string_i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cmap[string,cint32_t]]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cmap[string,cint32_t]]] c_inst = make_shared[vector[cmap[string,cint32_t]]]()
        if items is not None:
            for item in items:
                if item is None:
                    raise TypeError("None is not of the type _typing.Mapping[str, int]")
                if not isinstance(item, Map__string_i32):
                    item = Map__string_i32(item)
                deref(c_inst).push_back(deref((<Map__string_i32>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cmap[string,cint32_t]]] c_inst
        cdef shared_ptr[cmap[string,cint32_t]] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cmap[string,cint32_t]]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__Map__string_i32.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__Map__string_i32(self._cpp_obj, deref(self._cpp_obj)[index])
            return Map__string_i32.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        try:
            if not isinstance(item, Map__string_i32):
                item = Map__string_i32(item)
        except Exception:
            return False
        if not isinstance(item, Map__string_i32):
            return False
        return std_libcpp.find[vector[cmap[string,cint32_t]].iterator, cmap[string,cint32_t]](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Map__string_i32>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cmap[string,cint32_t]] citem
        cdef vector[cmap[string,cint32_t]].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__Map__string_i32(self._cpp_obj, deref(loc))
            yield Map__string_i32.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cmap[string,cint32_t]] citem
        cdef vector[cmap[string,cint32_t]].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__Map__string_i32(self._cpp_obj, deref(loc))
            yield Map__string_i32.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        try:
            if not isinstance(item, Map__string_i32):
                item = Map__string_i32(item)
        except Exception:
            raise err from None
        if not isinstance(item, Map__string_i32):
            raise err
        cdef vector[cmap[string,cint32_t]].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cmap[string,cint32_t]].iterator loc = std_libcpp.find[vector[cmap[string,cint32_t]].iterator, cmap[string,cint32_t]](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<Map__string_i32>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        try:
            if not isinstance(item, Map__string_i32):
                item = Map__string_i32(item)
        except Exception:
            return 0
        if not isinstance(item, Map__string_i32):
            return 0
        return <cint64_t> std_libcpp.count[vector[cmap[string,cint32_t]].iterator, cmap[string,cint32_t]](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Map__string_i32>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Map__string_i32()


Sequence.register(List__Map__string_i32)

@__cython.auto_pickle(False)
cdef class Map__string_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__string_string):
            self._cpp_obj = (<Map__string_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__string_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[string,string]] c_items):
        __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__string_string self):
        cdef shared_ptr[cmap[string,string]] cpp_obj = make_shared[cmap[string,string]](
            deref(self._cpp_obj)
        )
        return Map__string_string.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, str):
                    raise TypeError(f"{key!r} is not of type str")
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key.encode('UTF-8')] = item.encode('UTF-8')
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, str):
            raise err from None
        cdef cmap[string,string].iterator iter = deref(
            self._cpp_obj).find(key.encode('UTF-8'))
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef string citem = deref(iter).second
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef string citem
        cdef cmap[string,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, str):
            return False
        cdef string ckey = key.encode('UTF-8')
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, str):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef string citem
        cdef cmap[string,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def items(self):
        if not self:
            return
        cdef string ckey
        cdef string citem
        cdef cmap[string,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__string_string()


Mapping.register(Map__string_string)

@__cython.auto_pickle(False)
cdef class List__Range(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Range):
            self._cpp_obj = (<List__Range> items)._cpp_obj
        else:
            self._cpp_obj = List__Range._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cRange]] c_items):
        __fbthrift_inst = <List__Range>List__Range.__new__(List__Range)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__Range self):
        cdef shared_ptr[vector[cRange]] cpp_obj = make_shared[vector[cRange]](
            deref(self._cpp_obj)
        )
        return List__Range.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cRange]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cRange]] c_inst = make_shared[vector[cRange]]()
        if items is not None:
            for item in items:
                if not isinstance(item, Range):
                    raise TypeError(f"{item!r} is not of type 'Range'")
                deref(c_inst).push_back(deref((<Range>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cRange]] c_inst
        cdef shared_ptr[cRange] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cRange]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__Range.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__Range(self._cpp_obj, deref(self._cpp_obj)[index])
            return Range.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, Range):
            return False
        return std_libcpp.find[vector[cRange].iterator, cRange](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Range>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cRange] citem
        cdef vector[cRange].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__Range(self._cpp_obj, deref(loc))
            yield Range.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cRange] citem
        cdef vector[cRange].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__Range(self._cpp_obj, deref(loc))
            yield Range.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, Range):
            raise err
        cdef vector[cRange].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cRange].iterator loc = std_libcpp.find[vector[cRange].iterator, cRange](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<Range>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, Range):
            return 0
        return <cint64_t> std_libcpp.count[vector[cRange].iterator, cRange](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Range>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Range()


Sequence.register(List__Range)

@__cython.auto_pickle(False)
cdef class List__Internship(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Internship):
            self._cpp_obj = (<List__Internship> items)._cpp_obj
        else:
            self._cpp_obj = List__Internship._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cInternship]] c_items):
        __fbthrift_inst = <List__Internship>List__Internship.__new__(List__Internship)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__Internship self):
        cdef shared_ptr[vector[cInternship]] cpp_obj = make_shared[vector[cInternship]](
            deref(self._cpp_obj)
        )
        return List__Internship.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cInternship]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cInternship]] c_inst = make_shared[vector[cInternship]]()
        if items is not None:
            for item in items:
                if not isinstance(item, Internship):
                    raise TypeError(f"{item!r} is not of type 'Internship'")
                deref(c_inst).push_back(deref((<Internship>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cInternship]] c_inst
        cdef shared_ptr[cInternship] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cInternship]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__Internship.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__Internship(self._cpp_obj, deref(self._cpp_obj)[index])
            return Internship.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, Internship):
            return False
        return std_libcpp.find[vector[cInternship].iterator, cInternship](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Internship>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cInternship] citem
        cdef vector[cInternship].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__Internship(self._cpp_obj, deref(loc))
            yield Internship.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cInternship] citem
        cdef vector[cInternship].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__Internship(self._cpp_obj, deref(loc))
            yield Internship.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, Internship):
            raise err
        cdef vector[cInternship].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cInternship].iterator loc = std_libcpp.find[vector[cInternship].iterator, cInternship](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<Internship>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, Internship):
            return 0
        return <cint64_t> std_libcpp.count[vector[cInternship].iterator, cInternship](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Internship>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Internship()


Sequence.register(List__Internship)

@__cython.auto_pickle(False)
cdef class List__string(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__string):
            self._cpp_obj = (<List__string> items)._cpp_obj
        else:
            self._cpp_obj = List__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[string]] c_items):
        __fbthrift_inst = <List__string>List__string.__new__(List__string)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__string self):
        cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
            deref(self._cpp_obj)
        )
        return List__string.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[string]] _make_instance(object items) except *:
        cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.Sequence[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).push_back(item.encode('UTF-8'))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[string]] c_inst
        cdef string citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[string]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__string.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = deref(self._cpp_obj)[index]
            return bytes(citem).decode('UTF-8')

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, str):
            return False
        return std_libcpp.find[vector[string].iterator, string](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item.encode('UTF-8')) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef string citem
        cdef vector[string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef string citem
        cdef vector[string].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = deref(loc)
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, str):
            raise err
        cdef vector[string].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[string].iterator loc = std_libcpp.find[vector[string].iterator, string](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            item.encode('UTF-8')        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, str):
            return 0
        return <cint64_t> std_libcpp.count[vector[string].iterator, string](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item.encode('UTF-8'))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__string()


Sequence.register(List__string)

@__cython.auto_pickle(False)
cdef class Set__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i32):
            self._cpp_obj = (<Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cint32_t]] c_items):
        __fbthrift_inst = <Set__i32>Set__i32.__new__(Set__i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Set__i32 self):
        cdef shared_ptr[cset[cint32_t]] cpp_obj = make_shared[cset[cint32_t]](
            deref(self._cpp_obj)
        )
        return Set__i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint32_t]] c_inst = make_shared[cset[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cset[cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield citem
            inc(loc)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, op):
        cdef int cop = op
        cdef shared_ptr[cset[cint32_t]] cself, cother
        cdef cset[cint32_t].iterator loc
        if (isinstance(self, Set__i32) and
                isinstance(other, Set__i32)):
            cself = (<Set__i32> self)._cpp_obj
            cother = (<Set__i32> other)._cpp_obj
            # C level comparisons
            if cop == Py_LT:    # Less Than (strict subset)
                if not deref(cself).size() < deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_LE:  # Less Than or Equal To  (subset)
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_EQ:  # Equivalent
                if deref(cself).size() != deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_NE:  # Not Equivalent
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return True
                    inc(loc)
                return deref(cself).size() != deref(cother).size()
            elif cop == Py_GT:  # Greater Than (strict superset)
                if not deref(cself).size() > deref(cother).size():
                    return False
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_GE:  # Greater Than or Equal To (superset)
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True

        # Python level comparisons
        if cop == Py_LT:
            return Set.__lt__(self, other)
        elif cop == Py_LE:
            return Set.__le__(self, other)
        elif cop == Py_EQ:
            return Set.__eq__(self, other)
        elif cop == Py_NE:
            return Set.__ne__(self, other)
        elif cop == Py_GT:
            return Set.__gt__(self, other)
        elif cop == Py_GE:
            return Set.__ge__(self, other)

    def __and__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) > 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __sub__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __or__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __xor__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            if deref(cself).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))


    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i32()


Set.register(Set__i32)

@__cython.auto_pickle(False)
cdef class Set__string(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__string):
            self._cpp_obj = (<Set__string> items)._cpp_obj
        else:
            self._cpp_obj = Set__string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[string]] c_items):
        __fbthrift_inst = <Set__string>Set__string.__new__(Set__string)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Set__string self):
        cdef shared_ptr[cset[string]] cpp_obj = make_shared[cset[string]](
            deref(self._cpp_obj)
        )
        return Set__string.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[string]] _make_instance(object items) except *:
        cdef shared_ptr[cset[string]] c_inst = make_shared[cset[string]]()
        if items is not None:
            if isinstance(items, str):
                raise TypeError("If you really want to pass a string into a _typing.AbstractSet[str] field, explicitly convert it first.")
            for item in items:
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")
                deref(c_inst).insert(item.encode('UTF-8'))
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, str):
            return False
        return pbool(deref(self._cpp_obj).count(item.encode('UTF-8')))


    def __iter__(self):
        if not self:
            return
        cdef string citem
        cdef cset[string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, op):
        cdef int cop = op
        cdef shared_ptr[cset[string]] cself, cother
        cdef cset[string].iterator loc
        if (isinstance(self, Set__string) and
                isinstance(other, Set__string)):
            cself = (<Set__string> self)._cpp_obj
            cother = (<Set__string> other)._cpp_obj
            # C level comparisons
            if cop == Py_LT:    # Less Than (strict subset)
                if not deref(cself).size() < deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_LE:  # Less Than or Equal To  (subset)
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_EQ:  # Equivalent
                if deref(cself).size() != deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_NE:  # Not Equivalent
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return True
                    inc(loc)
                return deref(cself).size() != deref(cother).size()
            elif cop == Py_GT:  # Greater Than (strict superset)
                if not deref(cself).size() > deref(cother).size():
                    return False
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_GE:  # Greater Than or Equal To (superset)
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True

        # Python level comparisons
        if cop == Py_LT:
            return Set.__lt__(self, other)
        elif cop == Py_LE:
            return Set.__le__(self, other)
        elif cop == Py_EQ:
            return Set.__eq__(self, other)
        elif cop == Py_NE:
            return Set.__ne__(self, other)
        elif cop == Py_GT:
            return Set.__gt__(self, other)
        elif cop == Py_GE:
            return Set.__ge__(self, other)

    def __and__(self, other):
        if not isinstance(self, Set__string):
            self = Set__string(self)
        if not isinstance(other, Set__string):
            other = Set__string(other)

        cdef shared_ptr[cset[string]] shretval = \
            make_shared[cset[string]]()

        cdef shared_ptr[cset[string]] cself = (<Set__string> self)._cpp_obj
        cdef shared_ptr[cset[string]] cother = (<Set__string> other)._cpp_obj

        cdef cset[string].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) > 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__string.create(__fbthrift_move_shared(shretval))

    def __sub__(self, other):
        if not isinstance(self, Set__string):
            self = Set__string(self)
        if not isinstance(other, Set__string):
            other = Set__string(other)

        cdef shared_ptr[cset[string]] shretval = \
            make_shared[cset[string]]()

        cdef shared_ptr[cset[string]] cself = (<Set__string> self)._cpp_obj
        cdef shared_ptr[cset[string]] cother = (<Set__string> other)._cpp_obj

        cdef cset[string].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__string.create(__fbthrift_move_shared(shretval))

    def __or__(self, other):
        if not isinstance(self, Set__string):
            self = Set__string(self)
        if not isinstance(other, Set__string):
            other = Set__string(other)

        cdef shared_ptr[cset[string]] shretval = \
            make_shared[cset[string]]()

        cdef shared_ptr[cset[string]] cself = (<Set__string> self)._cpp_obj
        cdef shared_ptr[cset[string]] cother = (<Set__string> other)._cpp_obj

        cdef cset[string].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__string.create(__fbthrift_move_shared(shretval))

    def __xor__(self, other):
        if not isinstance(self, Set__string):
            self = Set__string(self)
        if not isinstance(other, Set__string):
            other = Set__string(other)

        cdef shared_ptr[cset[string]] shretval = \
            make_shared[cset[string]]()

        cdef shared_ptr[cset[string]] cself = (<Set__string> self)._cpp_obj
        cdef shared_ptr[cset[string]] cother = (<Set__string> other)._cpp_obj

        cdef cset[string].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            if deref(cself).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__string.create(__fbthrift_move_shared(shretval))


    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__string()


Set.register(Set__string)

@__cython.auto_pickle(False)
cdef class Map__i32_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_i32):
            self._cpp_obj = (<Map__i32_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint32_t,cint32_t]] c_items):
        __fbthrift_inst = <Map__i32_i32>Map__i32_i32.__new__(Map__i32_i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_i32 self):
        cdef shared_ptr[cmap[cint32_t,cint32_t]] cpp_obj = make_shared[cmap[cint32_t,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__i32_i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,cint32_t]] c_inst = make_shared[cmap[cint32_t,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key] = item
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, int):
            raise err from None
        cdef cmap[cint32_t,cint32_t].iterator iter = deref(
            self._cpp_obj).find(key)
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef cint32_t citem = deref(iter).second
        return citem

    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield citem
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, int):
            return False
        cdef cint32_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, int):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield citem
            inc(loc)

    def items(self):
        if not self:
            return
        cdef cint32_t ckey
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (ckey, citem)
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_i32()


Mapping.register(Map__i32_i32)

@__cython.auto_pickle(False)
cdef class Map__i32_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_string):
            self._cpp_obj = (<Map__i32_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint32_t,string]] c_items):
        __fbthrift_inst = <Map__i32_string>Map__i32_string.__new__(Map__i32_string)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_string self):
        cdef shared_ptr[cmap[cint32_t,string]] cpp_obj = make_shared[cmap[cint32_t,string]](
            deref(self._cpp_obj)
        )
        return Map__i32_string.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,string]] c_inst = make_shared[cmap[cint32_t,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[key] = item.encode('UTF-8')
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, int):
            raise err from None
        cdef cmap[cint32_t,string].iterator iter = deref(
            self._cpp_obj).find(key)
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef string citem = deref(iter).second
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[cint32_t,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield citem
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, int):
            return False
        cdef cint32_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, int):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef string citem
        cdef cmap[cint32_t,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def items(self):
        if not self:
            return
        cdef cint32_t ckey
        cdef string citem
        cdef cmap[cint32_t,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (ckey, bytes(citem).decode('UTF-8'))
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_string()


Mapping.register(Map__i32_string)

myInt = 1337
name = cname().decode('UTF-8')
states = List__Map__string_i32.create(constant_shared_ptr(cstates()))
x = 1
y = 1000000.0
z = 1000000000
zeroDoubleValue = 0
longDoubleValue = 2.59961000990301e-05
my_company = Company(<int> (cmy_company()))
foo = cfoo().decode('UTF-8')
bar = 42
mymap = Map__string_string.create(constant_shared_ptr(cmymap()))
instagram = Internship.create(constant_shared_ptr(cinstagram()))
partial_const = Internship.create(constant_shared_ptr(cpartial_const()))
kRanges = List__Range.create(constant_shared_ptr(ckRanges()))
internList = List__Internship.create(constant_shared_ptr(cinternList()))
pod_0 = struct1.create(constant_shared_ptr(cpod_0()))
pod_s_0 = struct1.create(constant_shared_ptr(cpod_s_0()))
pod_1 = struct1.create(constant_shared_ptr(cpod_1()))
pod_s_1 = struct1.create(constant_shared_ptr(cpod_s_1()))
pod_2 = struct2.create(constant_shared_ptr(cpod_2()))
pod_trailing_commas = struct2.create(constant_shared_ptr(cpod_trailing_commas()))
pod_s_2 = struct2.create(constant_shared_ptr(cpod_s_2()))
pod_3 = struct3.create(constant_shared_ptr(cpod_3()))
pod_s_3 = struct3.create(constant_shared_ptr(cpod_s_3()))
pod_4 = struct4.create(constant_shared_ptr(cpod_4()))
u_1_1 = union1.create(constant_shared_ptr(cu_1_1()))
u_1_2 = union1.create(constant_shared_ptr(cu_1_2()))
u_1_3 = union1.create(constant_shared_ptr(cu_1_3()))
u_2_1 = union2.create(constant_shared_ptr(cu_2_1()))
u_2_2 = union2.create(constant_shared_ptr(cu_2_2()))
u_2_3 = union2.create(constant_shared_ptr(cu_2_3()))
u_2_4 = union2.create(constant_shared_ptr(cu_2_4()))
u_2_5 = union2.create(constant_shared_ptr(cu_2_5()))
u_2_6 = union2.create(constant_shared_ptr(cu_2_6()))
apostrophe = capostrophe().decode('UTF-8')
tripleApostrophe = ctripleApostrophe().decode('UTF-8')
quotationMark = cquotationMark().decode('UTF-8')
backslash = cbackslash().decode('UTF-8')
escaped_a = cescaped_a().decode('UTF-8')
char2ascii = Map__string_i32.create(constant_shared_ptr(cchar2ascii()))
escaped_strings = List__string.create(constant_shared_ptr(cescaped_strings()))
false_c = False
true_c = True
zero_byte = 0
zero16 = 0
zero32 = 0
zero64 = 0
zero_dot_zero = 0
empty_string = cempty_string().decode('UTF-8')
empty_int_list = List__i32.create(constant_shared_ptr(cempty_int_list()))
empty_string_list = List__string.create(constant_shared_ptr(cempty_string_list()))
empty_int_set = Set__i32.create(constant_shared_ptr(cempty_int_set()))
empty_string_set = Set__string.create(constant_shared_ptr(cempty_string_set()))
empty_int_int_map = Map__i32_i32.create(constant_shared_ptr(cempty_int_int_map()))
empty_int_string_map = Map__i32_string.create(constant_shared_ptr(cempty_int_string_map()))
empty_string_int_map = Map__string_i32.create(constant_shared_ptr(cempty_string_int_map()))
empty_string_string_map = Map__string_string.create(constant_shared_ptr(cempty_string_string_map()))
MyCompany = Company
MyStringIdentifier = str
MyIntIdentifier = int
MyMapIdentifier = Map__string_string
