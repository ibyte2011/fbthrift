/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.inheritance;

import com.facebook.nifty.client.RequestChannel;
import com.facebook.swift.codec.*;
import com.facebook.swift.service.*;
import com.facebook.swift.transport.client.RpcOptions;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.lang.reflect.Method;
import java.util.*;

@SwiftGenerated
public class MyNodeAsyncClientImpl extends test.fixtures.inheritance.MyRootAsyncClientImpl implements MyNode.Async {

    // Method Handlers
    private ThriftMethodHandler doMidMethodHandler;

    // Method Exceptions
    private static final Class[] doMidExceptions = new Class[] {
        org.apache.thrift.TException.class};

    public MyNodeAsyncClientImpl(
        RequestChannel channel,
        Map<Method, ThriftMethodHandler> methods,
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        List<? extends ThriftClientEventHandler> eventHandlers) {
      super(channel, methods, headers, persistentHeaders, eventHandlers);

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      doMidMethodHandler = methodHandlerMap.get("doMid");
    }

    @Override
    public void close() {
        super.close();
    }


    @Override
    public ListenableFuture<Void> doMid() {
        try {
          return (ListenableFuture<Void>) execute(doMidMethodHandler, doMidExceptions);
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }


    public ListenableFuture<Void> doMid(
        RpcOptions rpcOptions) {
        try {
          return (ListenableFuture<Void>) executeWithOptions(doMidMethodHandler, doMidExceptions, rpcOptions);
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }
}
