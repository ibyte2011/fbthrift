/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/complex-struct/gen-cpp2/module_types.h"

#include <thrift/lib/cpp2/gen/module_types_tcc.h>

namespace cpp2 {

} // cpp2
namespace std {

} // std


namespace apache {
namespace thrift {
namespace detail {

template <>
struct TccStructTraits<::cpp2::MyStructFloatFieldThrowExp> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyStructMapFloatThrowExp> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyDataItem> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyStruct> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::SimpleStruct> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::ComplexNestedStruct> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyUnion> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::defaultStruct> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyStructTypeDef> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::MyUnionFloatFieldThrowExp> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::TypeRemapped> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::emptyXcep> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::reqXcep> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::optXcep> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};
template <>
struct TccStructTraits<::cpp2::complexException> {
  static void translateFieldName(
      folly::StringPiece _fname,
      int16_t& fid,
      apache::thrift::protocol::TType& _ftype) noexcept;
};

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

template <class Protocol_>
void MyStructFloatFieldThrowExp::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->myLongField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_MyByteField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->MyByteField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyByteField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_myStringField:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->myStringField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myStringField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_FLOAT))) {
    goto _loop;
  }
_readField_myFloatField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, float>::readWithContext(*iprot, this->myFloatField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myFloatField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyStructFloatFieldThrowExp>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_MyByteField;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_myStringField;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_FLOAT))) {
        goto _readField_myFloatField;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyStructFloatFieldThrowExp::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructFloatFieldThrowExp");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("MyByteField", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->MyByteField);
  xfer += prot_->serializedFieldSize("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->myStringField);
  xfer += prot_->serializedFieldSize("myFloatField", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->myFloatField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructFloatFieldThrowExp::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructFloatFieldThrowExp");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("MyByteField", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->MyByteField);
  xfer += prot_->serializedFieldSize("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->myStringField);
  xfer += prot_->serializedFieldSize("myFloatField", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->myFloatField);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructFloatFieldThrowExp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStructFloatFieldThrowExp");
  xfer += prot_->writeFieldBegin("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->myLongField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyByteField", apache::thrift::protocol::T_BYTE, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->MyByteField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->myStringField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myFloatField", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->myFloatField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyStructFloatFieldThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyStructFloatFieldThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyStructFloatFieldThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStructFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyStructFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyStructFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyStructFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStructFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyStructMapFloatThrowExp::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->myLongField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapListOfFloats:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapListOfFloats = ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::floatTypedef>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::floatTypedef>>>>::read(*iprot, this->mapListOfFloats);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapListOfFloats = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyStructMapFloatThrowExp>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapListOfFloats;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyStructMapFloatThrowExp::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructMapFloatThrowExp");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("mapListOfFloats", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::floatTypedef>>>>::serializedSize<false>(*prot_, this->mapListOfFloats);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructMapFloatThrowExp::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructMapFloatThrowExp");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("mapListOfFloats", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::floatTypedef>>>>::serializedSize<false>(*prot_, this->mapListOfFloats);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructMapFloatThrowExp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStructMapFloatThrowExp");
  xfer += prot_->writeFieldBegin("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->myLongField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapListOfFloats", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::floatTypedef>>>>::write(*prot_, this->mapListOfFloats);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyStructMapFloatThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyStructMapFloatThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyStructMapFloatThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStructMapFloatThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyStructMapFloatThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyStructMapFloatThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyStructMapFloatThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStructMapFloatThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyDataItem::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyDataItem>>();
  }

  switch (_readState.fieldId) {
    default:
    {
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyDataItem::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyDataItem");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyDataItem::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyDataItem");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyDataItem::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyDataItem");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyDataItem::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyDataItem::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyDataItem::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_MyIntField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->MyIntField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyIntField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_MyStringField:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->MyStringField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyStringField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_MyDataField:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::read(iprot, &this->MyDataField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyDataField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_myEnum:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::readWithContext(*iprot, this->myEnum, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myEnum = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_BOOL))) {
    goto _loop;
  }
_readField_MyBoolField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, bool>::readWithContext(*iprot, this->MyBoolField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyBoolField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_MyByteField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->MyByteField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyByteField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_I16))) {
    goto _loop;
  }
_readField_MyShortField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::readWithContext(*iprot, this->MyShortField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyShortField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_MyLongField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->MyLongField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyLongField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_MyDoubleField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->MyDoubleField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.MyDoubleField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lDouble:
  {
    _readState.beforeSubobject(iprot);
    
    this->lDouble = ::std::vector<double>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::read(*iprot, this->lDouble);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lDouble = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lShort:
  {
    _readState.beforeSubobject(iprot);
    
    this->lShort = ::std::vector<int16_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int16_t>>::read(*iprot, this->lShort);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lShort = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lInteger:
  {
    _readState.beforeSubobject(iprot);
    
    this->lInteger = ::std::vector<int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::read(*iprot, this->lInteger);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lInteger = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->lLong = ::std::vector<int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::read(*iprot, this->lLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lString:
  {
    _readState.beforeSubobject(iprot);
    
    this->lString = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::read(*iprot, this->lString);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lString = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lBool:
  {
    _readState.beforeSubobject(iprot);
    
    this->lBool = ::std::vector<bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<bool>>::read(*iprot, this->lBool);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lBool = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_lByte:
  {
    _readState.beforeSubobject(iprot);
    
    this->lByte = ::std::vector<int8_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int8_t>>::read(*iprot, this->lByte);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lByte = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mShortString:
  {
    _readState.beforeSubobject(iprot);
    
    this->mShortString = ::std::map<int16_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::read(*iprot, this->mShortString);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mShortString = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mIntegerString:
  {
    _readState.beforeSubobject(iprot);
    
    this->mIntegerString = ::std::map<int32_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::read(*iprot, this->mIntegerString);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mIntegerString = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          19,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mStringMyStruct:
  {
    _readState.beforeSubobject(iprot);
    
    this->mStringMyStruct = ::std::map<::std::string,  ::cpp2::MyStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::cpp2::MyStruct>>::read(*iprot, this->mStringMyStruct);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mStringMyStruct = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          19,
          20,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mStringBool:
  {
    _readState.beforeSubobject(iprot);
    
    this->mStringBool = ::std::map<::std::string, bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::std::map<::std::string, bool>>::read(*iprot, this->mStringBool);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mStringBool = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          20,
          21,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mIntegerInteger:
  {
    _readState.beforeSubobject(iprot);
    
    this->mIntegerInteger = ::std::map<int32_t, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, int32_t>>::read(*iprot, this->mIntegerInteger);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mIntegerInteger = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          21,
          22,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mIntegerBool:
  {
    _readState.beforeSubobject(iprot);
    
    this->mIntegerBool = ::std::map<int32_t, bool>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, bool>>::read(*iprot, this->mIntegerBool);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mIntegerBool = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          22,
          23,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sShort:
  {
    _readState.beforeSubobject(iprot);
    
    this->sShort = ::std::set<int16_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int16_t>>::read(*iprot, this->sShort);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sShort = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          23,
          24,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sMyStruct:
  {
    _readState.beforeSubobject(iprot);
    
    this->sMyStruct = ::std::set< ::cpp2::MyStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::std::set< ::cpp2::MyStruct>>::read(*iprot, this->sMyStruct);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sMyStruct = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          24,
          25,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->sLong = ::std::set<int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int64_t>>::read(*iprot, this->sLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          25,
          26,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sString:
  {
    _readState.beforeSubobject(iprot);
    
    this->sString = ::std::set<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::read(*iprot, this->sString);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sString = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          26,
          27,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_sByte:
  {
    _readState.beforeSubobject(iprot);
    
    this->sByte = ::std::set<int8_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int8_t>>::read(*iprot, this->sByte);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.sByte = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          27,
          28,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mListList:
  {
    _readState.beforeSubobject(iprot);
    
    this->mListList = ::std::map<::std::vector<int32_t>, ::std::vector<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::map<::std::vector<int32_t>, ::std::vector<int32_t>>>::read(*iprot, this->mListList);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mListList = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          28,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyStruct>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_MyIntField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_MyStringField;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_MyDataField;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_myEnum;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BOOL))) {
        goto _readField_MyBoolField;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_MyByteField;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I16))) {
        goto _readField_MyShortField;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_MyLongField;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_MyDoubleField;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lDouble;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lShort;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lInteger;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lLong;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lString;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lBool;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_lByte;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mShortString;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mIntegerString;
      } else {
        goto _skip;
      }
    }
    case 19:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mStringMyStruct;
      } else {
        goto _skip;
      }
    }
    case 20:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mStringBool;
      } else {
        goto _skip;
      }
    }
    case 21:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mIntegerInteger;
      } else {
        goto _skip;
      }
    }
    case 22:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mIntegerBool;
      } else {
        goto _skip;
      }
    }
    case 23:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sShort;
      } else {
        goto _skip;
      }
    }
    case 24:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sMyStruct;
      } else {
        goto _skip;
      }
    }
    case 25:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sLong;
      } else {
        goto _skip;
      }
    }
    case 26:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sString;
      } else {
        goto _skip;
      }
    }
    case 27:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_sByte;
      } else {
        goto _skip;
      }
    }
    case 28:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mListList;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  xfer += prot_->serializedFieldSize("MyIntField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyIntField);
  xfer += prot_->serializedFieldSize("MyStringField", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->MyStringField);
  xfer += prot_->serializedFieldSize("MyDataField", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSize(prot_, &this->MyDataField);
  xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->myEnum);
  xfer += prot_->serializedFieldSize("MyBoolField", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->MyBoolField);
  xfer += prot_->serializedFieldSize("MyByteField", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->MyByteField);
  xfer += prot_->serializedFieldSize("MyShortField", apache::thrift::protocol::T_I16, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->MyShortField);
  xfer += prot_->serializedFieldSize("MyLongField", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyLongField);
  xfer += prot_->serializedFieldSize("MyDoubleField", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->MyDoubleField);
  xfer += prot_->serializedFieldSize("lDouble", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::serializedSize<false>(*prot_, this->lDouble);
  xfer += prot_->serializedFieldSize("lShort", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int16_t>>::serializedSize<false>(*prot_, this->lShort);
  xfer += prot_->serializedFieldSize("lInteger", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::serializedSize<false>(*prot_, this->lInteger);
  xfer += prot_->serializedFieldSize("lLong", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::serializedSize<false>(*prot_, this->lLong);
  xfer += prot_->serializedFieldSize("lString", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->lString);
  xfer += prot_->serializedFieldSize("lBool", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<bool>>::serializedSize<false>(*prot_, this->lBool);
  xfer += prot_->serializedFieldSize("lByte", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int8_t>>::serializedSize<false>(*prot_, this->lByte);
  xfer += prot_->serializedFieldSize("mShortString", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::serializedSize<false>(*prot_, this->mShortString);
  xfer += prot_->serializedFieldSize("mIntegerString", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->mIntegerString);
  xfer += prot_->serializedFieldSize("mStringMyStruct", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::cpp2::MyStruct>>::serializedSize<false>(*prot_, this->mStringMyStruct);
  xfer += prot_->serializedFieldSize("mStringBool", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::std::map<::std::string, bool>>::serializedSize<false>(*prot_, this->mStringBool);
  xfer += prot_->serializedFieldSize("mIntegerInteger", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->mIntegerInteger);
  xfer += prot_->serializedFieldSize("mIntegerBool", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->mIntegerBool);
  xfer += prot_->serializedFieldSize("sShort", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int16_t>>::serializedSize<false>(*prot_, this->sShort);
  xfer += prot_->serializedFieldSize("sMyStruct", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::std::set< ::cpp2::MyStruct>>::serializedSize<false>(*prot_, this->sMyStruct);
  xfer += prot_->serializedFieldSize("sLong", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int64_t>>::serializedSize<false>(*prot_, this->sLong);
  xfer += prot_->serializedFieldSize("sString", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->sString);
  xfer += prot_->serializedFieldSize("sByte", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int8_t>>::serializedSize<false>(*prot_, this->sByte);
  xfer += prot_->serializedFieldSize("mListList", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::map<::std::vector<int32_t>, ::std::vector<int32_t>>>::serializedSize<false>(*prot_, this->mListList);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  xfer += prot_->serializedFieldSize("MyIntField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyIntField);
  xfer += prot_->serializedFieldSize("MyStringField", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->MyStringField);
  xfer += prot_->serializedFieldSize("MyDataField", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSizeZC(prot_, &this->MyDataField);
  xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->myEnum);
  xfer += prot_->serializedFieldSize("MyBoolField", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->MyBoolField);
  xfer += prot_->serializedFieldSize("MyByteField", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->MyByteField);
  xfer += prot_->serializedFieldSize("MyShortField", apache::thrift::protocol::T_I16, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::serializedSize<false>(*prot_, this->MyShortField);
  xfer += prot_->serializedFieldSize("MyLongField", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->MyLongField);
  xfer += prot_->serializedFieldSize("MyDoubleField", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->MyDoubleField);
  xfer += prot_->serializedFieldSize("lDouble", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::serializedSize<false>(*prot_, this->lDouble);
  xfer += prot_->serializedFieldSize("lShort", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int16_t>>::serializedSize<false>(*prot_, this->lShort);
  xfer += prot_->serializedFieldSize("lInteger", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::serializedSize<false>(*prot_, this->lInteger);
  xfer += prot_->serializedFieldSize("lLong", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::serializedSize<false>(*prot_, this->lLong);
  xfer += prot_->serializedFieldSize("lString", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->lString);
  xfer += prot_->serializedFieldSize("lBool", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<bool>>::serializedSize<false>(*prot_, this->lBool);
  xfer += prot_->serializedFieldSize("lByte", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int8_t>>::serializedSize<false>(*prot_, this->lByte);
  xfer += prot_->serializedFieldSize("mShortString", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::serializedSize<false>(*prot_, this->mShortString);
  xfer += prot_->serializedFieldSize("mIntegerString", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->mIntegerString);
  xfer += prot_->serializedFieldSize("mStringMyStruct", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::cpp2::MyStruct>>::serializedSize<false>(*prot_, this->mStringMyStruct);
  xfer += prot_->serializedFieldSize("mStringBool", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::std::map<::std::string, bool>>::serializedSize<false>(*prot_, this->mStringBool);
  xfer += prot_->serializedFieldSize("mIntegerInteger", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->mIntegerInteger);
  xfer += prot_->serializedFieldSize("mIntegerBool", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->mIntegerBool);
  xfer += prot_->serializedFieldSize("sShort", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int16_t>>::serializedSize<false>(*prot_, this->sShort);
  xfer += prot_->serializedFieldSize("sMyStruct", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::std::set< ::cpp2::MyStruct>>::serializedSize<false>(*prot_, this->sMyStruct);
  xfer += prot_->serializedFieldSize("sLong", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int64_t>>::serializedSize<false>(*prot_, this->sLong);
  xfer += prot_->serializedFieldSize("sString", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->sString);
  xfer += prot_->serializedFieldSize("sByte", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int8_t>>::serializedSize<false>(*prot_, this->sByte);
  xfer += prot_->serializedFieldSize("mListList", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::map<::std::vector<int32_t>, ::std::vector<int32_t>>>::serializedSize<false>(*prot_, this->mListList);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStruct");
  xfer += prot_->writeFieldBegin("MyIntField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->MyIntField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyStringField", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->MyStringField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyDataField", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::write(prot_, &this->MyDataField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myEnum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::write(*prot_, this->myEnum);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyBoolField", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->MyBoolField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyByteField", apache::thrift::protocol::T_BYTE, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->MyByteField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyShortField", apache::thrift::protocol::T_I16, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int16_t>::write(*prot_, this->MyShortField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyLongField", apache::thrift::protocol::T_I64, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->MyLongField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("MyDoubleField", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->MyDoubleField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lDouble", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::write(*prot_, this->lDouble);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lShort", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int16_t>>::write(*prot_, this->lShort);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lInteger", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int32_t>>::write(*prot_, this->lInteger);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lLong", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int64_t>>::write(*prot_, this->lLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lString", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::write(*prot_, this->lString);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lBool", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<bool>>::write(*prot_, this->lBool);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lByte", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::std::vector<int8_t>>::write(*prot_, this->lByte);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mShortString", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::write(*prot_, this->mShortString);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mIntegerString", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::write(*prot_, this->mIntegerString);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mStringMyStruct", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, ::std::map<::std::string,  ::cpp2::MyStruct>>::write(*prot_, this->mStringMyStruct);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mStringBool", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::std::map<::std::string, bool>>::write(*prot_, this->mStringBool);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mIntegerInteger", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, int32_t>>::write(*prot_, this->mIntegerInteger);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mIntegerBool", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int32_t, bool>>::write(*prot_, this->mIntegerBool);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sShort", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int16_t>>::write(*prot_, this->sShort);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sMyStruct", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::std::set< ::cpp2::MyStruct>>::write(*prot_, this->sMyStruct);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sLong", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int64_t>>::write(*prot_, this->sLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sString", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::write(*prot_, this->sString);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sByte", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::std::set<int8_t>>::write(*prot_, this->sByte);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mListList", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::map<::std::vector<int32_t>, ::std::vector<int32_t>>>::write(*prot_, this->mListList);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void SimpleStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_age:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->age, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.age = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_name:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->name);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.name = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<SimpleStruct>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_age;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_name;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t SimpleStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SimpleStruct");
  xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->age);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SimpleStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("SimpleStruct");
  xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->age);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->name);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t SimpleStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("SimpleStruct");
  xfer += prot_->writeFieldBegin("age", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->age);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void SimpleStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t SimpleStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t SimpleStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void SimpleStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t SimpleStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t SimpleStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t SimpleStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void ComplexNestedStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_setOfSetOfInt:
  {
    _readState.beforeSubobject(iprot);
    
    this->setOfSetOfInt = ::std::set<::std::set<int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::set<::std::set<int32_t>>>::read(*iprot, this->setOfSetOfInt);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.setOfSetOfInt = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listofListOfListOfListOfEnum:
  {
    _readState.beforeSubobject(iprot);
    
    this->listofListOfListOfListOfEnum = ::std::vector<::std::vector<::std::vector<::std::vector< ::cpp2::MyEnum>>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>>>>, ::std::vector<::std::vector<::std::vector<::std::vector< ::cpp2::MyEnum>>>>>::read(*iprot, this->listofListOfListOfListOfEnum);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listofListOfListOfListOfEnum = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listOfListOfMyStruct:
  {
    _readState.beforeSubobject(iprot);
    
    this->listOfListOfMyStruct = ::std::vector<::std::vector< ::cpp2::MyStruct>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::vector<::std::vector< ::cpp2::MyStruct>>>::read(*iprot, this->listOfListOfMyStruct);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listOfListOfMyStruct = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_setOfListOfListOfLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->setOfListOfListOfLong = ::std::set<::std::vector<::std::vector<int64_t>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, ::std::set<::std::vector<::std::vector<int64_t>>>>::read(*iprot, this->setOfListOfListOfLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.setOfListOfListOfLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_setOfSetOfsetOfLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->setOfSetOfsetOfLong = ::std::set<::std::set<::std::set<int64_t>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, ::std::set<::std::set<::std::set<int64_t>>>>::read(*iprot, this->setOfSetOfsetOfLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.setOfSetOfsetOfLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapStructListOfListOfLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapStructListOfListOfLong = ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::MyStruct>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::MyStruct>>>>::read(*iprot, this->mapStructListOfListOfLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapStructListOfListOfLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mKeyStructValInt:
  {
    _readState.beforeSubobject(iprot);
    
    this->mKeyStructValInt = ::std::map< ::cpp2::MyStruct, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::std::map< ::cpp2::MyStruct, int32_t>>::read(*iprot, this->mKeyStructValInt);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mKeyStructValInt = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listOfMapKeyIntValInt:
  {
    _readState.beforeSubobject(iprot);
    
    this->listOfMapKeyIntValInt = ::std::vector<::std::map<int32_t, int32_t>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::vector<::std::map<int32_t, int32_t>>>::read(*iprot, this->listOfMapKeyIntValInt);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listOfMapKeyIntValInt = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listOfMapKeyStrValList:
  {
    _readState.beforeSubobject(iprot);
    
    this->listOfMapKeyStrValList = ::std::vector<::std::map<::std::string, ::std::vector< ::cpp2::MyStruct>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::vector<::std::map<::std::string, ::std::vector< ::cpp2::MyStruct>>>>::read(*iprot, this->listOfMapKeyStrValList);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listOfMapKeyStrValList = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeySetValLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeySetValLong = ::std::map<::std::set<int32_t>, int64_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, ::std::map<::std::set<int32_t>, int64_t>>::read(*iprot, this->mapKeySetValLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeySetValLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          11,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeyListValLong:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeyListValLong = ::std::map<::std::vector<::std::string>, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, ::std::map<::std::vector<::std::string>, int32_t>>::read(*iprot, this->mapKeyListValLong);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeyListValLong = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          11,
          12,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeyMapValMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeyMapValMap = ::std::map<::std::map<int32_t, ::std::string>, ::std::map<int32_t, ::std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<int32_t, ::std::string>, ::std::map<int32_t, ::std::string>>>::read(*iprot, this->mapKeyMapValMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeyMapValMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeySetValMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeySetValMap = ::std::map<::std::set<::std::vector<int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, ::std::map<::std::set<::std::vector<int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>::read(*iprot, this->mapKeySetValMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeySetValMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_NestedMaps:
  {
    _readState.beforeSubobject(iprot);
    
    this->NestedMaps = ::std::map<::std::map<::std::map<int32_t, ::std::string>, ::std::string>, ::std::map<int32_t, ::std::string>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<::std::map<int32_t, ::std::string>, ::std::string>, ::std::map<int32_t, ::std::string>>>::read(*iprot, this->NestedMaps);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.NestedMaps = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeyIntValList:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeyIntValList = ::std::map<int32_t, ::std::vector< ::cpp2::MyStruct>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::MyStruct>>>::read(*iprot, this->mapKeyIntValList);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeyIntValList = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeyIntValSet:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeyIntValSet = ::std::map<int32_t, ::std::set<bool>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::map<int32_t, ::std::set<bool>>>::read(*iprot, this->mapKeyIntValSet);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeyIntValSet = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeySetValInt:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeySetValInt = ::std::map<::std::set<bool>,  ::cpp2::MyEnum>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::enumeration>, ::std::map<::std::set<bool>,  ::cpp2::MyEnum>>::read(*iprot, this->mapKeySetValInt);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeySetValInt = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapKeyListValSet:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapKeyListValSet = ::std::map<::std::vector<int32_t>, ::std::set<::std::map<double, ::std::string>>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, ::std::map<::std::vector<int32_t>, ::std::set<::std::map<double, ::std::string>>>>::read(*iprot, this->mapKeyListValSet);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapKeyListValSet = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<ComplexNestedStruct>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_setOfSetOfInt;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listofListOfListOfListOfEnum;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listOfListOfMyStruct;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_setOfListOfListOfLong;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_setOfSetOfsetOfLong;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapStructListOfListOfLong;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mKeyStructValInt;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listOfMapKeyIntValInt;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listOfMapKeyStrValList;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeySetValLong;
      } else {
        goto _skip;
      }
    }
    case 11:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeyListValLong;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeyMapValMap;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeySetValMap;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_NestedMaps;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeyIntValList;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeyIntValSet;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeySetValInt;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapKeyListValSet;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t ComplexNestedStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexNestedStruct");
  xfer += prot_->serializedFieldSize("setOfSetOfInt", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::set<::std::set<int32_t>>>::serializedSize<false>(*prot_, this->setOfSetOfInt);
  xfer += prot_->serializedFieldSize("listofListOfListOfListOfEnum", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>>>>, ::std::vector<::std::vector<::std::vector<::std::vector< ::cpp2::MyEnum>>>>>::serializedSize<false>(*prot_, this->listofListOfListOfListOfEnum);
  xfer += prot_->serializedFieldSize("listOfListOfMyStruct", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::vector<::std::vector< ::cpp2::MyStruct>>>::serializedSize<false>(*prot_, this->listOfListOfMyStruct);
  xfer += prot_->serializedFieldSize("setOfListOfListOfLong", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, ::std::set<::std::vector<::std::vector<int64_t>>>>::serializedSize<false>(*prot_, this->setOfListOfListOfLong);
  xfer += prot_->serializedFieldSize("setOfSetOfsetOfLong", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, ::std::set<::std::set<::std::set<int64_t>>>>::serializedSize<false>(*prot_, this->setOfSetOfsetOfLong);
  xfer += prot_->serializedFieldSize("mapStructListOfListOfLong", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::MyStruct>>>>::serializedSize<false>(*prot_, this->mapStructListOfListOfLong);
  xfer += prot_->serializedFieldSize("mKeyStructValInt", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::std::map< ::cpp2::MyStruct, int32_t>>::serializedSize<false>(*prot_, this->mKeyStructValInt);
  xfer += prot_->serializedFieldSize("listOfMapKeyIntValInt", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::vector<::std::map<int32_t, int32_t>>>::serializedSize<false>(*prot_, this->listOfMapKeyIntValInt);
  xfer += prot_->serializedFieldSize("listOfMapKeyStrValList", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::vector<::std::map<::std::string, ::std::vector< ::cpp2::MyStruct>>>>::serializedSize<false>(*prot_, this->listOfMapKeyStrValList);
  xfer += prot_->serializedFieldSize("mapKeySetValLong", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, ::std::map<::std::set<int32_t>, int64_t>>::serializedSize<false>(*prot_, this->mapKeySetValLong);
  xfer += prot_->serializedFieldSize("mapKeyListValLong", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, ::std::map<::std::vector<::std::string>, int32_t>>::serializedSize<false>(*prot_, this->mapKeyListValLong);
  xfer += prot_->serializedFieldSize("mapKeyMapValMap", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<int32_t, ::std::string>, ::std::map<int32_t, ::std::string>>>::serializedSize<false>(*prot_, this->mapKeyMapValMap);
  xfer += prot_->serializedFieldSize("mapKeySetValMap", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, ::std::map<::std::set<::std::vector<int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>::serializedSize<false>(*prot_, this->mapKeySetValMap);
  xfer += prot_->serializedFieldSize("NestedMaps", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<::std::map<int32_t, ::std::string>, ::std::string>, ::std::map<int32_t, ::std::string>>>::serializedSize<false>(*prot_, this->NestedMaps);
  xfer += prot_->serializedFieldSize("mapKeyIntValList", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::MyStruct>>>::serializedSize<false>(*prot_, this->mapKeyIntValList);
  xfer += prot_->serializedFieldSize("mapKeyIntValSet", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::map<int32_t, ::std::set<bool>>>::serializedSize<false>(*prot_, this->mapKeyIntValSet);
  xfer += prot_->serializedFieldSize("mapKeySetValInt", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::enumeration>, ::std::map<::std::set<bool>,  ::cpp2::MyEnum>>::serializedSize<false>(*prot_, this->mapKeySetValInt);
  xfer += prot_->serializedFieldSize("mapKeyListValSet", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, ::std::map<::std::vector<int32_t>, ::std::set<::std::map<double, ::std::string>>>>::serializedSize<false>(*prot_, this->mapKeyListValSet);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexNestedStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("ComplexNestedStruct");
  xfer += prot_->serializedFieldSize("setOfSetOfInt", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::set<::std::set<int32_t>>>::serializedSize<false>(*prot_, this->setOfSetOfInt);
  xfer += prot_->serializedFieldSize("listofListOfListOfListOfEnum", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>>>>, ::std::vector<::std::vector<::std::vector<::std::vector< ::cpp2::MyEnum>>>>>::serializedSize<false>(*prot_, this->listofListOfListOfListOfEnum);
  xfer += prot_->serializedFieldSize("listOfListOfMyStruct", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::vector<::std::vector< ::cpp2::MyStruct>>>::serializedSize<false>(*prot_, this->listOfListOfMyStruct);
  xfer += prot_->serializedFieldSize("setOfListOfListOfLong", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, ::std::set<::std::vector<::std::vector<int64_t>>>>::serializedSize<false>(*prot_, this->setOfListOfListOfLong);
  xfer += prot_->serializedFieldSize("setOfSetOfsetOfLong", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, ::std::set<::std::set<::std::set<int64_t>>>>::serializedSize<false>(*prot_, this->setOfSetOfsetOfLong);
  xfer += prot_->serializedFieldSize("mapStructListOfListOfLong", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::MyStruct>>>>::serializedSize<false>(*prot_, this->mapStructListOfListOfLong);
  xfer += prot_->serializedFieldSize("mKeyStructValInt", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::std::map< ::cpp2::MyStruct, int32_t>>::serializedSize<false>(*prot_, this->mKeyStructValInt);
  xfer += prot_->serializedFieldSize("listOfMapKeyIntValInt", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::vector<::std::map<int32_t, int32_t>>>::serializedSize<false>(*prot_, this->listOfMapKeyIntValInt);
  xfer += prot_->serializedFieldSize("listOfMapKeyStrValList", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::vector<::std::map<::std::string, ::std::vector< ::cpp2::MyStruct>>>>::serializedSize<false>(*prot_, this->listOfMapKeyStrValList);
  xfer += prot_->serializedFieldSize("mapKeySetValLong", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, ::std::map<::std::set<int32_t>, int64_t>>::serializedSize<false>(*prot_, this->mapKeySetValLong);
  xfer += prot_->serializedFieldSize("mapKeyListValLong", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, ::std::map<::std::vector<::std::string>, int32_t>>::serializedSize<false>(*prot_, this->mapKeyListValLong);
  xfer += prot_->serializedFieldSize("mapKeyMapValMap", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<int32_t, ::std::string>, ::std::map<int32_t, ::std::string>>>::serializedSize<false>(*prot_, this->mapKeyMapValMap);
  xfer += prot_->serializedFieldSize("mapKeySetValMap", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, ::std::map<::std::set<::std::vector<int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>::serializedSize<false>(*prot_, this->mapKeySetValMap);
  xfer += prot_->serializedFieldSize("NestedMaps", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<::std::map<int32_t, ::std::string>, ::std::string>, ::std::map<int32_t, ::std::string>>>::serializedSize<false>(*prot_, this->NestedMaps);
  xfer += prot_->serializedFieldSize("mapKeyIntValList", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::MyStruct>>>::serializedSize<false>(*prot_, this->mapKeyIntValList);
  xfer += prot_->serializedFieldSize("mapKeyIntValSet", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::map<int32_t, ::std::set<bool>>>::serializedSize<false>(*prot_, this->mapKeyIntValSet);
  xfer += prot_->serializedFieldSize("mapKeySetValInt", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::enumeration>, ::std::map<::std::set<bool>,  ::cpp2::MyEnum>>::serializedSize<false>(*prot_, this->mapKeySetValInt);
  xfer += prot_->serializedFieldSize("mapKeyListValSet", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, ::std::map<::std::vector<int32_t>, ::std::set<::std::map<double, ::std::string>>>>::serializedSize<false>(*prot_, this->mapKeyListValSet);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t ComplexNestedStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("ComplexNestedStruct");
  xfer += prot_->writeFieldBegin("setOfSetOfInt", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::set<::std::set<int32_t>>>::write(*prot_, this->setOfSetOfInt);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listofListOfListOfListOfEnum", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>>>>, ::std::vector<::std::vector<::std::vector<::std::vector< ::cpp2::MyEnum>>>>>::write(*prot_, this->listofListOfListOfListOfEnum);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listOfListOfMyStruct", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::vector<::std::vector< ::cpp2::MyStruct>>>::write(*prot_, this->listOfListOfMyStruct);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("setOfListOfListOfLong", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, ::std::set<::std::vector<::std::vector<int64_t>>>>::write(*prot_, this->setOfListOfListOfLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("setOfSetOfsetOfLong", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, ::std::set<::std::set<::std::set<int64_t>>>>::write(*prot_, this->setOfSetOfsetOfLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapStructListOfListOfLong", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::map<int32_t, ::std::vector<::std::vector< ::cpp2::MyStruct>>>>::write(*prot_, this->mapStructListOfListOfLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mKeyStructValInt", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::std::map< ::cpp2::MyStruct, int32_t>>::write(*prot_, this->mKeyStructValInt);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listOfMapKeyIntValInt", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::vector<::std::map<int32_t, int32_t>>>::write(*prot_, this->listOfMapKeyIntValInt);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listOfMapKeyStrValList", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>>, ::std::vector<::std::map<::std::string, ::std::vector< ::cpp2::MyStruct>>>>::write(*prot_, this->listOfMapKeyStrValList);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeySetValLong", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, ::std::map<::std::set<int32_t>, int64_t>>::write(*prot_, this->mapKeySetValLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeyListValLong", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, ::std::map<::std::vector<::std::string>, int32_t>>::write(*prot_, this->mapKeyListValLong);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeyMapValMap", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<int32_t, ::std::string>, ::std::map<int32_t, ::std::string>>>::write(*prot_, this->mapKeyMapValMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeySetValMap", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, ::apache::thrift::type_class::string>>, ::std::map<::std::set<::std::vector<int32_t>>, ::std::map<::std::vector<::std::set<::std::string>>, ::std::string>>>::write(*prot_, this->mapKeySetValMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("NestedMaps", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::string>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, ::std::map<::std::map<::std::map<int32_t, ::std::string>, ::std::string>, ::std::map<int32_t, ::std::string>>>::write(*prot_, this->NestedMaps);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeyIntValList", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::MyStruct>>>::write(*prot_, this->mapKeyIntValList);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeyIntValSet", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::std::map<int32_t, ::std::set<bool>>>::write(*prot_, this->mapKeyIntValSet);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeySetValInt", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::enumeration>, ::std::map<::std::set<bool>,  ::cpp2::MyEnum>>::write(*prot_, this->mapKeySetValInt);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapKeyListValSet", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, ::std::map<::std::vector<int32_t>, ::std::set<::std::map<double, ::std::string>>>>::write(*prot_, this->mapKeyListValSet);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void ComplexNestedStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ComplexNestedStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ComplexNestedStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ComplexNestedStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void ComplexNestedStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ComplexNestedStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ComplexNestedStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ComplexNestedStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyUnion::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyUnion>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_myEnum();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::readWithContext(*iprot, this->mutable_myEnum(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_myStruct();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::read(iprot, &this->mutable_myStruct());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 3:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_myDataItem();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::read(iprot, &this->mutable_myDataItem());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 4:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_complexNestedStruct();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::read(iprot, &this->mutable_complexNestedStruct());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 5:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64)) {
          this->set_longValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->mutable_longValue(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 6:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_intValue();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->mutable_intValue(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t MyUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::myEnum:
    {
      xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->get_myEnum());
      break;
    }
    case MyUnion::Type::myStruct:
    {
      xfer += prot_->serializedFieldSize("myStruct", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::serializedSize(prot_, &this->get_myStruct());
      break;
    }
    case MyUnion::Type::myDataItem:
    {
      xfer += prot_->serializedFieldSize("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSize(prot_, &this->get_myDataItem());
      break;
    }
    case MyUnion::Type::complexNestedStruct:
    {
      xfer += prot_->serializedFieldSize("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::serializedSize(prot_, &this->get_complexNestedStruct());
      break;
    }
    case MyUnion::Type::longValue:
    {
      xfer += prot_->serializedFieldSize("longValue", apache::thrift::protocol::T_I64, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_longValue());
      break;
    }
    case MyUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::myEnum:
    {
      xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->get_myEnum());
      break;
    }
    case MyUnion::Type::myStruct:
    {
      xfer += prot_->serializedFieldSize("myStruct", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::serializedSizeZC(prot_, &this->get_myStruct());
      break;
    }
    case MyUnion::Type::myDataItem:
    {
      xfer += prot_->serializedFieldSize("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSizeZC(prot_, &this->get_myDataItem());
      break;
    }
    case MyUnion::Type::complexNestedStruct:
    {
      xfer += prot_->serializedFieldSize("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::serializedSizeZC(prot_, &this->get_complexNestedStruct());
      break;
    }
    case MyUnion::Type::longValue:
    {
      xfer += prot_->serializedFieldSize("longValue", apache::thrift::protocol::T_I64, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->get_longValue());
      break;
    }
    case MyUnion::Type::intValue:
    {
      xfer += prot_->serializedFieldSize("intValue", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->get_intValue());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::myEnum:
    {
      xfer += prot_->writeFieldBegin("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::write(*prot_, this->get_myEnum());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::myStruct:
    {
      xfer += prot_->writeFieldBegin("myStruct", apache::thrift::protocol::T_STRUCT, 2);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::write(prot_, &this->get_myStruct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::myDataItem:
    {
      xfer += prot_->writeFieldBegin("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::write(prot_, &this->get_myDataItem());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::complexNestedStruct:
    {
      xfer += prot_->writeFieldBegin("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::write(prot_, &this->get_complexNestedStruct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::longValue:
    {
      xfer += prot_->writeFieldBegin("longValue", apache::thrift::protocol::T_I64, 5);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->get_longValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::intValue:
    {
      xfer += prot_->writeFieldBegin("intValue", apache::thrift::protocol::T_I32, 6);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->get_intValue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void defaultStruct::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongDFset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->myLongDFset, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongDF:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->myLongDF, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongDF = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_portDFset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->portDFset, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.portDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_portNum:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->portNum, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.portNum = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_myBinaryDFset:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::read(*iprot, this->myBinaryDFset);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myBinaryDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_myBinary:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::read(*iprot, this->myBinary);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myBinary = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_myByteDFSet:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->myByteDFSet, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myByteDFSet = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_BYTE))) {
    goto _loop;
  }
_readField_myByte:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::readWithContext(*iprot, this->myByte, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myByte = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_myDoubleDFset:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->myDoubleDFset, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myDoubleDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          10,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_myDoubleDFZero:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->myDoubleDFZero, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myDoubleDFZero = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          10,
          12,
          apache::thrift::protocol::T_DOUBLE))) {
    goto _loop;
  }
_readField_myDouble:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::floating_point, double>::readWithContext(*iprot, this->myDouble, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myDouble = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          12,
          13,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_field3:
  {
    _readState.beforeSubobject(iprot);
    
    this->field3 = ::std::map<int32_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::read(*iprot, this->field3);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.field3 = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          13,
          14,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_myList:
  {
    _readState.beforeSubobject(iprot);
    
    this->myList = ::std::vector< ::cpp2::MyEnum>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, ::std::vector< ::cpp2::MyEnum>>::read(*iprot, this->myList);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myList = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          14,
          15,
          apache::thrift::protocol::T_SET))) {
    goto _loop;
  }
_readField_mySet:
  {
    _readState.beforeSubobject(iprot);
    
    this->mySet = ::std::set<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::read(*iprot, this->mySet);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mySet = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          15,
          16,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_simpleStruct:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::cpp2::SimpleStruct>::read(iprot, &this->simpleStruct);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.simpleStruct = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          16,
          17,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listStructDFset:
  {
    _readState.beforeSubobject(iprot);
    
    this->listStructDFset = ::std::vector< ::cpp2::SimpleStruct>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::cpp2::SimpleStruct>>::read(*iprot, this->listStructDFset);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listStructDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          17,
          18,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_myUnion:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::read(iprot, &this->myUnion);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myUnion = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          18,
          19,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listUnionDFset:
  {
    _readState.beforeSubobject(iprot);
    
    this->listUnionDFset = ::std::vector< ::cpp2::MyUnion>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector< ::cpp2::MyUnion>>::read(*iprot, this->listUnionDFset);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listUnionDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          19,
          20,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapNestlistStructDfSet:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapNestlistStructDfSet = ::std::map<int32_t, ::std::vector< ::cpp2::SimpleStruct>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::SimpleStruct>>>::read(*iprot, this->mapNestlistStructDfSet);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapNestlistStructDfSet = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          20,
          21,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_mapJavaTypeDFset:
  {
    _readState.beforeSubobject(iprot);
    
    this->mapJavaTypeDFset = ::std::map<int64_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::read(*iprot, this->mapJavaTypeDFset);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.mapJavaTypeDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          21,
          22,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_emptyMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->emptyMap = ::std::map<int64_t, int32_t>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int32_t>>::read(*iprot, this->emptyMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.emptyMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          22,
          23,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_enumMapDFset:
  {
    _readState.beforeSubobject(iprot);
    
    this->enumMapDFset = ::std::map<::std::string, ::std::map<int32_t,  ::cpp2::MyEnum>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>>, ::std::map<::std::string, ::std::map<int32_t,  ::cpp2::MyEnum>>>::read(*iprot, this->enumMapDFset);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.enumMapDFset = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          23,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<defaultStruct>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongDFset;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongDF;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_portDFset;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_portNum;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_myBinaryDFset;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_myBinary;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_myByteDFSet;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_BYTE))) {
        goto _readField_myByte;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_myDoubleDFset;
      } else {
        goto _skip;
      }
    }
    case 10:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_myDoubleDFZero;
      } else {
        goto _skip;
      }
    }
    case 12:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_DOUBLE))) {
        goto _readField_myDouble;
      } else {
        goto _skip;
      }
    }
    case 13:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_field3;
      } else {
        goto _skip;
      }
    }
    case 14:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_myList;
      } else {
        goto _skip;
      }
    }
    case 15:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_SET))) {
        goto _readField_mySet;
      } else {
        goto _skip;
      }
    }
    case 16:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_simpleStruct;
      } else {
        goto _skip;
      }
    }
    case 17:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listStructDFset;
      } else {
        goto _skip;
      }
    }
    case 18:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_myUnion;
      } else {
        goto _skip;
      }
    }
    case 19:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listUnionDFset;
      } else {
        goto _skip;
      }
    }
    case 20:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapNestlistStructDfSet;
      } else {
        goto _skip;
      }
    }
    case 21:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_mapJavaTypeDFset;
      } else {
        goto _skip;
      }
    }
    case 22:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_emptyMap;
      } else {
        goto _skip;
      }
    }
    case 23:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_enumMapDFset;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t defaultStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("defaultStruct");
  xfer += prot_->serializedFieldSize("myLongDFset", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongDFset);
  xfer += prot_->serializedFieldSize("myLongDF", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongDF);
  xfer += prot_->serializedFieldSize("portDFset", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->portDFset);
  xfer += prot_->serializedFieldSize("portNum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->portNum);
  xfer += prot_->serializedFieldSize("myBinaryDFset", apache::thrift::protocol::T_STRING, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->myBinaryDFset);
  xfer += prot_->serializedFieldSize("myBinary", apache::thrift::protocol::T_STRING, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->myBinary);
  xfer += prot_->serializedFieldSize("myByteDFSet", apache::thrift::protocol::T_BYTE, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->myByteDFSet);
  xfer += prot_->serializedFieldSize("myByte", apache::thrift::protocol::T_BYTE, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->myByte);
  xfer += prot_->serializedFieldSize("myDoubleDFset", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->myDoubleDFset);
  xfer += prot_->serializedFieldSize("myDoubleDFZero", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->myDoubleDFZero);
  xfer += prot_->serializedFieldSize("myDouble", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->myDouble);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("myList", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, ::std::vector< ::cpp2::MyEnum>>::serializedSize<false>(*prot_, this->myList);
  xfer += prot_->serializedFieldSize("mySet", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->mySet);
  xfer += prot_->serializedFieldSize("simpleStruct", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::SimpleStruct>::serializedSize(prot_, &this->simpleStruct);
  xfer += prot_->serializedFieldSize("listStructDFset", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::cpp2::SimpleStruct>>::serializedSize<false>(*prot_, this->listStructDFset);
  xfer += prot_->serializedFieldSize("myUnion", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSize(prot_, &this->myUnion);
  xfer += prot_->serializedFieldSize("listUnionDFset", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector< ::cpp2::MyUnion>>::serializedSize<false>(*prot_, this->listUnionDFset);
  xfer += prot_->serializedFieldSize("mapNestlistStructDfSet", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::SimpleStruct>>>::serializedSize<false>(*prot_, this->mapNestlistStructDfSet);
  xfer += prot_->serializedFieldSize("mapJavaTypeDFset", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->mapJavaTypeDFset);
  xfer += prot_->serializedFieldSize("emptyMap", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->emptyMap);
  xfer += prot_->serializedFieldSize("enumMapDFset", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>>, ::std::map<::std::string, ::std::map<int32_t,  ::cpp2::MyEnum>>>::serializedSize<false>(*prot_, this->enumMapDFset);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t defaultStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("defaultStruct");
  xfer += prot_->serializedFieldSize("myLongDFset", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongDFset);
  xfer += prot_->serializedFieldSize("myLongDF", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongDF);
  xfer += prot_->serializedFieldSize("portDFset", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->portDFset);
  xfer += prot_->serializedFieldSize("portNum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->portNum);
  xfer += prot_->serializedFieldSize("myBinaryDFset", apache::thrift::protocol::T_STRING, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->myBinaryDFset);
  xfer += prot_->serializedFieldSize("myBinary", apache::thrift::protocol::T_STRING, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->myBinary);
  xfer += prot_->serializedFieldSize("myByteDFSet", apache::thrift::protocol::T_BYTE, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->myByteDFSet);
  xfer += prot_->serializedFieldSize("myByte", apache::thrift::protocol::T_BYTE, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::serializedSize<false>(*prot_, this->myByte);
  xfer += prot_->serializedFieldSize("myDoubleDFset", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->myDoubleDFset);
  xfer += prot_->serializedFieldSize("myDoubleDFZero", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->myDoubleDFZero);
  xfer += prot_->serializedFieldSize("myDouble", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->myDouble);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("myList", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, ::std::vector< ::cpp2::MyEnum>>::serializedSize<false>(*prot_, this->myList);
  xfer += prot_->serializedFieldSize("mySet", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::serializedSize<false>(*prot_, this->mySet);
  xfer += prot_->serializedFieldSize("simpleStruct", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::SimpleStruct>::serializedSizeZC(prot_, &this->simpleStruct);
  xfer += prot_->serializedFieldSize("listStructDFset", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::cpp2::SimpleStruct>>::serializedSize<false>(*prot_, this->listStructDFset);
  xfer += prot_->serializedFieldSize("myUnion", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSizeZC(prot_, &this->myUnion);
  xfer += prot_->serializedFieldSize("listUnionDFset", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector< ::cpp2::MyUnion>>::serializedSize<false>(*prot_, this->listUnionDFset);
  xfer += prot_->serializedFieldSize("mapNestlistStructDfSet", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::SimpleStruct>>>::serializedSize<false>(*prot_, this->mapNestlistStructDfSet);
  xfer += prot_->serializedFieldSize("mapJavaTypeDFset", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->mapJavaTypeDFset);
  xfer += prot_->serializedFieldSize("emptyMap", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->emptyMap);
  xfer += prot_->serializedFieldSize("enumMapDFset", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>>, ::std::map<::std::string, ::std::map<int32_t,  ::cpp2::MyEnum>>>::serializedSize<false>(*prot_, this->enumMapDFset);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t defaultStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("defaultStruct");
  xfer += prot_->writeFieldBegin("myLongDFset", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->myLongDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myLongDF", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->myLongDF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("portDFset", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->portDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("portNum", apache::thrift::protocol::T_I32, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->portNum);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myBinaryDFset", apache::thrift::protocol::T_STRING, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->myBinaryDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myBinary", apache::thrift::protocol::T_STRING, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->myBinary);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myByteDFSet", apache::thrift::protocol::T_BYTE, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->myByteDFSet);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myByte", apache::thrift::protocol::T_BYTE, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int8_t>::write(*prot_, this->myByte);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myDoubleDFset", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->myDoubleDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myDoubleDFZero", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->myDoubleDFZero);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myDouble", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->myDouble);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int32_t, ::std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myList", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::enumeration>, ::std::vector< ::cpp2::MyEnum>>::write(*prot_, this->myList);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mySet", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::std::set<::std::string>>::write(*prot_, this->mySet);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("simpleStruct", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::SimpleStruct>::write(prot_, &this->simpleStruct);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listStructDFset", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector< ::cpp2::SimpleStruct>>::write(*prot_, this->listStructDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myUnion", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::write(prot_, &this->myUnion);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listUnionDFset", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::variant>, ::std::vector< ::cpp2::MyUnion>>::write(*prot_, this->listUnionDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapNestlistStructDfSet", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, ::std::map<int32_t, ::std::vector< ::cpp2::SimpleStruct>>>::write(*prot_, this->mapNestlistStructDfSet);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("mapJavaTypeDFset", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::write(*prot_, this->mapJavaTypeDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("emptyMap", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::std::map<int64_t, int32_t>>::write(*prot_, this->emptyMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("enumMapDFset", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::enumeration>>, ::std::map<::std::string, ::std::map<int32_t,  ::cpp2::MyEnum>>>::write(*prot_, this->enumMapDFset);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void defaultStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t defaultStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t defaultStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t defaultStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void defaultStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t defaultStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t defaultStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t defaultStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyStructTypeDef::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongField:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::readWithContext(*iprot, this->myLongField, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I64))) {
    goto _loop;
  }
_readField_myLongTypeDef:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::cpp2::longTypeDef>::readWithContext(*iprot, this->myLongTypeDef, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myLongTypeDef = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_myStringField:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->myStringField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myStringField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_myStringTypedef:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::cpp2::stringTypedef>::read(*iprot, this->myStringTypedef);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myStringTypedef = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_myMapField:
  {
    _readState.beforeSubobject(iprot);
    
    this->myMapField = ::std::map<int16_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::read(*iprot, this->myMapField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myMapField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_myMapTypedef:
  {
    _readState.beforeSubobject(iprot);
    
    this->myMapTypedef =  ::cpp2::mapTypedef();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::mapTypedef>::read(*iprot, this->myMapTypedef);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myMapTypedef = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          7,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_myListField:
  {
    _readState.beforeSubobject(iprot);
    
    this->myListField = ::std::vector<double>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::read(*iprot, this->myListField);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myListField = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          7,
          8,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_myListTypedef:
  {
    _readState.beforeSubobject(iprot);
    
    this->myListTypedef =  ::cpp2::listTypedef();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>,  ::cpp2::listTypedef>::read(*iprot, this->myListTypedef);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myListTypedef = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          8,
          9,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_myMapListOfTypeDef:
  {
    _readState.beforeSubobject(iprot);
    
    this->myMapListOfTypeDef = ::std::map<int16_t, ::std::vector< ::cpp2::listTypedef>>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int16_t, ::std::vector< ::cpp2::listTypedef>>>::read(*iprot, this->myMapListOfTypeDef);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.myMapListOfTypeDef = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          9,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyStructTypeDef>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongField;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I64))) {
        goto _readField_myLongTypeDef;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_myStringField;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_myStringTypedef;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_myMapField;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_myMapTypedef;
      } else {
        goto _skip;
      }
    }
    case 7:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_myListField;
      } else {
        goto _skip;
      }
    }
    case 8:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_myListTypedef;
      } else {
        goto _skip;
      }
    }
    case 9:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_myMapListOfTypeDef;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t MyStructTypeDef::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructTypeDef");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("myLongTypeDef", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::cpp2::longTypeDef>::serializedSize<false>(*prot_, this->myLongTypeDef);
  xfer += prot_->serializedFieldSize("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->myStringField);
  xfer += prot_->serializedFieldSize("myStringTypedef", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::cpp2::stringTypedef>::serializedSize<false>(*prot_, this->myStringTypedef);
  xfer += prot_->serializedFieldSize("myMapField", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::serializedSize<false>(*prot_, this->myMapField);
  xfer += prot_->serializedFieldSize("myMapTypedef", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::mapTypedef>::serializedSize<false>(*prot_, this->myMapTypedef);
  xfer += prot_->serializedFieldSize("myListField", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::serializedSize<false>(*prot_, this->myListField);
  xfer += prot_->serializedFieldSize("myListTypedef", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>,  ::cpp2::listTypedef>::serializedSize<false>(*prot_, this->myListTypedef);
  xfer += prot_->serializedFieldSize("myMapListOfTypeDef", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int16_t, ::std::vector< ::cpp2::listTypedef>>>::serializedSize<false>(*prot_, this->myMapListOfTypeDef);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructTypeDef::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStructTypeDef");
  xfer += prot_->serializedFieldSize("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::serializedSize<false>(*prot_, this->myLongField);
  xfer += prot_->serializedFieldSize("myLongTypeDef", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::cpp2::longTypeDef>::serializedSize<false>(*prot_, this->myLongTypeDef);
  xfer += prot_->serializedFieldSize("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->myStringField);
  xfer += prot_->serializedFieldSize("myStringTypedef", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::cpp2::stringTypedef>::serializedSize<false>(*prot_, this->myStringTypedef);
  xfer += prot_->serializedFieldSize("myMapField", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::serializedSize<false>(*prot_, this->myMapField);
  xfer += prot_->serializedFieldSize("myMapTypedef", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::mapTypedef>::serializedSize<false>(*prot_, this->myMapTypedef);
  xfer += prot_->serializedFieldSize("myListField", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::serializedSize<false>(*prot_, this->myListField);
  xfer += prot_->serializedFieldSize("myListTypedef", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>,  ::cpp2::listTypedef>::serializedSize<false>(*prot_, this->myListTypedef);
  xfer += prot_->serializedFieldSize("myMapListOfTypeDef", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int16_t, ::std::vector< ::cpp2::listTypedef>>>::serializedSize<false>(*prot_, this->myMapListOfTypeDef);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStructTypeDef::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStructTypeDef");
  xfer += prot_->writeFieldBegin("myLongField", apache::thrift::protocol::T_I64, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int64_t>::write(*prot_, this->myLongField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myLongTypeDef", apache::thrift::protocol::T_I64, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral,  ::cpp2::longTypeDef>::write(*prot_, this->myLongTypeDef);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myStringField", apache::thrift::protocol::T_STRING, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->myStringField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myStringTypedef", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string,  ::cpp2::stringTypedef>::write(*prot_, this->myStringTypedef);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myMapField", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int16_t, ::std::string>>::write(*prot_, this->myMapField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myMapTypedef", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>,  ::cpp2::mapTypedef>::write(*prot_, this->myMapTypedef);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myListField", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::std::vector<double>>::write(*prot_, this->myListField);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myListTypedef", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>,  ::cpp2::listTypedef>::write(*prot_, this->myListTypedef);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("myMapListOfTypeDef", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, ::std::map<int16_t, ::std::vector< ::cpp2::listTypedef>>>::write(*prot_, this->myMapListOfTypeDef);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyStructTypeDef::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyStructTypeDef::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyStructTypeDef::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyStructTypeDef::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyStructTypeDef::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyStructTypeDef::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyStructTypeDef::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyStructTypeDef::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void MyUnionFloatFieldThrowExp::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;
  _readState.fieldId = 0;

  _readState.readStructBegin(iprot);

  _readState.readFieldBegin(iprot);
  if (_readState.atStop()) {
    this->__clear();
  } else {
    if (iprot->kUsesFieldNames()) {
      _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<MyUnionFloatFieldThrowExp>>();
    }
    switch (_readState.fieldId) {
      case 1:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32)) {
          this->set_myEnum();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::readWithContext(*iprot, this->mutable_myEnum(), _readState);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 2:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST)) {
          this->set_setFloat();
          _readState.beforeSubobject(iprot);
          this->mutable_setFloat() = ::std::vector<::std::vector<float>>();
          ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::std::vector<::std::vector<float>>>::read(*iprot, this->mutable_setFloat());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 3:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_myDataItem();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::read(iprot, &this->mutable_myDataItem());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      case 4:
      {
        if (_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT)) {
          this->set_complexNestedStruct();
          _readState.beforeSubobject(iprot);
          ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::read(iprot, &this->mutable_complexNestedStruct());
          _readState.afterSubobject(iprot);
        } else {
          _readState.skip(iprot);
        }
        break;
      }
      default:
      {
        _readState.skip(iprot);
        break;
      }
    }
    _readState.readFieldEnd(iprot);
    _readState.readFieldBegin(iprot);
    if (UNLIKELY(!_readState.atStop())) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  _readState.readStructEnd(iprot);
}
template <class Protocol_>
uint32_t MyUnionFloatFieldThrowExp::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnionFloatFieldThrowExp");
  switch(this->getType()) {
    case MyUnionFloatFieldThrowExp::Type::myEnum:
    {
      xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->get_myEnum());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::setFloat:
    {
      xfer += prot_->serializedFieldSize("setFloat", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::std::vector<::std::vector<float>>>::serializedSize<false>(*prot_, this->get_setFloat());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::myDataItem:
    {
      xfer += prot_->serializedFieldSize("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSize(prot_, &this->get_myDataItem());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::complexNestedStruct:
    {
      xfer += prot_->serializedFieldSize("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::serializedSize(prot_, &this->get_complexNestedStruct());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnionFloatFieldThrowExp");
  switch(this->getType()) {
    case MyUnionFloatFieldThrowExp::Type::myEnum:
    {
      xfer += prot_->serializedFieldSize("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->get_myEnum());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::setFloat:
    {
      xfer += prot_->serializedFieldSize("setFloat", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::std::vector<::std::vector<float>>>::serializedSize<false>(*prot_, this->get_setFloat());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::myDataItem:
    {
      xfer += prot_->serializedFieldSize("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::serializedSizeZC(prot_, &this->get_myDataItem());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::complexNestedStruct:
    {
      xfer += prot_->serializedFieldSize("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::serializedSizeZC(prot_, &this->get_complexNestedStruct());
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnionFloatFieldThrowExp::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyUnionFloatFieldThrowExp");
  switch(this->getType()) {
    case MyUnionFloatFieldThrowExp::Type::myEnum:
    {
      xfer += prot_->writeFieldBegin("myEnum", apache::thrift::protocol::T_I32, 1);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::write(*prot_, this->get_myEnum());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::setFloat:
    {
      xfer += prot_->writeFieldBegin("setFloat", apache::thrift::protocol::T_LIST, 2);
      xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::std::vector<::std::vector<float>>>::write(*prot_, this->get_setFloat());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::myDataItem:
    {
      xfer += prot_->writeFieldBegin("myDataItem", apache::thrift::protocol::T_STRUCT, 3);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyDataItem>::write(prot_, &this->get_myDataItem());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::complexNestedStruct:
    {
      xfer += prot_->writeFieldBegin("complexNestedStruct", apache::thrift::protocol::T_STRUCT, 4);
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::ComplexNestedStruct>::write(prot_, &this->get_complexNestedStruct());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnionFloatFieldThrowExp::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void MyUnionFloatFieldThrowExp::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t MyUnionFloatFieldThrowExp::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t MyUnionFloatFieldThrowExp::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void MyUnionFloatFieldThrowExp::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t MyUnionFloatFieldThrowExp::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t MyUnionFloatFieldThrowExp::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t MyUnionFloatFieldThrowExp::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void TypeRemapped::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_lsMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->lsMap = ::std::map<int64_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::read(*iprot, this->lsMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lsMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_ioMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->ioMap = ::std::map<int32_t,  ::cpp2::FMap>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::map<int32_t,  ::cpp2::FMap>>::read(*iprot, this->ioMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.ioMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_BigInteger:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->BigInteger, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.BigInteger = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_binaryTestBuffer:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::read(*iprot, this->binaryTestBuffer);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.binaryTestBuffer = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<TypeRemapped>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_lsMap;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_ioMap;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_BigInteger;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_binaryTestBuffer;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t TypeRemapped::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TypeRemapped");
  xfer += prot_->serializedFieldSize("lsMap", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->lsMap);
  xfer += prot_->serializedFieldSize("ioMap", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::map<int32_t,  ::cpp2::FMap>>::serializedSize<false>(*prot_, this->ioMap);
  xfer += prot_->serializedFieldSize("BigInteger", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->BigInteger);
  xfer += prot_->serializedFieldSize("binaryTestBuffer", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<false>(*prot_, this->binaryTestBuffer);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TypeRemapped::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("TypeRemapped");
  xfer += prot_->serializedFieldSize("lsMap", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->lsMap);
  xfer += prot_->serializedFieldSize("ioMap", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::map<int32_t,  ::cpp2::FMap>>::serializedSize<false>(*prot_, this->ioMap);
  xfer += prot_->serializedFieldSize("BigInteger", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->BigInteger);
  xfer += prot_->serializedFieldSize("binaryTestBuffer", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::serializedSize<true>(*prot_, this->binaryTestBuffer);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t TypeRemapped::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("TypeRemapped");
  xfer += prot_->writeFieldBegin("lsMap", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::write(*prot_, this->lsMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ioMap", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::std::map<int32_t,  ::cpp2::FMap>>::write(*prot_, this->ioMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("BigInteger", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->BigInteger);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("binaryTestBuffer", apache::thrift::protocol::T_STRING, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::binary, ::std::string>::write(*prot_, this->binaryTestBuffer);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void TypeRemapped::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t TypeRemapped::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t TypeRemapped::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t TypeRemapped::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void TypeRemapped::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t TypeRemapped::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t TypeRemapped::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t TypeRemapped::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void emptyXcep::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<emptyXcep>>();
  }

  switch (_readState.fieldId) {
    default:
    {
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t emptyXcep::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("emptyXcep");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t emptyXcep::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("emptyXcep");
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t emptyXcep::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("emptyXcep");
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void emptyXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t emptyXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t emptyXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t emptyXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void emptyXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t emptyXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t emptyXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t emptyXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void reqXcep::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->message);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_errorCode:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->errorCode, _readState);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<reqXcep>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_errorCode;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t reqXcep::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("reqXcep");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  xfer += prot_->serializedFieldSize("errorCode", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->errorCode);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t reqXcep::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("reqXcep");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  xfer += prot_->serializedFieldSize("errorCode", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->errorCode);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t reqXcep::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("reqXcep");
  xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->message);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("errorCode", apache::thrift::protocol::T_I32, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->errorCode);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void reqXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t reqXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t reqXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t reqXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void reqXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t reqXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t reqXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t reqXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void optXcep::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->message);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.message = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_errorCode:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::readWithContext(*iprot, this->errorCode, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.errorCode = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<optXcep>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_errorCode;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t optXcep::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("optXcep");
  if (this->message_ref().has_value()) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  }
  if (this->errorCode_ref().has_value()) {
    xfer += prot_->serializedFieldSize("errorCode", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->errorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t optXcep::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("optXcep");
  if (this->message_ref().has_value()) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  }
  if (this->errorCode_ref().has_value()) {
    xfer += prot_->serializedFieldSize("errorCode", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::serializedSize<false>(*prot_, this->errorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t optXcep::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("optXcep");
  if (this->message_ref().has_value()) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->errorCode_ref().has_value()) {
    xfer += prot_->writeFieldBegin("errorCode", apache::thrift::protocol::T_I32, 2);
    xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::integral, int32_t>::write(*prot_, this->errorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void optXcep::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t optXcep::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t optXcep::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t optXcep::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void optXcep::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t optXcep::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t optXcep::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t optXcep::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace cpp2 {

template <class Protocol_>
void complexException::readNoXfer(Protocol_* iprot) {
  apache::thrift::detail::ProtocolReaderStructReadState<Protocol_> _readState;

  _readState.readStructBegin(iprot);

  using apache::thrift::TProtocolException;


  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          0,
          1,
          apache::thrift::protocol::T_STRING))) {
    goto _loop;
  }
_readField_message:
  {
    
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::read(*iprot, this->message);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.message = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          1,
          2,
          apache::thrift::protocol::T_LIST))) {
    goto _loop;
  }
_readField_listStrings:
  {
    _readState.beforeSubobject(iprot);
    
    this->listStrings = ::std::vector<::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::read(*iprot, this->listStrings);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.listStrings = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          2,
          3,
          apache::thrift::protocol::T_I32))) {
    goto _loop;
  }
_readField_errorEnum:
  {
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::readWithContext(*iprot, this->errorEnum, _readState);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.errorEnum = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          3,
          4,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_unionError:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::read(iprot, &this->unionError);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.unionError = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          4,
          5,
          apache::thrift::protocol::T_STRUCT))) {
    goto _loop;
  }
_readField_structError:
  {
    _readState.beforeSubobject(iprot);
    ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::read(iprot, &this->structError);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.structError = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          5,
          6,
          apache::thrift::protocol::T_MAP))) {
    goto _loop;
  }
_readField_lsMap:
  {
    _readState.beforeSubobject(iprot);
    
    this->lsMap = ::std::map<int64_t, ::std::string>();
    ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::read(*iprot, this->lsMap);
    THRIFT_IGNORE_ISSET_USE_WARNING_BEGIN
    this->__isset.lsMap = true;
    THRIFT_IGNORE_ISSET_USE_WARNING_END
    _readState.afterSubobject(iprot);
  }

  if (UNLIKELY(!_readState.advanceToNextField(
          iprot,
          6,
          0,
          apache::thrift::protocol::T_STOP))) {
    goto _loop;
  }

_end:
  _readState.readStructEnd(iprot);

  return;

_loop:
  _readState.afterAdvanceFailure(iprot);
  if (_readState.atStop()) {
    goto _end;
  }
  if (iprot->kUsesFieldNames()) {
    _readState.template fillFieldTraitsFromName<apache::thrift::detail::TccStructTraits<complexException>>();
  }

  switch (_readState.fieldId) {
    case 1:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRING))) {
        goto _readField_message;
      } else {
        goto _skip;
      }
    }
    case 2:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_LIST))) {
        goto _readField_listStrings;
      } else {
        goto _skip;
      }
    }
    case 3:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_I32))) {
        goto _readField_errorEnum;
      } else {
        goto _skip;
      }
    }
    case 4:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_unionError;
      } else {
        goto _skip;
      }
    }
    case 5:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_STRUCT))) {
        goto _readField_structError;
      } else {
        goto _skip;
      }
    }
    case 6:
    {
      if (LIKELY(_readState.isCompatibleWithType(iprot, apache::thrift::protocol::T_MAP))) {
        goto _readField_lsMap;
      } else {
        goto _skip;
      }
    }
    default:
    {
_skip:
      _readState.skip(iprot);
      _readState.readFieldEnd(iprot);
      _readState.readFieldBeginNoInline(iprot);
      goto _loop;
    }
  }
}

template <class Protocol_>
uint32_t complexException::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("complexException");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  xfer += prot_->serializedFieldSize("listStrings", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->listStrings);
  xfer += prot_->serializedFieldSize("errorEnum", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->errorEnum);
  if (this->unionError_ref().has_value()) {
    xfer += prot_->serializedFieldSize("unionError", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSize(prot_, &this->unionError);
  }
  xfer += prot_->serializedFieldSize("structError", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::serializedSize(prot_, &this->structError);
  xfer += prot_->serializedFieldSize("lsMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->lsMap);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t complexException::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("complexException");
  xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::serializedSize<false>(*prot_, this->message);
  xfer += prot_->serializedFieldSize("listStrings", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::serializedSize<false>(*prot_, this->listStrings);
  xfer += prot_->serializedFieldSize("errorEnum", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::serializedSize<false>(*prot_, this->errorEnum);
  if (this->unionError_ref().has_value()) {
    xfer += prot_->serializedFieldSize("unionError", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSizeZC(prot_, &this->unionError);
  }
  xfer += prot_->serializedFieldSize("structError", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::serializedSizeZC(prot_, &this->structError);
  xfer += prot_->serializedFieldSize("lsMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::serializedSize<false>(*prot_, this->lsMap);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t complexException::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("complexException");
  xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::string, ::std::string>::write(*prot_, this->message);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("listStrings", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::std::vector<::std::string>>::write(*prot_, this->listStrings);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("errorEnum", apache::thrift::protocol::T_I32, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::enumeration,  ::cpp2::MyEnum>::write(*prot_, this->errorEnum);
  xfer += prot_->writeFieldEnd();
  if (this->unionError_ref().has_value()) {
    xfer += prot_->writeFieldBegin("unionError", apache::thrift::protocol::T_STRUCT, 4);
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::write(prot_, &this->unionError);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("structError", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyStruct>::write(prot_, &this->structError);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lsMap", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, ::std::map<int64_t, ::std::string>>::write(*prot_, this->lsMap);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

extern template void complexException::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t complexException::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t complexException::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t complexException::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template void complexException::readNoXfer<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t complexException::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t complexException::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t complexException::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
