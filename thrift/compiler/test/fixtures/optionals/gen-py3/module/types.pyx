#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins

cimport module.types_reflection as _types_reflection


cdef __EnumData __Animal_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cAnimal](), Animal)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __AnimalMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __Animal_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __Animal_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __Animal_enum_data.get_all_names()

    def __len__(cls):
        return __Animal_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class Animal(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __Animal_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> Animal, <PyTypeObject*> __AnimalMeta)



@__cython.auto_pickle(False)
cdef class Color(thrift.py3.types.Struct):

    def __init__(
        Color self, *,
        red=None,
        green=None,
        blue=None,
        alpha=None
    ):
        if red is not None:
            if not isinstance(red, (float, int)):
                raise TypeError(f'red is not a { float !r}.')

        if green is not None:
            if not isinstance(green, (float, int)):
                raise TypeError(f'green is not a { float !r}.')

        if blue is not None:
            if not isinstance(blue, (float, int)):
                raise TypeError(f'blue is not a { float !r}.')

        if alpha is not None:
            if not isinstance(alpha, (float, int)):
                raise TypeError(f'alpha is not a { float !r}.')

        self._cpp_obj = __fbthrift_move(Color._make_instance(
          NULL,
          NULL,
          red,
          green,
          blue,
          alpha,
        ))

    def __call__(
        Color self,
        red=__NOTSET,
        green=__NOTSET,
        blue=__NOTSET,
        alpha=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[4] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if red is ___NOTSET:
            __isNOTSET[0] = True
            red = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if green is ___NOTSET:
            __isNOTSET[1] = True
            green = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if blue is ___NOTSET:
            __isNOTSET[2] = True
            blue = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if alpha is ___NOTSET:
            __isNOTSET[3] = True
            alpha = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if red is not None:
            if not isinstance(red, (float, int)):
                raise TypeError(f'red is not a { float !r}.')

        if green is not None:
            if not isinstance(green, (float, int)):
                raise TypeError(f'green is not a { float !r}.')

        if blue is not None:
            if not isinstance(blue, (float, int)):
                raise TypeError(f'blue is not a { float !r}.')

        if alpha is not None:
            if not isinstance(alpha, (float, int)):
                raise TypeError(f'alpha is not a { float !r}.')

        __fbthrift_inst = <Color>Color.__new__(Color)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Color._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          red,
          green,
          blue,
          alpha,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cColor] _make_instance(
        cColor* base_instance,
        bint* __isNOTSET,
        object red ,
        object green ,
        object blue ,
        object alpha 
    ) except *:
        cdef unique_ptr[cColor] c_inst
        if base_instance:
            c_inst = make_unique[cColor](deref(base_instance))
        else:
            c_inst = make_unique[cColor]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and red is None:
                deref(c_inst).red_ref().assign(default_inst[cColor]().red_ref().value())
                deref(c_inst).__isset.red = False
                pass

            if not __isNOTSET[1] and green is None:
                deref(c_inst).green_ref().assign(default_inst[cColor]().green_ref().value())
                deref(c_inst).__isset.green = False
                pass

            if not __isNOTSET[2] and blue is None:
                deref(c_inst).blue_ref().assign(default_inst[cColor]().blue_ref().value())
                deref(c_inst).__isset.blue = False
                pass

            if not __isNOTSET[3] and alpha is None:
                deref(c_inst).alpha_ref().assign(default_inst[cColor]().alpha_ref().value())
                deref(c_inst).__isset.alpha = False
                pass

        if red is not None:
            deref(c_inst).red_ref().assign(red)
            deref(c_inst).__isset.red = True
        if green is not None:
            deref(c_inst).green_ref().assign(green)
            deref(c_inst).__isset.green = True
        if blue is not None:
            deref(c_inst).blue_ref().assign(blue)
            deref(c_inst).__isset.blue = True
        if alpha is not None:
            deref(c_inst).alpha_ref().assign(alpha)
            deref(c_inst).__isset.alpha = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Color", {
          "red": cpp_obj.red_ref().has_value(),
          "green": cpp_obj.green_ref().has_value(),
          "blue": cpp_obj.blue_ref().has_value(),
          "alpha": cpp_obj.alpha_ref().has_value(),
        })

    def __iter__(self):
        yield 'red', self.red
        yield 'green', self.green
        yield 'blue', self.blue
        yield 'alpha', self.alpha

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cColor] cpp_obj):
        __fbthrift_inst = <Color>Color.__new__(Color)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def red(self):

        return deref(self._cpp_obj).red_ref().value()

    @property
    def green(self):

        return deref(self._cpp_obj).green_ref().value()

    @property
    def blue(self):

        return deref(self._cpp_obj).blue_ref().value()

    @property
    def alpha(self):

        return deref(self._cpp_obj).alpha_ref().value()


    def __hash__(Color self):
        if not self.__hash:
            self.__hash = hash((
            self.red,
            self.green,
            self.blue,
            self.alpha,
            ))
        return self.__hash

    def __repr__(Color self):
        return f'Color(red={repr(self.red)}, green={repr(self.green)}, blue={repr(self.blue)}, alpha={repr(self.alpha)})'
    def __copy__(Color self):
        cdef shared_ptr[cColor] cpp_obj = make_shared[cColor](
            deref(self._cpp_obj)
        )
        return Color.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Color) and
                isinstance(other, Color)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cColor* cself = (<Color>self)._cpp_obj.get()
        cdef cColor* cother = (<Color>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Color()

    cdef __iobuf.IOBuf _serialize(Color self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cColor](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Color self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cColor]()
        needed = serializer.cdeserialize[cColor](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Color, serialize(self)))


@__cython.auto_pickle(False)
cdef class Vehicle(thrift.py3.types.Struct):

    def __init__(
        Vehicle self, *,
        Color color=None,
        str licensePlate=None,
        str description=None,
        str name=None,
        pbool hasAC=None
    ):
        self._cpp_obj = __fbthrift_move(Vehicle._make_instance(
          NULL,
          NULL,
          color,
          licensePlate,
          description,
          name,
          hasAC,
        ))

    def __call__(
        Vehicle self,
        color=__NOTSET,
        licensePlate=__NOTSET,
        description=__NOTSET,
        name=__NOTSET,
        hasAC=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[5] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if color is ___NOTSET:
            __isNOTSET[0] = True
            color = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if licensePlate is ___NOTSET:
            __isNOTSET[1] = True
            licensePlate = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if description is ___NOTSET:
            __isNOTSET[2] = True
            description = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if name is ___NOTSET:
            __isNOTSET[3] = True
            name = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True

        if hasAC is ___NOTSET:
            __isNOTSET[4] = True
            hasAC = None
        else:
            __isNOTSET[4] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if color is not None:
            if not isinstance(color, Color):
                raise TypeError(f'color is not a { Color !r}.')

        if licensePlate is not None:
            if not isinstance(licensePlate, str):
                raise TypeError(f'licensePlate is not a { str !r}.')

        if description is not None:
            if not isinstance(description, str):
                raise TypeError(f'description is not a { str !r}.')

        if name is not None:
            if not isinstance(name, str):
                raise TypeError(f'name is not a { str !r}.')

        if hasAC is not None:
            if not isinstance(hasAC, bool):
                raise TypeError(f'hasAC is not a { bool !r}.')

        __fbthrift_inst = <Vehicle>Vehicle.__new__(Vehicle)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Vehicle._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          color,
          licensePlate,
          description,
          name,
          hasAC,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cVehicle] _make_instance(
        cVehicle* base_instance,
        bint* __isNOTSET,
        Color color ,
        str licensePlate ,
        str description ,
        str name ,
        pbool hasAC 
    ) except *:
        cdef unique_ptr[cVehicle] c_inst
        if base_instance:
            c_inst = make_unique[cVehicle](deref(base_instance))
        else:
            c_inst = make_unique[cVehicle]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and color is None:
                deref(c_inst).color_ref().assign(default_inst[cVehicle]().color_ref().value())
                deref(c_inst).__isset.color = False
                pass

            if not __isNOTSET[1] and licensePlate is None:
                deref(c_inst).__isset.licensePlate = False
                pass

            if not __isNOTSET[2] and description is None:
                deref(c_inst).__isset.description = False
                pass

            if not __isNOTSET[3] and name is None:
                deref(c_inst).__isset.name = False
                pass

            if not __isNOTSET[4] and hasAC is None:
                deref(c_inst).hasAC_ref().assign(default_inst[cVehicle]().hasAC_ref().value_unchecked())
                deref(c_inst).__isset.hasAC = False
                pass

        if color is not None:
            deref(c_inst).color_ref().assign(deref((<Color?> color)._cpp_obj))
            deref(c_inst).__isset.color = True
        if licensePlate is not None:
            deref(c_inst).licensePlate_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(licensePlate.encode('utf-8'))))
            deref(c_inst).__isset.licensePlate = True
        if description is not None:
            deref(c_inst).description_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(description.encode('utf-8'))))
            deref(c_inst).__isset.description = True
        if name is not None:
            deref(c_inst).name_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(name.encode('utf-8'))))
            deref(c_inst).__isset.name = True
        if hasAC is not None:
            deref(c_inst).hasAC_ref().assign(hasAC)
            deref(c_inst).__isset.hasAC = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Vehicle", {
          "color": cpp_obj.color_ref().has_value(),
          "licensePlate": cpp_obj.licensePlate_ref().has_value(),
          "description": cpp_obj.description_ref().has_value(),
          "name": cpp_obj.name_ref().has_value(),
          "hasAC": cpp_obj.hasAC_ref().has_value(),
        })

    def __iter__(self):
        yield 'color', self.color
        yield 'licensePlate', self.licensePlate
        yield 'description', self.description
        yield 'name', self.name
        yield 'hasAC', self.hasAC

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cVehicle] cpp_obj):
        __fbthrift_inst = <Vehicle>Vehicle.__new__(Vehicle)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def color(self):

        if self.__field_color is None:
            self.__field_color = Color.create(reference_shared_ptr_color(self._cpp_obj, deref(self._cpp_obj).color_ref().value()))
        return self.__field_color

    @property
    def licensePlate(self):
        if not deref(self._cpp_obj).__isset.licensePlate:
            return None

        return (<bytes>deref(self._cpp_obj).licensePlate_ref().value_unchecked()).decode('UTF-8')

    @property
    def description(self):
        if not deref(self._cpp_obj).__isset.description:
            return None

        return (<bytes>deref(self._cpp_obj).description_ref().value_unchecked()).decode('UTF-8')

    @property
    def name(self):
        if not deref(self._cpp_obj).__isset.name:
            return None

        return (<bytes>deref(self._cpp_obj).name_ref().value_unchecked()).decode('UTF-8')

    @property
    def hasAC(self):

        return <pbool> deref(self._cpp_obj).hasAC_ref().value_unchecked()


    def __hash__(Vehicle self):
        if not self.__hash:
            self.__hash = hash((
            self.color,
            self.licensePlate,
            self.description,
            self.name,
            self.hasAC,
            ))
        return self.__hash

    def __repr__(Vehicle self):
        return f'Vehicle(color={repr(self.color)}, licensePlate={repr(self.licensePlate)}, description={repr(self.description)}, name={repr(self.name)}, hasAC={repr(self.hasAC)})'
    def __copy__(Vehicle self):
        cdef shared_ptr[cVehicle] cpp_obj = make_shared[cVehicle](
            deref(self._cpp_obj)
        )
        return Vehicle.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Vehicle) and
                isinstance(other, Vehicle)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cVehicle* cself = (<Vehicle>self)._cpp_obj.get()
        cdef cVehicle* cother = (<Vehicle>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Vehicle()

    cdef __iobuf.IOBuf _serialize(Vehicle self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cVehicle](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Vehicle self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cVehicle]()
        needed = serializer.cdeserialize[cVehicle](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Vehicle, serialize(self)))


@__cython.auto_pickle(False)
cdef class Person(thrift.py3.types.Struct):

    def __init__(
        Person self, *,
        id=None,
        str name=None,
        age=None,
        str address=None,
        Color favoriteColor=None,
        friends=None,
        bestFriend=None,
        petNames=None,
        Animal afraidOfAnimal=None,
        vehicles=None
    ):
        if id is not None:
            if not isinstance(id, int):
                raise TypeError(f'id is not a { int !r}.')
            id = <cint64_t> id

        if age is not None:
            if not isinstance(age, int):
                raise TypeError(f'age is not a { int !r}.')
            age = <cint16_t> age

        if bestFriend is not None:
            if not isinstance(bestFriend, int):
                raise TypeError(f'bestFriend is not a { int !r}.')
            bestFriend = <cint64_t> bestFriend

        self._cpp_obj = __fbthrift_move(Person._make_instance(
          NULL,
          NULL,
          id,
          name,
          age,
          address,
          favoriteColor,
          friends,
          bestFriend,
          petNames,
          afraidOfAnimal,
          vehicles,
        ))

    def __call__(
        Person self,
        id=__NOTSET,
        name=__NOTSET,
        age=__NOTSET,
        address=__NOTSET,
        favoriteColor=__NOTSET,
        friends=__NOTSET,
        bestFriend=__NOTSET,
        petNames=__NOTSET,
        afraidOfAnimal=__NOTSET,
        vehicles=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[10] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if id is ___NOTSET:
            __isNOTSET[0] = True
            id = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if name is ___NOTSET:
            __isNOTSET[1] = True
            name = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if age is ___NOTSET:
            __isNOTSET[2] = True
            age = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if address is ___NOTSET:
            __isNOTSET[3] = True
            address = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True

        if favoriteColor is ___NOTSET:
            __isNOTSET[4] = True
            favoriteColor = None
        else:
            __isNOTSET[4] = False
            __fbthrift_changed = True

        if friends is ___NOTSET:
            __isNOTSET[5] = True
            friends = None
        else:
            __isNOTSET[5] = False
            __fbthrift_changed = True

        if bestFriend is ___NOTSET:
            __isNOTSET[6] = True
            bestFriend = None
        else:
            __isNOTSET[6] = False
            __fbthrift_changed = True

        if petNames is ___NOTSET:
            __isNOTSET[7] = True
            petNames = None
        else:
            __isNOTSET[7] = False
            __fbthrift_changed = True

        if afraidOfAnimal is ___NOTSET:
            __isNOTSET[8] = True
            afraidOfAnimal = None
        else:
            __isNOTSET[8] = False
            __fbthrift_changed = True

        if vehicles is ___NOTSET:
            __isNOTSET[9] = True
            vehicles = None
        else:
            __isNOTSET[9] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if id is not None:
            if not isinstance(id, int):
                raise TypeError(f'id is not a { int !r}.')
            id = <cint64_t> id

        if name is not None:
            if not isinstance(name, str):
                raise TypeError(f'name is not a { str !r}.')

        if age is not None:
            if not isinstance(age, int):
                raise TypeError(f'age is not a { int !r}.')
            age = <cint16_t> age

        if address is not None:
            if not isinstance(address, str):
                raise TypeError(f'address is not a { str !r}.')

        if favoriteColor is not None:
            if not isinstance(favoriteColor, Color):
                raise TypeError(f'favoriteColor is not a { Color !r}.')

        if bestFriend is not None:
            if not isinstance(bestFriend, int):
                raise TypeError(f'bestFriend is not a { int !r}.')
            bestFriend = <cint64_t> bestFriend

        if afraidOfAnimal is not None:
            if not isinstance(afraidOfAnimal, Animal):
                raise TypeError(f'field afraidOfAnimal value: { afraidOfAnimal !r} is not of the enum type { Animal }.')

        __fbthrift_inst = <Person>Person.__new__(Person)
        __fbthrift_inst._cpp_obj = __fbthrift_move(Person._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          id,
          name,
          age,
          address,
          favoriteColor,
          friends,
          bestFriend,
          petNames,
          afraidOfAnimal,
          vehicles,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cPerson] _make_instance(
        cPerson* base_instance,
        bint* __isNOTSET,
        object id ,
        str name ,
        object age ,
        str address ,
        Color favoriteColor ,
        object friends ,
        object bestFriend ,
        object petNames ,
        Animal afraidOfAnimal ,
        object vehicles 
    ) except *:
        cdef unique_ptr[cPerson] c_inst
        if base_instance:
            c_inst = make_unique[cPerson](deref(base_instance))
        else:
            c_inst = make_unique[cPerson]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and id is None:
                deref(c_inst).id_ref().assign(default_inst[cPerson]().id_ref().value())
                deref(c_inst).__isset.id = False
                pass

            if not __isNOTSET[1] and name is None:
                deref(c_inst).name_ref().assign(default_inst[cPerson]().name_ref().value())
                deref(c_inst).__isset.name = False
                pass

            if not __isNOTSET[2] and age is None:
                deref(c_inst).__isset.age = False
                pass

            if not __isNOTSET[3] and address is None:
                deref(c_inst).__isset.address = False
                pass

            if not __isNOTSET[4] and favoriteColor is None:
                deref(c_inst).__isset.favoriteColor = False
                pass

            if not __isNOTSET[5] and friends is None:
                deref(c_inst).__isset.friends = False
                pass

            if not __isNOTSET[6] and bestFriend is None:
                deref(c_inst).__isset.bestFriend = False
                pass

            if not __isNOTSET[7] and petNames is None:
                deref(c_inst).__isset.petNames = False
                pass

            if not __isNOTSET[8] and afraidOfAnimal is None:
                deref(c_inst).__isset.afraidOfAnimal = False
                pass

            if not __isNOTSET[9] and vehicles is None:
                deref(c_inst).__isset.vehicles = False
                pass

        if id is not None:
            deref(c_inst).id_ref().assign(id)
            deref(c_inst).__isset.id = True
        if name is not None:
            deref(c_inst).name_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(name.encode('utf-8'))))
            deref(c_inst).__isset.name = True
        if age is not None:
            deref(c_inst).age_ref().assign(age)
            deref(c_inst).__isset.age = True
        if address is not None:
            deref(c_inst).address_ref().assign(thrift.py3.types.move(thrift.py3.types.bytes_to_string(address.encode('utf-8'))))
            deref(c_inst).__isset.address = True
        if favoriteColor is not None:
            deref(c_inst).favoriteColor_ref().assign(deref((<Color?> favoriteColor)._cpp_obj))
            deref(c_inst).__isset.favoriteColor = True
        if friends is not None:
            deref(c_inst).friends_ref().assign(deref(Set__i64(friends)._cpp_obj))
            deref(c_inst).__isset.friends = True
        if bestFriend is not None:
            deref(c_inst).bestFriend_ref().assign(bestFriend)
            deref(c_inst).__isset.bestFriend = True
        if petNames is not None:
            deref(c_inst).petNames_ref().assign(deref(Map__Animal_string(petNames)._cpp_obj))
            deref(c_inst).__isset.petNames = True
        if afraidOfAnimal is not None:
            deref(c_inst).afraidOfAnimal_ref().assign(<cAnimal><int>afraidOfAnimal)
            deref(c_inst).__isset.afraidOfAnimal = True
        if vehicles is not None:
            deref(c_inst).vehicles_ref().assign(deref(List__Vehicle(vehicles)._cpp_obj))
            deref(c_inst).__isset.vehicles = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Person", {
          "id": cpp_obj.id_ref().has_value(),
          "name": cpp_obj.name_ref().has_value(),
          "age": cpp_obj.age_ref().has_value(),
          "address": cpp_obj.address_ref().has_value(),
          "favoriteColor": cpp_obj.favoriteColor_ref().has_value(),
          "friends": cpp_obj.friends_ref().has_value(),
          "bestFriend": cpp_obj.bestFriend_ref().has_value(),
          "petNames": cpp_obj.petNames_ref().has_value(),
          "afraidOfAnimal": cpp_obj.afraidOfAnimal_ref().has_value(),
          "vehicles": cpp_obj.vehicles_ref().has_value(),
        })

    def __iter__(self):
        yield 'id', self.id
        yield 'name', self.name
        yield 'age', self.age
        yield 'address', self.address
        yield 'favoriteColor', self.favoriteColor
        yield 'friends', self.friends
        yield 'bestFriend', self.bestFriend
        yield 'petNames', self.petNames
        yield 'afraidOfAnimal', self.afraidOfAnimal
        yield 'vehicles', self.vehicles

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cPerson] cpp_obj):
        __fbthrift_inst = <Person>Person.__new__(Person)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def id(self):

        return deref(self._cpp_obj).id_ref().value()

    @property
    def name(self):

        return (<bytes>deref(self._cpp_obj).name_ref().value()).decode('UTF-8')

    @property
    def age(self):
        if not deref(self._cpp_obj).__isset.age:
            return None

        return deref(self._cpp_obj).age_ref().value_unchecked()

    @property
    def address(self):
        if not deref(self._cpp_obj).__isset.address:
            return None

        return (<bytes>deref(self._cpp_obj).address_ref().value_unchecked()).decode('UTF-8')

    @property
    def favoriteColor(self):
        if not deref(self._cpp_obj).__isset.favoriteColor:
            return None

        if self.__field_favoriteColor is None:
            self.__field_favoriteColor = Color.create(reference_shared_ptr_favoriteColor(self._cpp_obj, deref(self._cpp_obj).favoriteColor_ref().value_unchecked()))
        return self.__field_favoriteColor

    @property
    def friends(self):
        if not deref(self._cpp_obj).__isset.friends:
            return None

        if self.__field_friends is None:
            self.__field_friends = Set__i64.create(reference_shared_ptr_friends(self._cpp_obj, deref(self._cpp_obj).friends_ref().value_unchecked()))
        return self.__field_friends

    @property
    def bestFriend(self):
        if not deref(self._cpp_obj).__isset.bestFriend:
            return None

        return deref(self._cpp_obj).bestFriend_ref().value_unchecked()

    @property
    def petNames(self):
        if not deref(self._cpp_obj).__isset.petNames:
            return None

        if self.__field_petNames is None:
            self.__field_petNames = Map__Animal_string.create(reference_shared_ptr_petNames(self._cpp_obj, deref(self._cpp_obj).petNames_ref().value_unchecked()))
        return self.__field_petNames

    @property
    def afraidOfAnimal(self):
        if not deref(self._cpp_obj).__isset.afraidOfAnimal:
            return None

        return translate_cpp_enum_to_python(Animal, <int>(deref(self._cpp_obj).afraidOfAnimal_ref().value_unchecked()))

    @property
    def vehicles(self):
        if not deref(self._cpp_obj).__isset.vehicles:
            return None

        if self.__field_vehicles is None:
            self.__field_vehicles = List__Vehicle.create(reference_shared_ptr_vehicles(self._cpp_obj, deref(self._cpp_obj).vehicles_ref().value_unchecked()))
        return self.__field_vehicles


    def __hash__(Person self):
        if not self.__hash:
            self.__hash = hash((
            self.id,
            self.name,
            self.age,
            self.address,
            self.favoriteColor,
            self.friends,
            self.bestFriend,
            self.petNames,
            self.afraidOfAnimal,
            self.vehicles,
            ))
        return self.__hash

    def __repr__(Person self):
        return f'Person(id={repr(self.id)}, name={repr(self.name)}, age={repr(self.age)}, address={repr(self.address)}, favoriteColor={repr(self.favoriteColor)}, friends={repr(self.friends)}, bestFriend={repr(self.bestFriend)}, petNames={repr(self.petNames)}, afraidOfAnimal={repr(self.afraidOfAnimal)}, vehicles={repr(self.vehicles)})'
    def __copy__(Person self):
        cdef shared_ptr[cPerson] cpp_obj = make_shared[cPerson](
            deref(self._cpp_obj)
        )
        return Person.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Person) and
                isinstance(other, Person)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cPerson* cself = (<Person>self)._cpp_obj.get()
        cdef cPerson* cother = (<Person>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Person()

    cdef __iobuf.IOBuf _serialize(Person self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cPerson](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Person self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cPerson]()
        needed = serializer.cdeserialize[cPerson](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Person, serialize(self)))


@__cython.auto_pickle(False)
cdef class Set__i64(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i64):
            self._cpp_obj = (<Set__i64> items)._cpp_obj
        else:
            self._cpp_obj = Set__i64._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cint64_t]] c_items):
        __fbthrift_inst = <Set__i64>Set__i64.__new__(Set__i64)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Set__i64 self):
        cdef shared_ptr[cset[cint64_t]] cpp_obj = make_shared[cset[cint64_t]](
            deref(self._cpp_obj)
        )
        return Set__i64.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint64_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint64_t]] c_inst = make_shared[cset[cint64_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint64_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef cint64_t citem
        cdef cset[cint64_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield citem
            inc(loc)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, op):
        cdef int cop = op
        cdef shared_ptr[cset[cint64_t]] cself, cother
        cdef cset[cint64_t].iterator loc
        if (isinstance(self, Set__i64) and
                isinstance(other, Set__i64)):
            cself = (<Set__i64> self)._cpp_obj
            cother = (<Set__i64> other)._cpp_obj
            # C level comparisons
            if cop == Py_LT:    # Less Than (strict subset)
                if not deref(cself).size() < deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_LE:  # Less Than or Equal To  (subset)
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_EQ:  # Equivalent
                if deref(cself).size() != deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_NE:  # Not Equivalent
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return True
                    inc(loc)
                return deref(cself).size() != deref(cother).size()
            elif cop == Py_GT:  # Greater Than (strict superset)
                if not deref(cself).size() > deref(cother).size():
                    return False
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_GE:  # Greater Than or Equal To (superset)
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True

        # Python level comparisons
        if cop == Py_LT:
            return Set.__lt__(self, other)
        elif cop == Py_LE:
            return Set.__le__(self, other)
        elif cop == Py_EQ:
            return Set.__eq__(self, other)
        elif cop == Py_NE:
            return Set.__ne__(self, other)
        elif cop == Py_GT:
            return Set.__gt__(self, other)
        elif cop == Py_GE:
            return Set.__ge__(self, other)

    def __and__(self, other):
        if not isinstance(self, Set__i64):
            self = Set__i64(self)
        if not isinstance(other, Set__i64):
            other = Set__i64(other)

        cdef shared_ptr[cset[cint64_t]] shretval = \
            make_shared[cset[cint64_t]]()

        cdef shared_ptr[cset[cint64_t]] cself = (<Set__i64> self)._cpp_obj
        cdef shared_ptr[cset[cint64_t]] cother = (<Set__i64> other)._cpp_obj

        cdef cset[cint64_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) > 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i64.create(__fbthrift_move_shared(shretval))

    def __sub__(self, other):
        if not isinstance(self, Set__i64):
            self = Set__i64(self)
        if not isinstance(other, Set__i64):
            other = Set__i64(other)

        cdef shared_ptr[cset[cint64_t]] shretval = \
            make_shared[cset[cint64_t]]()

        cdef shared_ptr[cset[cint64_t]] cself = (<Set__i64> self)._cpp_obj
        cdef shared_ptr[cset[cint64_t]] cother = (<Set__i64> other)._cpp_obj

        cdef cset[cint64_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i64.create(__fbthrift_move_shared(shretval))

    def __or__(self, other):
        if not isinstance(self, Set__i64):
            self = Set__i64(self)
        if not isinstance(other, Set__i64):
            other = Set__i64(other)

        cdef shared_ptr[cset[cint64_t]] shretval = \
            make_shared[cset[cint64_t]]()

        cdef shared_ptr[cset[cint64_t]] cself = (<Set__i64> self)._cpp_obj
        cdef shared_ptr[cset[cint64_t]] cother = (<Set__i64> other)._cpp_obj

        cdef cset[cint64_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i64.create(__fbthrift_move_shared(shretval))

    def __xor__(self, other):
        if not isinstance(self, Set__i64):
            self = Set__i64(self)
        if not isinstance(other, Set__i64):
            other = Set__i64(other)

        cdef shared_ptr[cset[cint64_t]] shretval = \
            make_shared[cset[cint64_t]]()

        cdef shared_ptr[cset[cint64_t]] cself = (<Set__i64> self)._cpp_obj
        cdef shared_ptr[cset[cint64_t]] cother = (<Set__i64> other)._cpp_obj

        cdef cset[cint64_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            if deref(cself).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i64.create(__fbthrift_move_shared(shretval))


    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i64()


Set.register(Set__i64)

@__cython.auto_pickle(False)
cdef class Map__Animal_string(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__Animal_string):
            self._cpp_obj = (<Map__Animal_string> items)._cpp_obj
        else:
            self._cpp_obj = Map__Animal_string._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cAnimal,string]] c_items):
        __fbthrift_inst = <Map__Animal_string>Map__Animal_string.__new__(Map__Animal_string)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__Animal_string self):
        cdef shared_ptr[cmap[cAnimal,string]] cpp_obj = make_shared[cmap[cAnimal,string]](
            deref(self._cpp_obj)
        )
        return Map__Animal_string.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cAnimal,string]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cAnimal,string]] c_inst = make_shared[cmap[cAnimal,string]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, Animal):
                    raise TypeError(f"{key!r} is not of type Animal")
                if not isinstance(item, str):
                    raise TypeError(f"{item!r} is not of type str")

                deref(c_inst)[<cAnimal><int>key] = item.encode('UTF-8')
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, Animal):
            raise err from None
        cdef cmap[cAnimal,string].iterator iter = deref(
            self._cpp_obj).find(<cAnimal><int>key)
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef string citem = deref(iter).second
        return bytes(citem).decode('UTF-8')

    def __iter__(self):
        if not self:
            return
        cdef cAnimal citem
        cdef cmap[cAnimal,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield translate_cpp_enum_to_python(Animal, <int> citem)
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, Animal):
            return False
        cdef cAnimal ckey = <cAnimal><int>key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, Animal):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef string citem
        cdef cmap[cAnimal,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield bytes(citem).decode('UTF-8')
            inc(loc)

    def items(self):
        if not self:
            return
        cdef cAnimal ckey
        cdef string citem
        cdef cmap[cAnimal,string].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (translate_cpp_enum_to_python(Animal, <int> ckey), bytes(citem).decode('UTF-8'))
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__Animal_string()


Mapping.register(Map__Animal_string)

@__cython.auto_pickle(False)
cdef class List__Vehicle(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__Vehicle):
            self._cpp_obj = (<List__Vehicle> items)._cpp_obj
        else:
            self._cpp_obj = List__Vehicle._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cVehicle]] c_items):
        __fbthrift_inst = <List__Vehicle>List__Vehicle.__new__(List__Vehicle)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__Vehicle self):
        cdef shared_ptr[vector[cVehicle]] cpp_obj = make_shared[vector[cVehicle]](
            deref(self._cpp_obj)
        )
        return List__Vehicle.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cVehicle]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cVehicle]] c_inst = make_shared[vector[cVehicle]]()
        if items is not None:
            for item in items:
                if not isinstance(item, Vehicle):
                    raise TypeError(f"{item!r} is not of type 'Vehicle'")
                deref(c_inst).push_back(deref((<Vehicle>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cVehicle]] c_inst
        cdef shared_ptr[cVehicle] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cVehicle]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__Vehicle.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__Vehicle(self._cpp_obj, deref(self._cpp_obj)[index])
            return Vehicle.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, Vehicle):
            return False
        return std_libcpp.find[vector[cVehicle].iterator, cVehicle](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Vehicle>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cVehicle] citem
        cdef vector[cVehicle].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__Vehicle(self._cpp_obj, deref(loc))
            yield Vehicle.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cVehicle] citem
        cdef vector[cVehicle].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__Vehicle(self._cpp_obj, deref(loc))
            yield Vehicle.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, Vehicle):
            raise err
        cdef vector[cVehicle].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cVehicle].iterator loc = std_libcpp.find[vector[cVehicle].iterator, cVehicle](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<Vehicle>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, Vehicle):
            return 0
        return <cint64_t> std_libcpp.count[vector[cVehicle].iterator, cVehicle](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<Vehicle>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__Vehicle()


Sequence.register(List__Vehicle)

PersonID = int
