// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var GoUnusedProtection__ int;

type MyEnum int64
const (
  MyEnum_MyValue1 MyEnum = 0
  MyEnum_MyValue2 MyEnum = 1
)

var MyEnumToName = map[MyEnum]string {
  MyEnum_MyValue1: "MyValue1",
  MyEnum_MyValue2: "MyValue2",
}

var MyEnumToValue = map[string]MyEnum {
  "MyValue1": MyEnum_MyValue1,
  "MyValue2": MyEnum_MyValue2,
}

func (p MyEnum) String() string {
  if v, ok := MyEnumToName[p]; ok {
    return v
  }
  return "<UNSET>"
}

func MyEnumFromString(s string) (MyEnum, error) {
  if v, ok := MyEnumToValue[s]; ok {
    return v, nil
  }
  return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

func MyEnumPtr(v MyEnum) *MyEnum { return &v }

// Attributes:
//  - MyIntField
//  - MyStringField
//  - MyDataField
//  - MyEnum
type MyStruct struct {
  MyIntField int64 `thrift:"MyIntField,1" db:"MyIntField" json:"MyIntField"`
  MyStringField string `thrift:"MyStringField,2" db:"MyStringField" json:"MyStringField"`
  MyDataField *MyDataItem `thrift:"MyDataField,3" db:"MyDataField" json:"MyDataField"`
  MyEnum MyEnum `thrift:"myEnum,4" db:"myEnum" json:"myEnum"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{}
}


func (p *MyStruct) GetMyIntField() int64 {
  return p.MyIntField
}

func (p *MyStruct) GetMyStringField() string {
  return p.MyStringField
}
var MyStruct_MyDataField_DEFAULT *MyDataItem
func (p *MyStruct) GetMyDataField() *MyDataItem {
  if !p.IsSetMyDataField() {
    return MyStruct_MyDataField_DEFAULT
  }
return p.MyDataField
}

func (p *MyStruct) GetMyEnum() MyEnum {
  return p.MyEnum
}
func (p *MyStruct) IsSetMyDataField() bool {
  return p.MyDataField != nil
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.MyIntField = v
}
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MyStringField = v
}
  return nil
}

func (p *MyStruct)  ReadField3(iprot thrift.Protocol) error {
  p.MyDataField = NewMyDataItem()
  if err := p.MyDataField.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MyDataField), err)
  }
  return nil
}

func (p *MyStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := MyEnum(v)
  p.MyEnum = temp
}
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyIntField", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:MyIntField: ", p), err) }
  if err := oprot.WriteI64(int64(p.MyIntField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyIntField (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:MyIntField: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyStringField", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:MyStringField: ", p), err) }
  if err := oprot.WriteString(string(p.MyStringField)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.MyStringField (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:MyStringField: ", p), err) }
  return err
}

func (p *MyStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("MyDataField", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:MyDataField: ", p), err) }
  if err := p.MyDataField.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MyDataField), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:MyDataField: ", p), err) }
  return err
}

func (p *MyStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("myEnum", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:myEnum: ", p), err) }
  if err := oprot.WriteI32(int32(p.MyEnum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.myEnum (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:myEnum: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  myIntFieldVal := fmt.Sprintf("%v", p.MyIntField)
  myStringFieldVal := fmt.Sprintf("%v", p.MyStringField)
  var myDataFieldVal string
  if p.MyDataField == nil {
    myDataFieldVal = "<nil>"
  } else {
    myDataFieldVal = fmt.Sprintf("%v", p.MyDataField)
  }
  myEnumVal := fmt.Sprintf("%v", p.MyEnum)
  return fmt.Sprintf("MyStruct({MyIntField:%s MyStringField:%s MyDataField:%s MyEnum:%s})", myIntFieldVal, myStringFieldVal, myDataFieldVal, myEnumVal)
}

type MyDataItem struct {
}

func NewMyDataItem() *MyDataItem {
  return &MyDataItem{}
}

func (p *MyDataItem) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataItem) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataItem) String() string {
  if p == nil {
    return "<nil>"
  }

  return fmt.Sprintf("MyDataItem({})")
}

// Attributes:
//  - MyEnum
//  - MyStruct
//  - MyDataItem
type MyUnion struct {
  MyEnum *MyEnum `thrift:"myEnum,1" db:"myEnum" json:"myEnum,omitempty"`
  MyStruct *MyStruct `thrift:"myStruct,2" db:"myStruct" json:"myStruct,omitempty"`
  MyDataItem *MyDataItem `thrift:"myDataItem,3" db:"myDataItem" json:"myDataItem,omitempty"`
}

func NewMyUnion() *MyUnion {
  return &MyUnion{}
}

var MyUnion_MyEnum_DEFAULT MyEnum
func (p *MyUnion) GetMyEnum() MyEnum {
  if !p.IsSetMyEnum() {
    return MyUnion_MyEnum_DEFAULT
  }
return *p.MyEnum
}
var MyUnion_MyStruct_DEFAULT *MyStruct
func (p *MyUnion) GetMyStruct() *MyStruct {
  if !p.IsSetMyStruct() {
    return MyUnion_MyStruct_DEFAULT
  }
return p.MyStruct
}
var MyUnion_MyDataItem_DEFAULT *MyDataItem
func (p *MyUnion) GetMyDataItem() *MyDataItem {
  if !p.IsSetMyDataItem() {
    return MyUnion_MyDataItem_DEFAULT
  }
return p.MyDataItem
}
func (p *MyUnion) CountSetFieldsMyUnion() int {
  count := 0
  if (p.IsSetMyEnum()) {
    count++
  }
  if (p.IsSetMyStruct()) {
    count++
  }
  if (p.IsSetMyDataItem()) {
    count++
  }
  return count

}

func (p *MyUnion) IsSetMyEnum() bool {
  return p.MyEnum != nil
}

func (p *MyUnion) IsSetMyStruct() bool {
  return p.MyStruct != nil
}

func (p *MyUnion) IsSetMyDataItem() bool {
  return p.MyDataItem != nil
}

func (p *MyUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := MyEnum(v)
  p.MyEnum = &temp
}
  return nil
}

func (p *MyUnion)  ReadField2(iprot thrift.Protocol) error {
  p.MyStruct = NewMyStruct()
  if err := p.MyStruct.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MyStruct), err)
  }
  return nil
}

func (p *MyUnion)  ReadField3(iprot thrift.Protocol) error {
  p.MyDataItem = NewMyDataItem()
  if err := p.MyDataItem.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MyDataItem), err)
  }
  return nil
}

func (p *MyUnion) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsMyUnion(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("MyUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetMyEnum() {
    if err := oprot.WriteFieldBegin("myEnum", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:myEnum: ", p), err) }
    if err := oprot.WriteI32(int32(*p.MyEnum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.myEnum (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:myEnum: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetMyStruct() {
    if err := oprot.WriteFieldBegin("myStruct", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:myStruct: ", p), err) }
    if err := p.MyStruct.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MyStruct), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:myStruct: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField3(oprot thrift.Protocol) (err error) {
  if p.IsSetMyDataItem() {
    if err := oprot.WriteFieldBegin("myDataItem", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:myDataItem: ", p), err) }
    if err := p.MyDataItem.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MyDataItem), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:myDataItem: ", p), err) }
  }
  return err
}

func (p *MyUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  var myEnumVal string
  if p.MyEnum == nil {
    myEnumVal = "<nil>"
  } else {
    myEnumVal = fmt.Sprintf("%v", *p.MyEnum)
  }
  var myStructVal string
  if p.MyStruct == nil {
    myStructVal = "<nil>"
  } else {
    myStructVal = fmt.Sprintf("%v", p.MyStruct)
  }
  var myDataItemVal string
  if p.MyDataItem == nil {
    myDataItemVal = "<nil>"
  } else {
    myDataItemVal = fmt.Sprintf("%v", p.MyDataItem)
  }
  return fmt.Sprintf("MyUnion({MyEnum:%s MyStruct:%s MyDataItem:%s})", myEnumVal, myStructVal, myDataItemVal)
}

