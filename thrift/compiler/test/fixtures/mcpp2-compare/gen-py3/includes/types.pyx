#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins

cimport includes.types_reflection as _types_reflection


cdef __EnumData __AnEnum_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cAnEnum](), AnEnum)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __AnEnumMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __AnEnum_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __AnEnum_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __AnEnum_enum_data.get_all_names()

    def __len__(cls):
        return __AnEnum_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class AnEnum(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __AnEnum_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> AnEnum, <PyTypeObject*> __AnEnumMeta)



@__cython.auto_pickle(False)
cdef class AStruct(thrift.py3.types.Struct):

    def __init__(
        AStruct self, *,
        FieldA=None
    ):
        if FieldA is not None:
            if not isinstance(FieldA, int):
                raise TypeError(f'FieldA is not a { int !r}.')
            FieldA = <cint32_t> FieldA

        self._cpp_obj = __fbthrift_move(AStruct._make_instance(
          NULL,
          NULL,
          FieldA,
        ))

    def __call__(
        AStruct self,
        FieldA=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if FieldA is ___NOTSET:
            __isNOTSET[0] = True
            FieldA = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if FieldA is not None:
            if not isinstance(FieldA, int):
                raise TypeError(f'FieldA is not a { int !r}.')
            FieldA = <cint32_t> FieldA

        __fbthrift_inst = <AStruct>AStruct.__new__(AStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(AStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          FieldA,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cAStruct] _make_instance(
        cAStruct* base_instance,
        bint* __isNOTSET,
        object FieldA 
    ) except *:
        cdef unique_ptr[cAStruct] c_inst
        if base_instance:
            c_inst = make_unique[cAStruct](deref(base_instance))
        else:
            c_inst = make_unique[cAStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and FieldA is None:
                deref(c_inst).FieldA_ref().assign(default_inst[cAStruct]().FieldA_ref().value())
                deref(c_inst).__isset.FieldA = False
                pass

        if FieldA is not None:
            deref(c_inst).FieldA_ref().assign(FieldA)
            deref(c_inst).__isset.FieldA = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("AStruct", {
          "FieldA": cpp_obj.FieldA_ref().has_value(),
        })

    def __iter__(self):
        yield 'FieldA', self.FieldA

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cAStruct] cpp_obj):
        __fbthrift_inst = <AStruct>AStruct.__new__(AStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def FieldA(self):

        return deref(self._cpp_obj).FieldA_ref().value()


    def __hash__(AStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.FieldA,
            ))
        return self.__hash

    def __repr__(AStruct self):
        return f'AStruct(FieldA={repr(self.FieldA)})'
    def __copy__(AStruct self):
        cdef shared_ptr[cAStruct] cpp_obj = make_shared[cAStruct](
            deref(self._cpp_obj)
        )
        return AStruct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, AStruct) and
                isinstance(other, AStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cAStruct* cself = (<AStruct>self)._cpp_obj.get()
        cdef cAStruct* cother = (<AStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AStruct()

    cdef __iobuf.IOBuf _serialize(AStruct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cAStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(AStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAStruct]()
        needed = serializer.cdeserialize[cAStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (AStruct, serialize(self)))


@__cython.auto_pickle(False)
cdef class AStructB(thrift.py3.types.Struct):

    def __init__(
        AStructB self, *,
        AStruct FieldA=None
    ):
        self._cpp_obj = __fbthrift_move(AStructB._make_instance(
          NULL,
          NULL,
          FieldA,
        ))

    def __call__(
        AStructB self,
        FieldA=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if FieldA is ___NOTSET:
            __isNOTSET[0] = True
            FieldA = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if FieldA is not None:
            if not isinstance(FieldA, AStruct):
                raise TypeError(f'FieldA is not a { AStruct !r}.')

        __fbthrift_inst = <AStructB>AStructB.__new__(AStructB)
        __fbthrift_inst._cpp_obj = __fbthrift_move(AStructB._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          FieldA,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cAStructB] _make_instance(
        cAStructB* base_instance,
        bint* __isNOTSET,
        AStruct FieldA 
    ) except *:
        cdef unique_ptr[cAStructB] c_inst
        if base_instance:
            c_inst = make_unique[cAStructB](deref(base_instance))
        else:
            c_inst = make_unique[cAStructB]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and FieldA is None:
                deref(c_inst).FieldA.reset()
                pass

        if FieldA is not None:
            deref(c_inst).FieldA = const_pointer_cast((<AStruct?>FieldA)._cpp_obj)
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("AStructB", {
        })

    def __iter__(self):
        yield 'FieldA', self.FieldA

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).FieldA)

    @staticmethod
    cdef create(shared_ptr[cAStructB] cpp_obj):
        __fbthrift_inst = <AStructB>AStructB.__new__(AStructB)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def FieldA(self):

        if self.__field_FieldA is None:
            if not deref(self._cpp_obj).FieldA:
                return None
            self.__field_FieldA = AStruct.create(reference_shared_ptr_FieldA(self._cpp_obj, deref(deref(self._cpp_obj).FieldA)))
        return self.__field_FieldA


    def __hash__(AStructB self):
        if not self.__hash:
            self.__hash = hash((
            self.FieldA,
            ))
        return self.__hash

    def __repr__(AStructB self):
        return f'AStructB(FieldA={repr(self.FieldA)})'
    def __copy__(AStructB self):
        cdef shared_ptr[cAStructB] cpp_obj = make_shared[cAStructB](
            deref(self._cpp_obj)
        )
        return AStructB.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, AStructB) and
                isinstance(other, AStructB)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cAStructB* cself = (<AStructB>self)._cpp_obj.get()
        cdef cAStructB* cother = (<AStructB>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__AStructB()

    cdef __iobuf.IOBuf _serialize(AStructB self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cAStructB](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(AStructB self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cAStructB]()
        needed = serializer.cdeserialize[cAStructB](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (AStructB, serialize(self)))


IncludedConstant = 42
IncludedInt64 = int
