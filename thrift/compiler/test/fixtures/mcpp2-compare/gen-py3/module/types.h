/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <thrift/lib/py3/enums.h>
#include "src/gen-cpp2/module_types.h"

template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::MyEnumA>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::AnnotatedEnum>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::AnnotatedEnum2>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::MyEnumB>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::SimpleUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}

template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::ComplexUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}

template<>
const std::vector<std::pair<std::string_view, std::string_view>>& ::thrift::py3::PyEnumTraits<
    ::some::valid::ns::FloatUnion::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}
