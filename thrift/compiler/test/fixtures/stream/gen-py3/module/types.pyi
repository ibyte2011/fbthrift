#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as __iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools
import thrift.py3.stream


__property__ = property


class FooEx(thrift.py3.exceptions.GeneratedError, _typing.Hashable, _typing.Iterable[_typing.Tuple[str, _typing.Any]]):
    class __fbthrift_IsSet:
        pass

    def __init__(
        self, 
    ) -> None: ...

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...
    def __bool__(self) -> bool: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'FooEx') -> bool: ...
    def __gt__(self, other: 'FooEx') -> bool: ...
    def __le__(self, other: 'FooEx') -> bool: ...
    def __ge__(self, other: 'FooEx') -> bool: ...



class ClientBufferedStream__i32(thrift.py3.stream.ClientBufferedStream):
    def __aiter__(self) -> _typing.AsyncIterator[int]: ...
    async def __anext__(self) -> int: ...

class Stream__i32(thrift.py3.stream.Stream):
    pass

class ResponseAndClientBufferedStream__i32_i32(thrift.py3.stream.ResponseAndClientBufferedStream):
    def __iter__(self) -> _typing.Tuple[
        int,
        ClientBufferedStream__i32,
    ]: ...


class ResponseAndStream__i32_i32(thrift.py3.stream.ResponseAndStream):
    pass

