/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.refs;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.codec.ThriftField.Recursiveness;
import com.google.common.collect.*;
import java.util.*;
import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.server.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;
import org.apache.thrift.meta_data.FieldMetaData;
import org.apache.thrift.meta_data.FieldValueMetaData;
import static com.google.common.base.MoreObjects.toStringHelper;
import static com.google.common.base.MoreObjects.ToStringHelper;

@SwiftGenerated
@ThriftStruct(value="StructWithUnion", builder=StructWithUnion.Builder.class)
public final class StructWithUnion {
    private BitSet __isset_bit_vector = new BitSet();

    @ThriftConstructor
    public StructWithUnion(
        @ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.refs.MyUnion u,
        @ThriftField(value=2, name="aDouble", requiredness=Requiredness.NONE) final double aDouble,
        @ThriftField(value=3, name="f", requiredness=Requiredness.NONE) final test.fixtures.refs.MyField f
    ) {
        this.u = u;
        this.aDouble = aDouble;
        this.f = f;
    }
    
    @ThriftConstructor
    protected StructWithUnion() {
      this.u = null;
      this.aDouble = 0.;
      this.f = null;
    }
    
    public static class Builder {
        private final BitSet __optional_isset = new BitSet();
    
        private test.fixtures.refs.MyUnion u = null;
        private double aDouble = 0.;
        private test.fixtures.refs.MyField f = null;
    
        @ThriftField(value=1, name="u", requiredness=Requiredness.NONE)
        public Builder setU(test.fixtures.refs.MyUnion u) {
            this.u = u;
            return this;
        }
    
        public test.fixtures.refs.MyUnion getU() { return u; }
    
            @ThriftField(value=2, name="aDouble", requiredness=Requiredness.NONE)
        public Builder setADouble(double aDouble) {
            this.aDouble = aDouble;
            return this;
        }
    
        public double getADouble() { return aDouble; }
    
            @ThriftField(value=3, name="f", requiredness=Requiredness.NONE)
        public Builder setF(test.fixtures.refs.MyField f) {
            this.f = f;
            return this;
        }
    
        public test.fixtures.refs.MyField getF() { return f; }
    
        public Builder() { }
        public Builder(StructWithUnion other) {
            this.u = other.u;
            this.aDouble = other.aDouble;
            this.f = other.f;
        }
    
        @ThriftConstructor
        public StructWithUnion build() {
            StructWithUnion result = new StructWithUnion (
                this.u,
                this.aDouble,
                this.f
            );
            result.__isset_bit_vector.or(__optional_isset);
            return result;
        }
    }
    
    public static final Map<String, Integer> NAMES_TO_IDS = new HashMap();
    public static final Map<Integer, Object> FIELD_METADATA = new HashMap<>();
    private static final TStruct STRUCT_DESC = new TStruct("StructWithUnion");
    private final test.fixtures.refs.MyUnion u;
    public static final int _U = 1;
    private static final TField U_FIELD_DESC = new TField("u", TType.STRUCT, (short)1);
        private final double aDouble;
    public static final int _ADOUBLE = 2;
    private static final TField A_DOUBLE_FIELD_DESC = new TField("aDouble", TType.DOUBLE, (short)2);
        private final test.fixtures.refs.MyField f;
    public static final int _F = 3;
    private static final TField F_FIELD_DESC = new TField("f", TType.STRUCT, (short)3);
    static {
      NAMES_TO_IDS.put("u", 1);
      FIELD_METADATA.put(1, U_FIELD_DESC);
      NAMES_TO_IDS.put("aDouble", 2);
      FIELD_METADATA.put(2, A_DOUBLE_FIELD_DESC);
      NAMES_TO_IDS.put("f", 3);
      FIELD_METADATA.put(3, F_FIELD_DESC);
    }
    
    @ThriftField(value=1, name="u", requiredness=Requiredness.NONE)
    public test.fixtures.refs.MyUnion getU() { return u; }
        
    /** don't use this method for new code, it's here to make migrating to swift easier */
    @Deprecated
    public boolean fieldIsSetU() {
        return this.u != null;
    }
    
    
    @ThriftField(value=2, name="aDouble", requiredness=Requiredness.NONE)
    public double getADouble() { return aDouble; }
        
    /** don't use this method for new code, it's here to make migrating to swift easier */
    @Deprecated
    public boolean fieldIsSetADouble() {
        return __isset_bit_vector.get(_ADOUBLE);
    }
    
    
    @ThriftField(value=3, name="f", requiredness=Requiredness.NONE)
    public test.fixtures.refs.MyField getF() { return f; }
        
    /** don't use this method for new code, it's here to make migrating to swift easier */
    @Deprecated
    public boolean fieldIsSetF() {
        return this.f != null;
    }
    
    @Override
    public String toString() {
        ToStringHelper helper = toStringHelper(this);
        helper.add("u", u);
        helper.add("aDouble", aDouble);
        helper.add("f", f);
        return helper.toString();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
    
        StructWithUnion other = (StructWithUnion)o;
    
        return
            Objects.equals(u, other.u) &&
            Objects.equals(aDouble, other.aDouble) &&
            Objects.equals(f, other.f) &&
            true;
    }
    
    @Override
    public int hashCode() {
        return Arrays.deepHashCode(new Object[] {
            u,
            aDouble,
            f
        });
    }
    
    
    public static StructWithUnion read0(TProtocol oprot) throws TException {
      TField __field;
      oprot.readStructBegin(StructWithUnion.NAMES_TO_IDS, StructWithUnion.FIELD_METADATA);
      StructWithUnion.Builder builder = new StructWithUnion.Builder();
      while (true) {
        __field = oprot.readFieldBegin();
        if (__field.type == TType.STOP) { break; }
        switch (__field.id) {
        case _U:
          if (__field.type == TType.STRUCT) {
            test.fixtures.refs.MyUnion u = test.fixtures.refs.MyUnion.read0(oprot);
            builder.setU(u);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _ADOUBLE:
          if (__field.type == TType.DOUBLE) {
            double aDouble = oprot.readDouble();
            builder.setADouble(aDouble);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        case _F:
          if (__field.type == TType.STRUCT) {
            test.fixtures.refs.MyField f = test.fixtures.refs.MyField.read0(oprot);
            builder.setF(f);
          } else {
            TProtocolUtil.skip(oprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(oprot, __field.type);
          break;
        }
        oprot.readFieldEnd();
      }
      oprot.readStructEnd();
      return builder.build();
    }
    
    public void write0(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);
      if (this.u != null) {
        oprot.writeFieldBegin(U_FIELD_DESC);
        this.u.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(A_DOUBLE_FIELD_DESC);
      oprot.writeDouble(this.aDouble);
      oprot.writeFieldEnd();
      if (this.f != null) {
        oprot.writeFieldBegin(F_FIELD_DESC);
        this.f.write0(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
}
