#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.bytes cimport PyBytes_AsStringAndSize
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from libcpp.utility cimport move as cmove
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.types cimport (
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    constant_shared_ptr,
    default_inst,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
from thrift.py3.serializer import deserialize, serialize
import folly.iobuf as __iobuf
from folly.optional cimport cOptional

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins

cimport module.types_reflection as _types_reflection


cdef __EnumData __TypedEnum_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cTypedEnum](), TypedEnum)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __TypedEnumMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __TypedEnum_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __TypedEnum_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __TypedEnum_enum_data.get_all_names()

    def __len__(cls):
        return __TypedEnum_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class TypedEnum(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __TypedEnum_enum_data.get_by_name(name)



__SetMetaClass(<PyTypeObject*> TypedEnum, <PyTypeObject*> __TypedEnumMeta)



cdef __UnionTypeEnumData __MyUnion_union_type_enum_data  = __UnionTypeEnumData.create(
    __createEnumDataForUnionType[cMyUnion](),
    __MyUnionType,
)


@__cython.internal
@__cython.auto_pickle(False)
cdef class __MyUnion_Union_TypeMeta(thrift.py3.types.EnumMeta):

    def __get_by_name(cls, str name):
        return __MyUnion_union_type_enum_data.get_by_name(name)

    def __get_by_value(cls, int value):
        return __MyUnion_union_type_enum_data.get_by_value(value)

    def __get_all_names(cls):
        return __MyUnion_union_type_enum_data.get_all_names()

    def __len__(cls):
        return __MyUnion_union_type_enum_data.size()


@__cython.final
@__cython.auto_pickle(False)
cdef class __MyUnionType(thrift.py3.types.CompiledEnum):
    cdef get_by_name(self, str name):
        return __MyUnion_union_type_enum_data.get_by_name(name)


__SetMetaClass(<PyTypeObject*> __MyUnionType, <PyTypeObject*> __MyUnion_Union_TypeMeta)




@__cython.auto_pickle(False)
cdef class MyUnion(thrift.py3.types.Union):
    Type = __MyUnionType

    def __init__(
        self, *,
        anInteger=None,
        str aString=None
    ):
        if anInteger is not None:
            if not isinstance(anInteger, int):
                raise TypeError(f'anInteger is not a { int !r}.')
            anInteger = <cint32_t> anInteger

        self._cpp_obj = __fbthrift_move(MyUnion._make_instance(
          NULL,
          anInteger,
          aString,
        ))
        self._load_cache()

    @staticmethod
    def fromValue(value):
        if value is None:
            return MyUnion()
        if isinstance(value, int):
            if not isinstance(value, pbool):
                try:
                    <cint32_t> value
                    return MyUnion(anInteger=value)
                except OverflowError:
                    pass
        if isinstance(value, str):
            return MyUnion(aString=value)
        raise ValueError(f"Unable to derive correct union field for value: {value}")

    @staticmethod
    cdef unique_ptr[cMyUnion] _make_instance(
        cMyUnion* base_instance,
        object anInteger,
        str aString
    ) except *:
        cdef unique_ptr[cMyUnion] c_inst = make_unique[cMyUnion]()
        cdef bint any_set = False
        if anInteger is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_anInteger(anInteger)
            any_set = True
        if aString is not None:
            if any_set:
                raise TypeError("At most one field may be set when initializing a union")
            deref(c_inst).set_aString(aString.encode('UTF-8'))
            any_set = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    def __bool__(self):
        return self.type is not __MyUnionType.EMPTY

    @staticmethod
    cdef create(shared_ptr[cMyUnion] cpp_obj):
        __fbthrift_inst = <MyUnion>MyUnion.__new__(MyUnion)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        __fbthrift_inst._load_cache()
        return __fbthrift_inst

    @property
    def anInteger(self):
        if self.type.value != 1:
            raise TypeError(f'Union contains a value of type {self.type.name}, not anInteger')
        return self.value

    @property
    def aString(self):
        if self.type.value != 2:
            raise TypeError(f'Union contains a value of type {self.type.name}, not aString')
        return self.value


    def __hash__(MyUnion self):
        if not self.__hash:
            self.__hash = hash((
                self.type,
                self.value,
            ))
        return self.__hash

    def __repr__(MyUnion self):
        return f'MyUnion(type={self.type.name}, value={self.value!r})'

    cdef _load_cache(MyUnion self):
        self.type = MyUnion.Type(<int>(deref(self._cpp_obj).getType()))
        cdef int type = self.type.value
        if type == 0:    # Empty
            self.value = None
        elif type == 1:
            self.value = deref(self._cpp_obj).get_anInteger()
        elif type == 2:
            self.value = bytes(deref(self._cpp_obj).get_aString()).decode('UTF-8')

    def get_type(MyUnion self):
        return self.type

    def __copy__(MyUnion self):
        cdef shared_ptr[cMyUnion] cpp_obj = make_shared[cMyUnion](
            deref(self._cpp_obj)
        )
        return MyUnion.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, MyUnion) and
                isinstance(other, MyUnion)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cMyUnion* cself = (<MyUnion>self)._cpp_obj.get()
        cdef cMyUnion* cother = (<MyUnion>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyUnion()

    cdef __iobuf.IOBuf _serialize(MyUnion self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cMyUnion](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(MyUnion self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyUnion]()
        needed = serializer.cdeserialize[cMyUnion](buf, self._cpp_obj.get(), proto)
        # force a cache reload since the underlying data's changed
        self._load_cache()
        return needed

    def __reduce__(self):
        return (deserialize, (MyUnion, serialize(self)))


@__cython.auto_pickle(False)
cdef class MyField(thrift.py3.types.Struct):

    def __init__(
        MyField self, *,
        opt_value=None,
        value=None,
        req_value=None
    ):
        if opt_value is not None:
            if not isinstance(opt_value, int):
                raise TypeError(f'opt_value is not a { int !r}.')
            opt_value = <cint64_t> opt_value

        if value is not None:
            if not isinstance(value, int):
                raise TypeError(f'value is not a { int !r}.')
            value = <cint64_t> value

        if req_value is not None:
            if not isinstance(req_value, int):
                raise TypeError(f'req_value is not a { int !r}.')
            req_value = <cint64_t> req_value

        self._cpp_obj = __fbthrift_move(MyField._make_instance(
          NULL,
          NULL,
          opt_value,
          value,
          req_value,
        ))

    def __call__(
        MyField self,
        opt_value=__NOTSET,
        value=__NOTSET,
        req_value=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if opt_value is ___NOTSET:
            __isNOTSET[0] = True
            opt_value = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if value is ___NOTSET:
            __isNOTSET[1] = True
            value = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_value is ___NOTSET:
            __isNOTSET[2] = True
            req_value = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if opt_value is not None:
            if not isinstance(opt_value, int):
                raise TypeError(f'opt_value is not a { int !r}.')
            opt_value = <cint64_t> opt_value

        if value is not None:
            if not isinstance(value, int):
                raise TypeError(f'value is not a { int !r}.')
            value = <cint64_t> value

        if req_value is not None:
            if not isinstance(req_value, int):
                raise TypeError(f'req_value is not a { int !r}.')
            req_value = <cint64_t> req_value

        __fbthrift_inst = <MyField>MyField.__new__(MyField)
        __fbthrift_inst._cpp_obj = __fbthrift_move(MyField._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          opt_value,
          value,
          req_value,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyField] _make_instance(
        cMyField* base_instance,
        bint* __isNOTSET,
        object opt_value ,
        object value ,
        object req_value 
    ) except *:
        cdef unique_ptr[cMyField] c_inst
        if base_instance:
            c_inst = make_unique[cMyField](deref(base_instance))
        else:
            c_inst = make_unique[cMyField]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and opt_value is None:
                deref(c_inst).__isset.opt_value = False
                pass

            if not __isNOTSET[1] and value is None:
                deref(c_inst).value_ref().assign(default_inst[cMyField]().value_ref().value())
                deref(c_inst).__isset.value = False
                pass

            if not __isNOTSET[2] and req_value is None:
                deref(c_inst).req_value = default_inst[cMyField]().req_value
                pass

        if opt_value is not None:
            deref(c_inst).opt_value_ref().assign(opt_value)
            deref(c_inst).__isset.opt_value = True
        if value is not None:
            deref(c_inst).value_ref().assign(value)
            deref(c_inst).__isset.value = True
        if req_value is not None:
            deref(c_inst).req_value = req_value
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("MyField", {
          "opt_value": cpp_obj.opt_value_ref().has_value(),
          "value": cpp_obj.value_ref().has_value(),
        })

    def __iter__(self):
        yield 'opt_value', self.opt_value
        yield 'value', self.value
        yield 'req_value', self.req_value

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cMyField] cpp_obj):
        __fbthrift_inst = <MyField>MyField.__new__(MyField)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def opt_value(self):
        if not deref(self._cpp_obj).__isset.opt_value:
            return None

        return deref(self._cpp_obj).opt_value_ref().value_unchecked()

    @property
    def value(self):

        return deref(self._cpp_obj).value_ref().value()

    @property
    def req_value(self):

        return deref(self._cpp_obj).req_value


    def __hash__(MyField self):
        if not self.__hash:
            self.__hash = hash((
            self.opt_value,
            self.value,
            self.req_value,
            ))
        return self.__hash

    def __repr__(MyField self):
        return f'MyField(opt_value={repr(self.opt_value)}, value={repr(self.value)}, req_value={repr(self.req_value)})'
    def __copy__(MyField self):
        cdef shared_ptr[cMyField] cpp_obj = make_shared[cMyField](
            deref(self._cpp_obj)
        )
        return MyField.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, MyField) and
                isinstance(other, MyField)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cMyField* cself = (<MyField>self)._cpp_obj.get()
        cdef cMyField* cother = (<MyField>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyField()

    cdef __iobuf.IOBuf _serialize(MyField self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cMyField](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(MyField self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyField]()
        needed = serializer.cdeserialize[cMyField](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (MyField, serialize(self)))


@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):

    def __init__(
        MyStruct self, *,
        MyField opt_ref=None,
        MyField ref=None,
        MyField req_ref=None
    ):
        self._cpp_obj = __fbthrift_move(MyStruct._make_instance(
          NULL,
          NULL,
          opt_ref,
          ref,
          req_ref,
        ))

    def __call__(
        MyStruct self,
        opt_ref=__NOTSET,
        ref=__NOTSET,
        req_ref=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if opt_ref is ___NOTSET:
            __isNOTSET[0] = True
            opt_ref = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if ref is ___NOTSET:
            __isNOTSET[1] = True
            ref = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_ref is ___NOTSET:
            __isNOTSET[2] = True
            req_ref = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if opt_ref is not None:
            if not isinstance(opt_ref, MyField):
                raise TypeError(f'opt_ref is not a { MyField !r}.')

        if ref is not None:
            if not isinstance(ref, MyField):
                raise TypeError(f'ref is not a { MyField !r}.')

        if req_ref is not None:
            if not isinstance(req_ref, MyField):
                raise TypeError(f'req_ref is not a { MyField !r}.')

        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(MyStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          opt_ref,
          ref,
          req_ref,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cMyStruct] _make_instance(
        cMyStruct* base_instance,
        bint* __isNOTSET,
        MyField opt_ref ,
        MyField ref ,
        MyField req_ref 
    ) except *:
        cdef unique_ptr[cMyStruct] c_inst
        if base_instance:
            c_inst = make_unique[cMyStruct](deref(base_instance))
        else:
            c_inst = make_unique[cMyStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and opt_ref is None:
                deref(c_inst).opt_ref.reset()
                pass

            if not __isNOTSET[1] and ref is None:
                deref(c_inst).ref.reset()
                pass

            if not __isNOTSET[2] and req_ref is None:
                deref(c_inst).req_ref.reset()
                pass

        if opt_ref is not None:
            deref(c_inst).opt_ref = make_unique[cMyField](deref((<MyField?>opt_ref)._cpp_obj))
        if ref is not None:
            deref(c_inst).ref = make_unique[cMyField](deref((<MyField?>ref)._cpp_obj))
        if req_ref is not None:
            deref(c_inst).req_ref = make_unique[cMyField](deref((<MyField?>req_ref)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("MyStruct", {
        })

    def __iter__(self):
        yield 'opt_ref', self.opt_ref
        yield 'ref', self.ref
        yield 'req_ref', self.req_ref

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).opt_ref) or <bint>(deref(self._cpp_obj).ref) or <bint>(deref(self._cpp_obj).req_ref)

    @staticmethod
    cdef create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def opt_ref(self):

        if self.__field_opt_ref is None:
            if not deref(self._cpp_obj).opt_ref:
                return None
            self.__field_opt_ref = MyField.create(reference_shared_ptr_opt_ref(self._cpp_obj, deref(deref(self._cpp_obj).opt_ref)))
        return self.__field_opt_ref

    @property
    def ref(self):

        if self.__field_ref is None:
            if not deref(self._cpp_obj).ref:
                return None
            self.__field_ref = MyField.create(reference_shared_ptr_ref(self._cpp_obj, deref(deref(self._cpp_obj).ref)))
        return self.__field_ref

    @property
    def req_ref(self):

        if self.__field_req_ref is None:
            if not deref(self._cpp_obj).req_ref:
                return None
            self.__field_req_ref = MyField.create(reference_shared_ptr_req_ref(self._cpp_obj, deref(deref(self._cpp_obj).req_ref)))
        return self.__field_req_ref


    def __hash__(MyStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.opt_ref,
            self.ref,
            self.req_ref,
            ))
        return self.__hash

    def __repr__(MyStruct self):
        return f'MyStruct(opt_ref={repr(self.opt_ref)}, ref={repr(self.ref)}, req_ref={repr(self.req_ref)})'
    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, MyStruct) and
                isinstance(other, MyStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cMyStruct* cself = (<MyStruct>self)._cpp_obj.get()
        cdef cMyStruct* cother = (<MyStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    cdef __iobuf.IOBuf _serialize(MyStruct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(MyStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (MyStruct, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithUnion(thrift.py3.types.Struct):

    def __init__(
        StructWithUnion self, *,
        MyUnion u=None,
        aDouble=None,
        MyField f=None
    ):
        if aDouble is not None:
            if not isinstance(aDouble, (float, int)):
                raise TypeError(f'aDouble is not a { float !r}.')

        self._cpp_obj = __fbthrift_move(StructWithUnion._make_instance(
          NULL,
          NULL,
          u,
          aDouble,
          f,
        ))

    def __call__(
        StructWithUnion self,
        u=__NOTSET,
        aDouble=__NOTSET,
        f=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if u is ___NOTSET:
            __isNOTSET[0] = True
            u = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if aDouble is ___NOTSET:
            __isNOTSET[1] = True
            aDouble = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if f is ___NOTSET:
            __isNOTSET[2] = True
            f = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if u is not None:
            if not isinstance(u, MyUnion):
                raise TypeError(f'u is not a { MyUnion !r}.')

        if aDouble is not None:
            if not isinstance(aDouble, (float, int)):
                raise TypeError(f'aDouble is not a { float !r}.')

        if f is not None:
            if not isinstance(f, MyField):
                raise TypeError(f'f is not a { MyField !r}.')

        __fbthrift_inst = <StructWithUnion>StructWithUnion.__new__(StructWithUnion)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithUnion._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          u,
          aDouble,
          f,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithUnion] _make_instance(
        cStructWithUnion* base_instance,
        bint* __isNOTSET,
        MyUnion u ,
        object aDouble ,
        MyField f 
    ) except *:
        cdef unique_ptr[cStructWithUnion] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithUnion](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithUnion]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and u is None:
                deref(c_inst).u.reset()
                pass

            if not __isNOTSET[1] and aDouble is None:
                deref(c_inst).aDouble_ref().assign(default_inst[cStructWithUnion]().aDouble_ref().value())
                deref(c_inst).__isset.aDouble = False
                pass

            if not __isNOTSET[2] and f is None:
                deref(c_inst).f_ref().assign(default_inst[cStructWithUnion]().f_ref().value())
                deref(c_inst).__isset.f = False
                pass

        if u is not None:
            deref(c_inst).u = make_unique[cMyUnion](deref((<MyUnion?>u)._cpp_obj))
        if aDouble is not None:
            deref(c_inst).aDouble_ref().assign(aDouble)
            deref(c_inst).__isset.aDouble = True
        if f is not None:
            deref(c_inst).f_ref().assign(deref((<MyField?> f)._cpp_obj))
            deref(c_inst).__isset.f = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithUnion", {
          "aDouble": cpp_obj.aDouble_ref().has_value(),
          "f": cpp_obj.f_ref().has_value(),
        })

    def __iter__(self):
        yield 'u', self.u
        yield 'aDouble', self.aDouble
        yield 'f', self.f

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cStructWithUnion] cpp_obj):
        __fbthrift_inst = <StructWithUnion>StructWithUnion.__new__(StructWithUnion)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def u(self):

        if self.__field_u is None:
            if not deref(self._cpp_obj).u:
                return None
            self.__field_u = MyUnion.create(reference_shared_ptr_u(self._cpp_obj, deref(deref(self._cpp_obj).u)))
        return self.__field_u

    @property
    def aDouble(self):

        return deref(self._cpp_obj).aDouble_ref().value()

    @property
    def f(self):

        if self.__field_f is None:
            self.__field_f = MyField.create(reference_shared_ptr_f(self._cpp_obj, deref(self._cpp_obj).f_ref().value()))
        return self.__field_f


    def __hash__(StructWithUnion self):
        if not self.__hash:
            self.__hash = hash((
            self.u,
            self.aDouble,
            self.f,
            ))
        return self.__hash

    def __repr__(StructWithUnion self):
        return f'StructWithUnion(u={repr(self.u)}, aDouble={repr(self.aDouble)}, f={repr(self.f)})'
    def __copy__(StructWithUnion self):
        cdef shared_ptr[cStructWithUnion] cpp_obj = make_shared[cStructWithUnion](
            deref(self._cpp_obj)
        )
        return StructWithUnion.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithUnion) and
                isinstance(other, StructWithUnion)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithUnion* cself = (<StructWithUnion>self)._cpp_obj.get()
        cdef cStructWithUnion* cother = (<StructWithUnion>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithUnion()

    cdef __iobuf.IOBuf _serialize(StructWithUnion self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithUnion](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithUnion self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithUnion]()
        needed = serializer.cdeserialize[cStructWithUnion](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithUnion, serialize(self)))


@__cython.auto_pickle(False)
cdef class RecursiveStruct(thrift.py3.types.Struct):

    def __init__(
        RecursiveStruct self, *,
        mes=None
    ):
        self._cpp_obj = __fbthrift_move(RecursiveStruct._make_instance(
          NULL,
          NULL,
          mes,
        ))

    def __call__(
        RecursiveStruct self,
        mes=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if mes is ___NOTSET:
            __isNOTSET[0] = True
            mes = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <RecursiveStruct>RecursiveStruct.__new__(RecursiveStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move(RecursiveStruct._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          mes,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cRecursiveStruct] _make_instance(
        cRecursiveStruct* base_instance,
        bint* __isNOTSET,
        object mes 
    ) except *:
        cdef unique_ptr[cRecursiveStruct] c_inst
        if base_instance:
            c_inst = make_unique[cRecursiveStruct](deref(base_instance))
        else:
            c_inst = make_unique[cRecursiveStruct]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and mes is None:
                deref(c_inst).__isset.mes = False
                pass

        if mes is not None:
            deref(c_inst).mes_ref().assign(deref(List__RecursiveStruct(mes)._cpp_obj))
            deref(c_inst).__isset.mes = True
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("RecursiveStruct", {
          "mes": cpp_obj.mes_ref().has_value(),
        })

    def __iter__(self):
        yield 'mes', self.mes

    def __bool__(self):
        return deref(self._cpp_obj).__isset.mes

    @staticmethod
    cdef create(shared_ptr[cRecursiveStruct] cpp_obj):
        __fbthrift_inst = <RecursiveStruct>RecursiveStruct.__new__(RecursiveStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def mes(self):
        if not deref(self._cpp_obj).__isset.mes:
            return None

        if self.__field_mes is None:
            self.__field_mes = List__RecursiveStruct.create(reference_shared_ptr_mes(self._cpp_obj, deref(self._cpp_obj).mes_ref().value_unchecked()))
        return self.__field_mes


    def __hash__(RecursiveStruct self):
        if not self.__hash:
            self.__hash = hash((
            self.mes,
            ))
        return self.__hash

    def __repr__(RecursiveStruct self):
        return f'RecursiveStruct(mes={repr(self.mes)})'
    def __copy__(RecursiveStruct self):
        cdef shared_ptr[cRecursiveStruct] cpp_obj = make_shared[cRecursiveStruct](
            deref(self._cpp_obj)
        )
        return RecursiveStruct.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, RecursiveStruct) and
                isinstance(other, RecursiveStruct)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cRecursiveStruct* cself = (<RecursiveStruct>self)._cpp_obj.get()
        cdef cRecursiveStruct* cother = (<RecursiveStruct>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__RecursiveStruct()

    cdef __iobuf.IOBuf _serialize(RecursiveStruct self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cRecursiveStruct](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(RecursiveStruct self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cRecursiveStruct]()
        needed = serializer.cdeserialize[cRecursiveStruct](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (RecursiveStruct, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithContainers(thrift.py3.types.Struct):

    def __init__(
        StructWithContainers self, *,
        list_ref=None,
        set_ref=None,
        map_ref=None,
        list_ref_unique=None,
        set_ref_shared=None,
        list_ref_shared_const=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithContainers._make_instance(
          NULL,
          NULL,
          list_ref,
          set_ref,
          map_ref,
          list_ref_unique,
          set_ref_shared,
          list_ref_shared_const,
        ))

    def __call__(
        StructWithContainers self,
        list_ref=__NOTSET,
        set_ref=__NOTSET,
        map_ref=__NOTSET,
        list_ref_unique=__NOTSET,
        set_ref_shared=__NOTSET,
        list_ref_shared_const=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[6] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if list_ref is ___NOTSET:
            __isNOTSET[0] = True
            list_ref = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if set_ref is ___NOTSET:
            __isNOTSET[1] = True
            set_ref = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if map_ref is ___NOTSET:
            __isNOTSET[2] = True
            map_ref = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True

        if list_ref_unique is ___NOTSET:
            __isNOTSET[3] = True
            list_ref_unique = None
        else:
            __isNOTSET[3] = False
            __fbthrift_changed = True

        if set_ref_shared is ___NOTSET:
            __isNOTSET[4] = True
            set_ref_shared = None
        else:
            __isNOTSET[4] = False
            __fbthrift_changed = True

        if list_ref_shared_const is ___NOTSET:
            __isNOTSET[5] = True
            list_ref_shared_const = None
        else:
            __isNOTSET[5] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        __fbthrift_inst = <StructWithContainers>StructWithContainers.__new__(StructWithContainers)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithContainers._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          list_ref,
          set_ref,
          map_ref,
          list_ref_unique,
          set_ref_shared,
          list_ref_shared_const,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithContainers] _make_instance(
        cStructWithContainers* base_instance,
        bint* __isNOTSET,
        object list_ref ,
        object set_ref ,
        object map_ref ,
        object list_ref_unique ,
        object set_ref_shared ,
        object list_ref_shared_const 
    ) except *:
        cdef unique_ptr[cStructWithContainers] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithContainers](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithContainers]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and list_ref is None:
                deref(c_inst).list_ref.reset()
                pass

            if not __isNOTSET[1] and set_ref is None:
                deref(c_inst).set_ref.reset()
                pass

            if not __isNOTSET[2] and map_ref is None:
                deref(c_inst).map_ref.reset()
                pass

            if not __isNOTSET[3] and list_ref_unique is None:
                deref(c_inst).list_ref_unique.reset()
                pass

            if not __isNOTSET[4] and set_ref_shared is None:
                deref(c_inst).set_ref_shared.reset()
                pass

            if not __isNOTSET[5] and list_ref_shared_const is None:
                deref(c_inst).list_ref_shared_const.reset()
                pass

        if list_ref is not None:
            deref(c_inst).list_ref = make_unique[vector[cint32_t]](deref(List__i32(list_ref)._cpp_obj))
        if set_ref is not None:
            deref(c_inst).set_ref = make_unique[cset[cint32_t]](deref(Set__i32(set_ref)._cpp_obj))
        if map_ref is not None:
            deref(c_inst).map_ref = make_unique[cmap[cint32_t,cint32_t]](deref(Map__i32_i32(map_ref)._cpp_obj))
        if list_ref_unique is not None:
            deref(c_inst).list_ref_unique = make_unique[vector[cint32_t]](deref(List__i32(list_ref_unique)._cpp_obj))
        if set_ref_shared is not None:
            deref(c_inst).set_ref_shared = Set__i32(set_ref_shared)._cpp_obj
        if list_ref_shared_const is not None:
            deref(c_inst).list_ref_shared_const = const_pointer_cast(List__i32(list_ref_shared_const)._cpp_obj)
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithContainers", {
        })

    def __iter__(self):
        yield 'list_ref', self.list_ref
        yield 'set_ref', self.set_ref
        yield 'map_ref', self.map_ref
        yield 'list_ref_unique', self.list_ref_unique
        yield 'set_ref_shared', self.set_ref_shared
        yield 'list_ref_shared_const', self.list_ref_shared_const

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).list_ref) or <bint>(deref(self._cpp_obj).set_ref) or <bint>(deref(self._cpp_obj).map_ref) or <bint>(deref(self._cpp_obj).list_ref_unique) or <bint>(deref(self._cpp_obj).set_ref_shared) or <bint>(deref(self._cpp_obj).list_ref_shared_const)

    @staticmethod
    cdef create(shared_ptr[cStructWithContainers] cpp_obj):
        __fbthrift_inst = <StructWithContainers>StructWithContainers.__new__(StructWithContainers)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def list_ref(self):

        if self.__field_list_ref is None:
            if not deref(self._cpp_obj).list_ref:
                return None
            self.__field_list_ref = List__i32.create(reference_shared_ptr_list_ref(self._cpp_obj, deref(deref(self._cpp_obj).list_ref)))
        return self.__field_list_ref

    @property
    def set_ref(self):

        if self.__field_set_ref is None:
            if not deref(self._cpp_obj).set_ref:
                return None
            self.__field_set_ref = Set__i32.create(reference_shared_ptr_set_ref(self._cpp_obj, deref(deref(self._cpp_obj).set_ref)))
        return self.__field_set_ref

    @property
    def map_ref(self):

        if self.__field_map_ref is None:
            if not deref(self._cpp_obj).map_ref:
                return None
            self.__field_map_ref = Map__i32_i32.create(reference_shared_ptr_map_ref(self._cpp_obj, deref(deref(self._cpp_obj).map_ref)))
        return self.__field_map_ref

    @property
    def list_ref_unique(self):

        if self.__field_list_ref_unique is None:
            if not deref(self._cpp_obj).list_ref_unique:
                return None
            self.__field_list_ref_unique = List__i32.create(reference_shared_ptr_list_ref_unique(self._cpp_obj, deref(deref(self._cpp_obj).list_ref_unique)))
        return self.__field_list_ref_unique

    @property
    def set_ref_shared(self):

        if self.__field_set_ref_shared is None:
            if not deref(self._cpp_obj).set_ref_shared:
                return None
            self.__field_set_ref_shared = Set__i32.create(reference_shared_ptr_set_ref_shared(self._cpp_obj, deref(deref(self._cpp_obj).set_ref_shared)))
        return self.__field_set_ref_shared

    @property
    def list_ref_shared_const(self):

        if self.__field_list_ref_shared_const is None:
            if not deref(self._cpp_obj).list_ref_shared_const:
                return None
            self.__field_list_ref_shared_const = List__i32.create(reference_shared_ptr_list_ref_shared_const(self._cpp_obj, deref(deref(self._cpp_obj).list_ref_shared_const)))
        return self.__field_list_ref_shared_const


    def __hash__(StructWithContainers self):
        if not self.__hash:
            self.__hash = hash((
            self.list_ref,
            self.set_ref,
            self.map_ref,
            self.list_ref_unique,
            self.set_ref_shared,
            self.list_ref_shared_const,
            ))
        return self.__hash

    def __repr__(StructWithContainers self):
        return f'StructWithContainers(list_ref={repr(self.list_ref)}, set_ref={repr(self.set_ref)}, map_ref={repr(self.map_ref)}, list_ref_unique={repr(self.list_ref_unique)}, set_ref_shared={repr(self.set_ref_shared)}, list_ref_shared_const={repr(self.list_ref_shared_const)})'
    def __copy__(StructWithContainers self):
        cdef shared_ptr[cStructWithContainers] cpp_obj = make_shared[cStructWithContainers](
            deref(self._cpp_obj)
        )
        return StructWithContainers.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithContainers) and
                isinstance(other, StructWithContainers)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithContainers* cself = (<StructWithContainers>self)._cpp_obj.get()
        cdef cStructWithContainers* cother = (<StructWithContainers>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithContainers()

    cdef __iobuf.IOBuf _serialize(StructWithContainers self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithContainers](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithContainers self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithContainers]()
        needed = serializer.cdeserialize[cStructWithContainers](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithContainers, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithSharedConst(thrift.py3.types.Struct):

    def __init__(
        StructWithSharedConst self, *,
        MyField opt_shared_const=None,
        MyField shared_const=None,
        MyField req_shared_const=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithSharedConst._make_instance(
          NULL,
          NULL,
          opt_shared_const,
          shared_const,
          req_shared_const,
        ))

    def __call__(
        StructWithSharedConst self,
        opt_shared_const=__NOTSET,
        shared_const=__NOTSET,
        req_shared_const=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if opt_shared_const is ___NOTSET:
            __isNOTSET[0] = True
            opt_shared_const = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if shared_const is ___NOTSET:
            __isNOTSET[1] = True
            shared_const = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_shared_const is ___NOTSET:
            __isNOTSET[2] = True
            req_shared_const = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if opt_shared_const is not None:
            if not isinstance(opt_shared_const, MyField):
                raise TypeError(f'opt_shared_const is not a { MyField !r}.')

        if shared_const is not None:
            if not isinstance(shared_const, MyField):
                raise TypeError(f'shared_const is not a { MyField !r}.')

        if req_shared_const is not None:
            if not isinstance(req_shared_const, MyField):
                raise TypeError(f'req_shared_const is not a { MyField !r}.')

        __fbthrift_inst = <StructWithSharedConst>StructWithSharedConst.__new__(StructWithSharedConst)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithSharedConst._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          opt_shared_const,
          shared_const,
          req_shared_const,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithSharedConst] _make_instance(
        cStructWithSharedConst* base_instance,
        bint* __isNOTSET,
        MyField opt_shared_const ,
        MyField shared_const ,
        MyField req_shared_const 
    ) except *:
        cdef unique_ptr[cStructWithSharedConst] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithSharedConst](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithSharedConst]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and opt_shared_const is None:
                deref(c_inst).opt_shared_const.reset()
                pass

            if not __isNOTSET[1] and shared_const is None:
                deref(c_inst).shared_const.reset()
                pass

            if not __isNOTSET[2] and req_shared_const is None:
                deref(c_inst).req_shared_const.reset()
                pass

        if opt_shared_const is not None:
            deref(c_inst).opt_shared_const = const_pointer_cast((<MyField?>opt_shared_const)._cpp_obj)
        if shared_const is not None:
            deref(c_inst).shared_const = const_pointer_cast((<MyField?>shared_const)._cpp_obj)
        if req_shared_const is not None:
            deref(c_inst).req_shared_const = const_pointer_cast((<MyField?>req_shared_const)._cpp_obj)
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithSharedConst", {
        })

    def __iter__(self):
        yield 'opt_shared_const', self.opt_shared_const
        yield 'shared_const', self.shared_const
        yield 'req_shared_const', self.req_shared_const

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).opt_shared_const) or <bint>(deref(self._cpp_obj).shared_const) or <bint>(deref(self._cpp_obj).req_shared_const)

    @staticmethod
    cdef create(shared_ptr[cStructWithSharedConst] cpp_obj):
        __fbthrift_inst = <StructWithSharedConst>StructWithSharedConst.__new__(StructWithSharedConst)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def opt_shared_const(self):

        if self.__field_opt_shared_const is None:
            if not deref(self._cpp_obj).opt_shared_const:
                return None
            self.__field_opt_shared_const = MyField.create(reference_shared_ptr_opt_shared_const(self._cpp_obj, deref(deref(self._cpp_obj).opt_shared_const)))
        return self.__field_opt_shared_const

    @property
    def shared_const(self):

        if self.__field_shared_const is None:
            if not deref(self._cpp_obj).shared_const:
                return None
            self.__field_shared_const = MyField.create(reference_shared_ptr_shared_const(self._cpp_obj, deref(deref(self._cpp_obj).shared_const)))
        return self.__field_shared_const

    @property
    def req_shared_const(self):

        if self.__field_req_shared_const is None:
            if not deref(self._cpp_obj).req_shared_const:
                return None
            self.__field_req_shared_const = MyField.create(reference_shared_ptr_req_shared_const(self._cpp_obj, deref(deref(self._cpp_obj).req_shared_const)))
        return self.__field_req_shared_const


    def __hash__(StructWithSharedConst self):
        if not self.__hash:
            self.__hash = hash((
            self.opt_shared_const,
            self.shared_const,
            self.req_shared_const,
            ))
        return self.__hash

    def __repr__(StructWithSharedConst self):
        return f'StructWithSharedConst(opt_shared_const={repr(self.opt_shared_const)}, shared_const={repr(self.shared_const)}, req_shared_const={repr(self.req_shared_const)})'
    def __copy__(StructWithSharedConst self):
        cdef shared_ptr[cStructWithSharedConst] cpp_obj = make_shared[cStructWithSharedConst](
            deref(self._cpp_obj)
        )
        return StructWithSharedConst.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithSharedConst) and
                isinstance(other, StructWithSharedConst)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithSharedConst* cself = (<StructWithSharedConst>self)._cpp_obj.get()
        cdef cStructWithSharedConst* cother = (<StructWithSharedConst>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithSharedConst()

    cdef __iobuf.IOBuf _serialize(StructWithSharedConst self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithSharedConst](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithSharedConst self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithSharedConst]()
        needed = serializer.cdeserialize[cStructWithSharedConst](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithSharedConst, serialize(self)))


@__cython.auto_pickle(False)
cdef class Empty(thrift.py3.types.Struct):

    def __init__(
        Empty self, *
    ):
        self._cpp_obj = __fbthrift_move(Empty._make_instance(
          NULL,
          NULL,
        ))

    def __call__(
        Empty self
    ):
        return self

    @staticmethod
    cdef unique_ptr[cEmpty] _make_instance(
        cEmpty* base_instance,
        bint* __isNOTSET
    ) except *:
        cdef unique_ptr[cEmpty] c_inst
        if base_instance:
            c_inst = make_unique[cEmpty](deref(base_instance))
        else:
            c_inst = make_unique[cEmpty]()

        if base_instance:
            # Convert None's to default value. (or unset)
            pass
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("Empty", {
        })

    def __iter__(self):
        return iter(())

    def __bool__(self):
        return True

    @staticmethod
    cdef create(shared_ptr[cEmpty] cpp_obj):
        __fbthrift_inst = <Empty>Empty.__new__(Empty)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst


    def __hash__(Empty self):
        if not self.__hash:
            self.__hash = hash((
            type(self)   # Hash the class there are no fields
            ))
        return self.__hash

    def __repr__(Empty self):
        return f'Empty()'
    def __copy__(Empty self):
        cdef shared_ptr[cEmpty] cpp_obj = make_shared[cEmpty](
            deref(self._cpp_obj)
        )
        return Empty.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, Empty) and
                isinstance(other, Empty)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cEmpty* cself = (<Empty>self)._cpp_obj.get()
        cdef cEmpty* cother = (<Empty>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Empty()

    cdef __iobuf.IOBuf _serialize(Empty self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cEmpty](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(Empty self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cEmpty]()
        needed = serializer.cdeserialize[cEmpty](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (Empty, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithRef(thrift.py3.types.Struct):

    def __init__(
        StructWithRef self, *,
        Empty def_field=None,
        Empty opt_field=None,
        Empty req_field=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithRef._make_instance(
          NULL,
          NULL,
          def_field,
          opt_field,
          req_field,
        ))

    def __call__(
        StructWithRef self,
        def_field=__NOTSET,
        opt_field=__NOTSET,
        req_field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if def_field is ___NOTSET:
            __isNOTSET[0] = True
            def_field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if opt_field is ___NOTSET:
            __isNOTSET[1] = True
            opt_field = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_field is ___NOTSET:
            __isNOTSET[2] = True
            req_field = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if def_field is not None:
            if not isinstance(def_field, Empty):
                raise TypeError(f'def_field is not a { Empty !r}.')

        if opt_field is not None:
            if not isinstance(opt_field, Empty):
                raise TypeError(f'opt_field is not a { Empty !r}.')

        if req_field is not None:
            if not isinstance(req_field, Empty):
                raise TypeError(f'req_field is not a { Empty !r}.')

        __fbthrift_inst = <StructWithRef>StructWithRef.__new__(StructWithRef)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithRef._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          def_field,
          opt_field,
          req_field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithRef] _make_instance(
        cStructWithRef* base_instance,
        bint* __isNOTSET,
        Empty def_field ,
        Empty opt_field ,
        Empty req_field 
    ) except *:
        cdef unique_ptr[cStructWithRef] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithRef](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithRef]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and def_field is None:
                deref(c_inst).def_field.reset()
                pass

            if not __isNOTSET[1] and opt_field is None:
                deref(c_inst).opt_field.reset()
                pass

            if not __isNOTSET[2] and req_field is None:
                deref(c_inst).req_field.reset()
                pass

        if def_field is not None:
            deref(c_inst).def_field = make_unique[cEmpty](deref((<Empty?>def_field)._cpp_obj))
        if opt_field is not None:
            deref(c_inst).opt_field = make_unique[cEmpty](deref((<Empty?>opt_field)._cpp_obj))
        if req_field is not None:
            deref(c_inst).req_field = make_unique[cEmpty](deref((<Empty?>req_field)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithRef", {
        })

    def __iter__(self):
        yield 'def_field', self.def_field
        yield 'opt_field', self.opt_field
        yield 'req_field', self.req_field

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).def_field) or <bint>(deref(self._cpp_obj).opt_field) or <bint>(deref(self._cpp_obj).req_field)

    @staticmethod
    cdef create(shared_ptr[cStructWithRef] cpp_obj):
        __fbthrift_inst = <StructWithRef>StructWithRef.__new__(StructWithRef)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def def_field(self):

        if self.__field_def_field is None:
            if not deref(self._cpp_obj).def_field:
                return None
            self.__field_def_field = Empty.create(reference_shared_ptr_def_field(self._cpp_obj, deref(deref(self._cpp_obj).def_field)))
        return self.__field_def_field

    @property
    def opt_field(self):

        if self.__field_opt_field is None:
            if not deref(self._cpp_obj).opt_field:
                return None
            self.__field_opt_field = Empty.create(reference_shared_ptr_opt_field(self._cpp_obj, deref(deref(self._cpp_obj).opt_field)))
        return self.__field_opt_field

    @property
    def req_field(self):

        if self.__field_req_field is None:
            if not deref(self._cpp_obj).req_field:
                return None
            self.__field_req_field = Empty.create(reference_shared_ptr_req_field(self._cpp_obj, deref(deref(self._cpp_obj).req_field)))
        return self.__field_req_field


    def __hash__(StructWithRef self):
        if not self.__hash:
            self.__hash = hash((
            self.def_field,
            self.opt_field,
            self.req_field,
            ))
        return self.__hash

    def __repr__(StructWithRef self):
        return f'StructWithRef(def_field={repr(self.def_field)}, opt_field={repr(self.opt_field)}, req_field={repr(self.req_field)})'
    def __copy__(StructWithRef self):
        cdef shared_ptr[cStructWithRef] cpp_obj = make_shared[cStructWithRef](
            deref(self._cpp_obj)
        )
        return StructWithRef.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithRef) and
                isinstance(other, StructWithRef)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithRef* cself = (<StructWithRef>self)._cpp_obj.get()
        cdef cStructWithRef* cother = (<StructWithRef>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithRef()

    cdef __iobuf.IOBuf _serialize(StructWithRef self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithRef](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithRef self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithRef]()
        needed = serializer.cdeserialize[cStructWithRef](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithRef, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithRefTypeUnique(thrift.py3.types.Struct):

    def __init__(
        StructWithRefTypeUnique self, *,
        Empty def_field=None,
        Empty opt_field=None,
        Empty req_field=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithRefTypeUnique._make_instance(
          NULL,
          NULL,
          def_field,
          opt_field,
          req_field,
        ))

    def __call__(
        StructWithRefTypeUnique self,
        def_field=__NOTSET,
        opt_field=__NOTSET,
        req_field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if def_field is ___NOTSET:
            __isNOTSET[0] = True
            def_field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if opt_field is ___NOTSET:
            __isNOTSET[1] = True
            opt_field = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_field is ___NOTSET:
            __isNOTSET[2] = True
            req_field = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if def_field is not None:
            if not isinstance(def_field, Empty):
                raise TypeError(f'def_field is not a { Empty !r}.')

        if opt_field is not None:
            if not isinstance(opt_field, Empty):
                raise TypeError(f'opt_field is not a { Empty !r}.')

        if req_field is not None:
            if not isinstance(req_field, Empty):
                raise TypeError(f'req_field is not a { Empty !r}.')

        __fbthrift_inst = <StructWithRefTypeUnique>StructWithRefTypeUnique.__new__(StructWithRefTypeUnique)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithRefTypeUnique._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          def_field,
          opt_field,
          req_field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithRefTypeUnique] _make_instance(
        cStructWithRefTypeUnique* base_instance,
        bint* __isNOTSET,
        Empty def_field ,
        Empty opt_field ,
        Empty req_field 
    ) except *:
        cdef unique_ptr[cStructWithRefTypeUnique] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithRefTypeUnique](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithRefTypeUnique]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and def_field is None:
                deref(c_inst).def_field.reset()
                pass

            if not __isNOTSET[1] and opt_field is None:
                deref(c_inst).opt_field.reset()
                pass

            if not __isNOTSET[2] and req_field is None:
                deref(c_inst).req_field.reset()
                pass

        if def_field is not None:
            deref(c_inst).def_field = make_unique[cEmpty](deref((<Empty?>def_field)._cpp_obj))
        if opt_field is not None:
            deref(c_inst).opt_field = make_unique[cEmpty](deref((<Empty?>opt_field)._cpp_obj))
        if req_field is not None:
            deref(c_inst).req_field = make_unique[cEmpty](deref((<Empty?>req_field)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithRefTypeUnique", {
        })

    def __iter__(self):
        yield 'def_field', self.def_field
        yield 'opt_field', self.opt_field
        yield 'req_field', self.req_field

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).def_field) or <bint>(deref(self._cpp_obj).opt_field) or <bint>(deref(self._cpp_obj).req_field)

    @staticmethod
    cdef create(shared_ptr[cStructWithRefTypeUnique] cpp_obj):
        __fbthrift_inst = <StructWithRefTypeUnique>StructWithRefTypeUnique.__new__(StructWithRefTypeUnique)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def def_field(self):

        if self.__field_def_field is None:
            if not deref(self._cpp_obj).def_field:
                return None
            self.__field_def_field = Empty.create(reference_shared_ptr_def_field(self._cpp_obj, deref(deref(self._cpp_obj).def_field)))
        return self.__field_def_field

    @property
    def opt_field(self):

        if self.__field_opt_field is None:
            if not deref(self._cpp_obj).opt_field:
                return None
            self.__field_opt_field = Empty.create(reference_shared_ptr_opt_field(self._cpp_obj, deref(deref(self._cpp_obj).opt_field)))
        return self.__field_opt_field

    @property
    def req_field(self):

        if self.__field_req_field is None:
            if not deref(self._cpp_obj).req_field:
                return None
            self.__field_req_field = Empty.create(reference_shared_ptr_req_field(self._cpp_obj, deref(deref(self._cpp_obj).req_field)))
        return self.__field_req_field


    def __hash__(StructWithRefTypeUnique self):
        if not self.__hash:
            self.__hash = hash((
            self.def_field,
            self.opt_field,
            self.req_field,
            ))
        return self.__hash

    def __repr__(StructWithRefTypeUnique self):
        return f'StructWithRefTypeUnique(def_field={repr(self.def_field)}, opt_field={repr(self.opt_field)}, req_field={repr(self.req_field)})'
    def __copy__(StructWithRefTypeUnique self):
        cdef shared_ptr[cStructWithRefTypeUnique] cpp_obj = make_shared[cStructWithRefTypeUnique](
            deref(self._cpp_obj)
        )
        return StructWithRefTypeUnique.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithRefTypeUnique) and
                isinstance(other, StructWithRefTypeUnique)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithRefTypeUnique* cself = (<StructWithRefTypeUnique>self)._cpp_obj.get()
        cdef cStructWithRefTypeUnique* cother = (<StructWithRefTypeUnique>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithRefTypeUnique()

    cdef __iobuf.IOBuf _serialize(StructWithRefTypeUnique self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithRefTypeUnique](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithRefTypeUnique self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithRefTypeUnique]()
        needed = serializer.cdeserialize[cStructWithRefTypeUnique](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithRefTypeUnique, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithRefTypeShared(thrift.py3.types.Struct):

    def __init__(
        StructWithRefTypeShared self, *,
        Empty def_field=None,
        Empty opt_field=None,
        Empty req_field=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithRefTypeShared._make_instance(
          NULL,
          NULL,
          def_field,
          opt_field,
          req_field,
        ))

    def __call__(
        StructWithRefTypeShared self,
        def_field=__NOTSET,
        opt_field=__NOTSET,
        req_field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if def_field is ___NOTSET:
            __isNOTSET[0] = True
            def_field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if opt_field is ___NOTSET:
            __isNOTSET[1] = True
            opt_field = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_field is ___NOTSET:
            __isNOTSET[2] = True
            req_field = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if def_field is not None:
            if not isinstance(def_field, Empty):
                raise TypeError(f'def_field is not a { Empty !r}.')

        if opt_field is not None:
            if not isinstance(opt_field, Empty):
                raise TypeError(f'opt_field is not a { Empty !r}.')

        if req_field is not None:
            if not isinstance(req_field, Empty):
                raise TypeError(f'req_field is not a { Empty !r}.')

        __fbthrift_inst = <StructWithRefTypeShared>StructWithRefTypeShared.__new__(StructWithRefTypeShared)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithRefTypeShared._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          def_field,
          opt_field,
          req_field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithRefTypeShared] _make_instance(
        cStructWithRefTypeShared* base_instance,
        bint* __isNOTSET,
        Empty def_field ,
        Empty opt_field ,
        Empty req_field 
    ) except *:
        cdef unique_ptr[cStructWithRefTypeShared] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithRefTypeShared](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithRefTypeShared]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and def_field is None:
                deref(c_inst).def_field.reset()
                pass

            if not __isNOTSET[1] and opt_field is None:
                deref(c_inst).opt_field.reset()
                pass

            if not __isNOTSET[2] and req_field is None:
                deref(c_inst).req_field.reset()
                pass

        if def_field is not None:
            deref(c_inst).def_field = (<Empty?>def_field)._cpp_obj
        if opt_field is not None:
            deref(c_inst).opt_field = (<Empty?>opt_field)._cpp_obj
        if req_field is not None:
            deref(c_inst).req_field = (<Empty?>req_field)._cpp_obj
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithRefTypeShared", {
        })

    def __iter__(self):
        yield 'def_field', self.def_field
        yield 'opt_field', self.opt_field
        yield 'req_field', self.req_field

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).def_field) or <bint>(deref(self._cpp_obj).opt_field) or <bint>(deref(self._cpp_obj).req_field)

    @staticmethod
    cdef create(shared_ptr[cStructWithRefTypeShared] cpp_obj):
        __fbthrift_inst = <StructWithRefTypeShared>StructWithRefTypeShared.__new__(StructWithRefTypeShared)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def def_field(self):

        if self.__field_def_field is None:
            if not deref(self._cpp_obj).def_field:
                return None
            self.__field_def_field = Empty.create(reference_shared_ptr_def_field(self._cpp_obj, deref(deref(self._cpp_obj).def_field)))
        return self.__field_def_field

    @property
    def opt_field(self):

        if self.__field_opt_field is None:
            if not deref(self._cpp_obj).opt_field:
                return None
            self.__field_opt_field = Empty.create(reference_shared_ptr_opt_field(self._cpp_obj, deref(deref(self._cpp_obj).opt_field)))
        return self.__field_opt_field

    @property
    def req_field(self):

        if self.__field_req_field is None:
            if not deref(self._cpp_obj).req_field:
                return None
            self.__field_req_field = Empty.create(reference_shared_ptr_req_field(self._cpp_obj, deref(deref(self._cpp_obj).req_field)))
        return self.__field_req_field


    def __hash__(StructWithRefTypeShared self):
        if not self.__hash:
            self.__hash = hash((
            self.def_field,
            self.opt_field,
            self.req_field,
            ))
        return self.__hash

    def __repr__(StructWithRefTypeShared self):
        return f'StructWithRefTypeShared(def_field={repr(self.def_field)}, opt_field={repr(self.opt_field)}, req_field={repr(self.req_field)})'
    def __copy__(StructWithRefTypeShared self):
        cdef shared_ptr[cStructWithRefTypeShared] cpp_obj = make_shared[cStructWithRefTypeShared](
            deref(self._cpp_obj)
        )
        return StructWithRefTypeShared.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithRefTypeShared) and
                isinstance(other, StructWithRefTypeShared)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithRefTypeShared* cself = (<StructWithRefTypeShared>self)._cpp_obj.get()
        cdef cStructWithRefTypeShared* cother = (<StructWithRefTypeShared>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithRefTypeShared()

    cdef __iobuf.IOBuf _serialize(StructWithRefTypeShared self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithRefTypeShared](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithRefTypeShared self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithRefTypeShared]()
        needed = serializer.cdeserialize[cStructWithRefTypeShared](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithRefTypeShared, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithRefTypeSharedConst(thrift.py3.types.Struct):

    def __init__(
        StructWithRefTypeSharedConst self, *,
        Empty def_field=None,
        Empty opt_field=None,
        Empty req_field=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithRefTypeSharedConst._make_instance(
          NULL,
          NULL,
          def_field,
          opt_field,
          req_field,
        ))

    def __call__(
        StructWithRefTypeSharedConst self,
        def_field=__NOTSET,
        opt_field=__NOTSET,
        req_field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[3] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if def_field is ___NOTSET:
            __isNOTSET[0] = True
            def_field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True

        if opt_field is ___NOTSET:
            __isNOTSET[1] = True
            opt_field = None
        else:
            __isNOTSET[1] = False
            __fbthrift_changed = True

        if req_field is ___NOTSET:
            __isNOTSET[2] = True
            req_field = None
        else:
            __isNOTSET[2] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if def_field is not None:
            if not isinstance(def_field, Empty):
                raise TypeError(f'def_field is not a { Empty !r}.')

        if opt_field is not None:
            if not isinstance(opt_field, Empty):
                raise TypeError(f'opt_field is not a { Empty !r}.')

        if req_field is not None:
            if not isinstance(req_field, Empty):
                raise TypeError(f'req_field is not a { Empty !r}.')

        __fbthrift_inst = <StructWithRefTypeSharedConst>StructWithRefTypeSharedConst.__new__(StructWithRefTypeSharedConst)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithRefTypeSharedConst._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          def_field,
          opt_field,
          req_field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithRefTypeSharedConst] _make_instance(
        cStructWithRefTypeSharedConst* base_instance,
        bint* __isNOTSET,
        Empty def_field ,
        Empty opt_field ,
        Empty req_field 
    ) except *:
        cdef unique_ptr[cStructWithRefTypeSharedConst] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithRefTypeSharedConst](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithRefTypeSharedConst]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and def_field is None:
                deref(c_inst).def_field.reset()
                pass

            if not __isNOTSET[1] and opt_field is None:
                deref(c_inst).opt_field.reset()
                pass

            if not __isNOTSET[2] and req_field is None:
                deref(c_inst).req_field.reset()
                pass

        if def_field is not None:
            deref(c_inst).def_field = const_pointer_cast((<Empty?>def_field)._cpp_obj)
        if opt_field is not None:
            deref(c_inst).opt_field = const_pointer_cast((<Empty?>opt_field)._cpp_obj)
        if req_field is not None:
            deref(c_inst).req_field = const_pointer_cast((<Empty?>req_field)._cpp_obj)
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithRefTypeSharedConst", {
        })

    def __iter__(self):
        yield 'def_field', self.def_field
        yield 'opt_field', self.opt_field
        yield 'req_field', self.req_field

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).def_field) or <bint>(deref(self._cpp_obj).opt_field) or <bint>(deref(self._cpp_obj).req_field)

    @staticmethod
    cdef create(shared_ptr[cStructWithRefTypeSharedConst] cpp_obj):
        __fbthrift_inst = <StructWithRefTypeSharedConst>StructWithRefTypeSharedConst.__new__(StructWithRefTypeSharedConst)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def def_field(self):

        if self.__field_def_field is None:
            if not deref(self._cpp_obj).def_field:
                return None
            self.__field_def_field = Empty.create(reference_shared_ptr_def_field(self._cpp_obj, deref(deref(self._cpp_obj).def_field)))
        return self.__field_def_field

    @property
    def opt_field(self):

        if self.__field_opt_field is None:
            if not deref(self._cpp_obj).opt_field:
                return None
            self.__field_opt_field = Empty.create(reference_shared_ptr_opt_field(self._cpp_obj, deref(deref(self._cpp_obj).opt_field)))
        return self.__field_opt_field

    @property
    def req_field(self):

        if self.__field_req_field is None:
            if not deref(self._cpp_obj).req_field:
                return None
            self.__field_req_field = Empty.create(reference_shared_ptr_req_field(self._cpp_obj, deref(deref(self._cpp_obj).req_field)))
        return self.__field_req_field


    def __hash__(StructWithRefTypeSharedConst self):
        if not self.__hash:
            self.__hash = hash((
            self.def_field,
            self.opt_field,
            self.req_field,
            ))
        return self.__hash

    def __repr__(StructWithRefTypeSharedConst self):
        return f'StructWithRefTypeSharedConst(def_field={repr(self.def_field)}, opt_field={repr(self.opt_field)}, req_field={repr(self.req_field)})'
    def __copy__(StructWithRefTypeSharedConst self):
        cdef shared_ptr[cStructWithRefTypeSharedConst] cpp_obj = make_shared[cStructWithRefTypeSharedConst](
            deref(self._cpp_obj)
        )
        return StructWithRefTypeSharedConst.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithRefTypeSharedConst) and
                isinstance(other, StructWithRefTypeSharedConst)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithRefTypeSharedConst* cself = (<StructWithRefTypeSharedConst>self)._cpp_obj.get()
        cdef cStructWithRefTypeSharedConst* cother = (<StructWithRefTypeSharedConst>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithRefTypeSharedConst()

    cdef __iobuf.IOBuf _serialize(StructWithRefTypeSharedConst self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithRefTypeSharedConst](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithRefTypeSharedConst self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithRefTypeSharedConst]()
        needed = serializer.cdeserialize[cStructWithRefTypeSharedConst](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithRefTypeSharedConst, serialize(self)))


@__cython.auto_pickle(False)
cdef class StructWithRefAndAnnotCppNoexceptMoveCtor(thrift.py3.types.Struct):

    def __init__(
        StructWithRefAndAnnotCppNoexceptMoveCtor self, *,
        Empty def_field=None
    ):
        self._cpp_obj = __fbthrift_move(StructWithRefAndAnnotCppNoexceptMoveCtor._make_instance(
          NULL,
          NULL,
          def_field,
        ))

    def __call__(
        StructWithRefAndAnnotCppNoexceptMoveCtor self,
        def_field=__NOTSET
    ):
        ___NOTSET = __NOTSET  # Cheaper for larger structs
        cdef bint[1] __isNOTSET  # so make_instance is typed

        __fbthrift_changed = False
        if def_field is ___NOTSET:
            __isNOTSET[0] = True
            def_field = None
        else:
            __isNOTSET[0] = False
            __fbthrift_changed = True


        if not __fbthrift_changed:
            return self

        if def_field is not None:
            if not isinstance(def_field, Empty):
                raise TypeError(f'def_field is not a { Empty !r}.')

        __fbthrift_inst = <StructWithRefAndAnnotCppNoexceptMoveCtor>StructWithRefAndAnnotCppNoexceptMoveCtor.__new__(StructWithRefAndAnnotCppNoexceptMoveCtor)
        __fbthrift_inst._cpp_obj = __fbthrift_move(StructWithRefAndAnnotCppNoexceptMoveCtor._make_instance(
          self._cpp_obj.get(),
          __isNOTSET,
          def_field,
        ))
        return __fbthrift_inst

    @staticmethod
    cdef unique_ptr[cStructWithRefAndAnnotCppNoexceptMoveCtor] _make_instance(
        cStructWithRefAndAnnotCppNoexceptMoveCtor* base_instance,
        bint* __isNOTSET,
        Empty def_field 
    ) except *:
        cdef unique_ptr[cStructWithRefAndAnnotCppNoexceptMoveCtor] c_inst
        if base_instance:
            c_inst = make_unique[cStructWithRefAndAnnotCppNoexceptMoveCtor](deref(base_instance))
        else:
            c_inst = make_unique[cStructWithRefAndAnnotCppNoexceptMoveCtor]()

        if base_instance:
            # Convert None's to default value. (or unset)
            if not __isNOTSET[0] and def_field is None:
                deref(c_inst).def_field.reset()
                pass

        if def_field is not None:
            deref(c_inst).def_field = make_unique[cEmpty](deref((<Empty?>def_field)._cpp_obj))
        # in C++ you don't have to call move(), but this doesn't translate
        # into a C++ return statement, so you do here
        return __fbthrift_move_unique(c_inst)

    cdef object __fbthrift_isset(self):
        cpp_obj = deref(self._cpp_obj)
        return thrift.py3.types._IsSet("StructWithRefAndAnnotCppNoexceptMoveCtor", {
        })

    def __iter__(self):
        yield 'def_field', self.def_field

    def __bool__(self):
        return <bint>(deref(self._cpp_obj).def_field)

    @staticmethod
    cdef create(shared_ptr[cStructWithRefAndAnnotCppNoexceptMoveCtor] cpp_obj):
        __fbthrift_inst = <StructWithRefAndAnnotCppNoexceptMoveCtor>StructWithRefAndAnnotCppNoexceptMoveCtor.__new__(StructWithRefAndAnnotCppNoexceptMoveCtor)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(cpp_obj)
        return __fbthrift_inst

    @property
    def def_field(self):

        if self.__field_def_field is None:
            if not deref(self._cpp_obj).def_field:
                return None
            self.__field_def_field = Empty.create(reference_shared_ptr_def_field(self._cpp_obj, deref(deref(self._cpp_obj).def_field)))
        return self.__field_def_field


    def __hash__(StructWithRefAndAnnotCppNoexceptMoveCtor self):
        if not self.__hash:
            self.__hash = hash((
            self.def_field,
            ))
        return self.__hash

    def __repr__(StructWithRefAndAnnotCppNoexceptMoveCtor self):
        return f'StructWithRefAndAnnotCppNoexceptMoveCtor(def_field={repr(self.def_field)})'
    def __copy__(StructWithRefAndAnnotCppNoexceptMoveCtor self):
        cdef shared_ptr[cStructWithRefAndAnnotCppNoexceptMoveCtor] cpp_obj = make_shared[cStructWithRefAndAnnotCppNoexceptMoveCtor](
            deref(self._cpp_obj)
        )
        return StructWithRefAndAnnotCppNoexceptMoveCtor.create(__fbthrift_move_shared(cpp_obj))

    def __richcmp__(self, other, op):
        cdef int cop = op
        if not (
                isinstance(self, StructWithRefAndAnnotCppNoexceptMoveCtor) and
                isinstance(other, StructWithRefAndAnnotCppNoexceptMoveCtor)):
            if cop == Py_EQ:  # different types are never equal
                return False
            elif cop == Py_NE:  # different types are always notequal
                return True
            else:
                return NotImplemented

        cdef cStructWithRefAndAnnotCppNoexceptMoveCtor* cself = (<StructWithRefAndAnnotCppNoexceptMoveCtor>self)._cpp_obj.get()
        cdef cStructWithRefAndAnnotCppNoexceptMoveCtor* cother = (<StructWithRefAndAnnotCppNoexceptMoveCtor>other)._cpp_obj.get()
        if cop == Py_EQ:
            return deref(cself) == deref(cother)
        elif cop == Py_NE:
            return deref(cself) != deref(cother)
        elif cop == Py_LT:
            return deref(cself) < deref(cother)
        elif cop == Py_LE:
            return deref(cself) <= deref(cother)
        elif cop == Py_GT:
            return deref(cself) > deref(cother)
        elif cop == Py_GE:
            return deref(cself) >= deref(cother)
        else:
            return NotImplemented

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__StructWithRefAndAnnotCppNoexceptMoveCtor()

    cdef __iobuf.IOBuf _serialize(StructWithRefAndAnnotCppNoexceptMoveCtor self, __Protocol proto):
        return __iobuf.from_unique_ptr(
            serializer.cserialize[cStructWithRefAndAnnotCppNoexceptMoveCtor](self._cpp_obj.get(), proto).move()
        )

    cdef cuint32_t _deserialize(StructWithRefAndAnnotCppNoexceptMoveCtor self, const __iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cStructWithRefAndAnnotCppNoexceptMoveCtor]()
        needed = serializer.cdeserialize[cStructWithRefAndAnnotCppNoexceptMoveCtor](buf, self._cpp_obj.get(), proto)
        return needed

    def __reduce__(self):
        return (deserialize, (StructWithRefAndAnnotCppNoexceptMoveCtor, serialize(self)))


@__cython.auto_pickle(False)
cdef class List__RecursiveStruct(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__RecursiveStruct):
            self._cpp_obj = (<List__RecursiveStruct> items)._cpp_obj
        else:
            self._cpp_obj = List__RecursiveStruct._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cRecursiveStruct]] c_items):
        __fbthrift_inst = <List__RecursiveStruct>List__RecursiveStruct.__new__(List__RecursiveStruct)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__RecursiveStruct self):
        cdef shared_ptr[vector[cRecursiveStruct]] cpp_obj = make_shared[vector[cRecursiveStruct]](
            deref(self._cpp_obj)
        )
        return List__RecursiveStruct.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cRecursiveStruct]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cRecursiveStruct]] c_inst = make_shared[vector[cRecursiveStruct]]()
        if items is not None:
            for item in items:
                if not isinstance(item, RecursiveStruct):
                    raise TypeError(f"{item!r} is not of type 'RecursiveStruct'")
                deref(c_inst).push_back(deref((<RecursiveStruct>item)._cpp_obj))
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cRecursiveStruct]] c_inst
        cdef shared_ptr[cRecursiveStruct] citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cRecursiveStruct]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__RecursiveStruct.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = reference_shared_ptr_List__RecursiveStruct(self._cpp_obj, deref(self._cpp_obj)[index])
            return RecursiveStruct.create(citem)

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, RecursiveStruct):
            return False
        return std_libcpp.find[vector[cRecursiveStruct].iterator, cRecursiveStruct](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<RecursiveStruct>item)._cpp_obj)) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef shared_ptr[cRecursiveStruct] citem
        cdef vector[cRecursiveStruct].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = reference_shared_ptr_List__RecursiveStruct(self._cpp_obj, deref(loc))
            yield RecursiveStruct.create(citem)
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef shared_ptr[cRecursiveStruct] citem
        cdef vector[cRecursiveStruct].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = reference_shared_ptr_List__RecursiveStruct(self._cpp_obj, deref(loc))
            yield RecursiveStruct.create(citem)
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, RecursiveStruct):
            raise err
        cdef vector[cRecursiveStruct].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cRecursiveStruct].iterator loc = std_libcpp.find[vector[cRecursiveStruct].iterator, cRecursiveStruct](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            deref((<RecursiveStruct>item)._cpp_obj)        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, RecursiveStruct):
            return 0
        return <cint64_t> std_libcpp.count[vector[cRecursiveStruct].iterator, cRecursiveStruct](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), deref((<RecursiveStruct>item)._cpp_obj))

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__RecursiveStruct()


Sequence.register(List__RecursiveStruct)

@__cython.auto_pickle(False)
cdef class List__i32(thrift.py3.types.List):
    def __init__(self, items=None):
        if isinstance(items, List__i32):
            self._cpp_obj = (<List__i32> items)._cpp_obj
        else:
            self._cpp_obj = List__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[vector[cint32_t]] c_items):
        __fbthrift_inst = <List__i32>List__i32.__new__(List__i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(List__i32 self):
        cdef shared_ptr[vector[cint32_t]] cpp_obj = make_shared[vector[cint32_t]](
            deref(self._cpp_obj)
        )
        return List__i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[vector[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[vector[cint32_t]] c_inst = make_shared[vector[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).push_back(item)
        return c_inst

    def __getitem__(self, object index_obj):
        cdef shared_ptr[vector[cint32_t]] c_inst
        cdef cint32_t citem
        if isinstance(index_obj, slice):
            c_inst = make_shared[vector[cint32_t]]()
            sz = deref(self._cpp_obj).size()
            for index in range(*index_obj.indices(sz)):
                deref(c_inst).push_back(deref(self._cpp_obj)[index])
            return List__i32.create(__fbthrift_move_shared(c_inst))
        else:
            index = <int?>index_obj
            size = len(self)
            # Convert a negative index
            if index < 0:
                index = size + index
            if index >= size or index < 0:
                raise IndexError('list index out of range')
            citem = deref(self._cpp_obj)[index]
            return citem

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return std_libcpp.find[vector[cint32_t].iterator, cint32_t](deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item) != deref(self._cpp_obj).end()

    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef vector[cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield citem
            inc(loc)

    def __reversed__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef vector[cint32_t].reverse_iterator loc = deref(self._cpp_obj).rbegin()
        while loc != deref(self._cpp_obj).rend():
            citem = deref(loc)
            yield citem
            inc(loc)

    def index(self, item, start not None=__NOTSET, stop not None=__NOTSET):
        err = ValueError(f'{item} is not in list')
        if not self or item is None:
            raise err
        offset_begin = offset_end = 0
        if stop is not __NOTSET or start is not __NOTSET:
            # Like self[start:stop].index(item)
            size = len(self)
            stop = stop if stop is not __NOTSET else size
            start = start if start is not __NOTSET else 0
            # Convert stop to a negative position.
            if stop > 0:
                stop = min(stop - size, 0)
            if stop <= -size:
                raise err  # List would be empty
            offset_end = -stop
            # Convert start to always be positive
            if start < 0:
                start = max(size + start, 0)
            if start >= size:
                raise err  # past end of list
            offset_begin = start

        if not isinstance(item, int):
            raise err
        cdef vector[cint32_t].iterator end = std_libcpp.prev(deref(self._cpp_obj).end(), <cint64_t>offset_end)
        cdef vector[cint32_t].iterator loc = std_libcpp.find[vector[cint32_t].iterator, cint32_t](
            std_libcpp.next(deref(self._cpp_obj).begin(), <cint64_t>offset_begin),
            end,
            item        )
        if loc != end:
            return <cint64_t> std_libcpp.distance(deref(self._cpp_obj).begin(), loc)
        raise err

    def count(self, item):
        if not self or item is None:
            return 0
        if not isinstance(item, int):
            return 0
        return <cint64_t> std_libcpp.count[vector[cint32_t].iterator, cint32_t](
            deref(self._cpp_obj).begin(), deref(self._cpp_obj).end(), item)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__List__i32()


Sequence.register(List__i32)

@__cython.auto_pickle(False)
cdef class Set__i32(thrift.py3.types.Set):
    def __init__(self, items=None):
        if isinstance(items, Set__i32):
            self._cpp_obj = (<Set__i32> items)._cpp_obj
        else:
            self._cpp_obj = Set__i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cset[cint32_t]] c_items):
        __fbthrift_inst = <Set__i32>Set__i32.__new__(Set__i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Set__i32 self):
        cdef shared_ptr[cset[cint32_t]] cpp_obj = make_shared[cset[cint32_t]](
            deref(self._cpp_obj)
        )
        return Set__i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cset[cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cset[cint32_t]] c_inst = make_shared[cset[cint32_t]]()
        if items is not None:
            for item in items:
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item
                deref(c_inst).insert(item)
        return c_inst

    def __contains__(self, item):
        if not self or item is None:
            return False
        if not isinstance(item, int):
            return False
        return pbool(deref(self._cpp_obj).count(item))


    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cset[cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc)
            yield citem
            inc(loc)

    def __hash__(self):
        return super().__hash__()

    def __richcmp__(self, other, op):
        cdef int cop = op
        cdef shared_ptr[cset[cint32_t]] cself, cother
        cdef cset[cint32_t].iterator loc
        if (isinstance(self, Set__i32) and
                isinstance(other, Set__i32)):
            cself = (<Set__i32> self)._cpp_obj
            cother = (<Set__i32> other)._cpp_obj
            # C level comparisons
            if cop == Py_LT:    # Less Than (strict subset)
                if not deref(cself).size() < deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_LE:  # Less Than or Equal To  (subset)
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_EQ:  # Equivalent
                if deref(cself).size() != deref(cother).size():
                    return False
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_NE:  # Not Equivalent
                loc = deref(cself).begin()
                while loc != deref(cself).end():
                    if not deref(cother).count(deref(loc)):
                        return True
                    inc(loc)
                return deref(cself).size() != deref(cother).size()
            elif cop == Py_GT:  # Greater Than (strict superset)
                if not deref(cself).size() > deref(cother).size():
                    return False
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True
            elif cop == Py_GE:  # Greater Than or Equal To (superset)
                loc = deref(cother).begin()
                while loc != deref(cother).end():
                    if not deref(cself).count(deref(loc)):
                        return False
                    inc(loc)
                return True

        # Python level comparisons
        if cop == Py_LT:
            return Set.__lt__(self, other)
        elif cop == Py_LE:
            return Set.__le__(self, other)
        elif cop == Py_EQ:
            return Set.__eq__(self, other)
        elif cop == Py_NE:
            return Set.__ne__(self, other)
        elif cop == Py_GT:
            return Set.__gt__(self, other)
        elif cop == Py_GE:
            return Set.__ge__(self, other)

    def __and__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) > 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __sub__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __or__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))

    def __xor__(self, other):
        if not isinstance(self, Set__i32):
            self = Set__i32(self)
        if not isinstance(other, Set__i32):
            other = Set__i32(other)

        cdef shared_ptr[cset[cint32_t]] shretval = \
            make_shared[cset[cint32_t]]()

        cdef shared_ptr[cset[cint32_t]] cself = (<Set__i32> self)._cpp_obj
        cdef shared_ptr[cset[cint32_t]] cother = (<Set__i32> other)._cpp_obj

        cdef cset[cint32_t].iterator loc = deref(cself).begin()
        while loc != deref(cself).end():
            if deref(cother).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        loc = deref(cother).begin()
        while loc != deref(cother).end():
            if deref(cself).count(deref(loc)) == 0:
                deref(shretval).insert(deref(loc))
            inc(loc)
        return Set__i32.create(__fbthrift_move_shared(shretval))


    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Set__i32()


Set.register(Set__i32)

@__cython.auto_pickle(False)
cdef class Map__i32_i32(thrift.py3.types.Map):
    def __init__(self, items=None):
        if isinstance(items, Map__i32_i32):
            self._cpp_obj = (<Map__i32_i32> items)._cpp_obj
        else:
            self._cpp_obj = Map__i32_i32._make_instance(items)

    @staticmethod
    cdef create(shared_ptr[cmap[cint32_t,cint32_t]] c_items):
        __fbthrift_inst = <Map__i32_i32>Map__i32_i32.__new__(Map__i32_i32)
        __fbthrift_inst._cpp_obj = __fbthrift_move_shared(c_items)
        return __fbthrift_inst

    def __copy__(Map__i32_i32 self):
        cdef shared_ptr[cmap[cint32_t,cint32_t]] cpp_obj = make_shared[cmap[cint32_t,cint32_t]](
            deref(self._cpp_obj)
        )
        return Map__i32_i32.create(__fbthrift_move_shared(cpp_obj))

    def __len__(self):
        return deref(self._cpp_obj).size()

    @staticmethod
    cdef shared_ptr[cmap[cint32_t,cint32_t]] _make_instance(object items) except *:
        cdef shared_ptr[cmap[cint32_t,cint32_t]] c_inst = make_shared[cmap[cint32_t,cint32_t]]()
        if items is not None:
            for key, item in items.items():
                if not isinstance(key, int):
                    raise TypeError(f"{key!r} is not of type int")
                key = <cint32_t> key
                if not isinstance(item, int):
                    raise TypeError(f"{item!r} is not of type int")
                item = <cint32_t> item

                deref(c_inst)[key] = item
        return c_inst

    def __getitem__(self, key):
        err = KeyError(f'{key}')
        if not self or key is None:
            raise err
        if not isinstance(key, int):
            raise err from None
        cdef cmap[cint32_t,cint32_t].iterator iter = deref(
            self._cpp_obj).find(key)
        if iter == deref(self._cpp_obj).end():
            raise err
        cdef cint32_t citem = deref(iter).second
        return citem

    def __iter__(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).first
            yield citem
            inc(loc)

    def __contains__(self, key):
        if not self or key is None:
            return False
        if not isinstance(key, int):
            return False
        cdef cint32_t ckey = key
        return deref(self._cpp_obj).count(ckey) > 0

    def get(self, key, default=None):
        if not self or key is None:
            return default
        if not isinstance(key, int):
            return default
        if key not in self:
            return default
        return self[key]

    def values(self):
        if not self:
            return
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            citem = deref(loc).second
            yield citem
            inc(loc)

    def items(self):
        if not self:
            return
        cdef cint32_t ckey
        cdef cint32_t citem
        cdef cmap[cint32_t,cint32_t].iterator loc = deref(self._cpp_obj).begin()
        while loc != deref(self._cpp_obj).end():
            ckey = deref(loc).first
            citem = deref(loc).second
            yield (ckey, citem)
            inc(loc)

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__Map__i32_i32()


Mapping.register(Map__i32_i32)

kStructWithRef = StructWithRef.create(constant_shared_ptr(ckStructWithRef()))
kStructWithRefTypeUnique = StructWithRefTypeUnique.create(constant_shared_ptr(ckStructWithRefTypeUnique()))
kStructWithRefTypeShared = StructWithRefTypeShared.create(constant_shared_ptr(ckStructWithRefTypeShared()))
kStructWithRefTypeSharedConst = StructWithRefTypeSharedConst.create(constant_shared_ptr(ckStructWithRefTypeSharedConst()))
